"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = Code;
const jsx_runtime_1 = require("react/jsx-runtime");
const r22n_1 = require("r22n");
const react_1 = require("react");
const react_syntax_highlighter_1 = __importDefault(require("react-syntax-highlighter"));
const hljs_1 = require("react-syntax-highlighter/dist/cjs/styles/hljs");
function Code(props) {
    const [mounted, setMounted] = (0, react_1.useState)(false);
    const { children, className, copy, onCopy, language, numbers, syntaxStyle } = props;
    const { _ } = (0, r22n_1.useLanguage)();
    const body = children
        .split('\n')
        .map((line) => (language === 'bash' ? `$ ${line}` : line))
        .join('\n');
    const handleCopy = () => {
        if (onCopy) {
            onCopy();
        }
        navigator.clipboard.writeText(children.toString());
    };
    (0, react_1.useEffect)(() => {
        setMounted(true);
    }, []);
    if (!language) {
        return ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("span", { children: "\u00A0" }), (0, jsx_runtime_1.jsx)("code", { className: 'text-sm text-t2 bg-b1 font-semibold inline-block p-0.5', children: body }), (0, jsx_runtime_1.jsx)("span", { children: "\u00A0" })] }));
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: `flex text-sm bg-black ${className || ''}`, children: [mounted && ((0, jsx_runtime_1.jsx)(react_syntax_highlighter_1.default, { className: 'flex-grow !p-4 !bg-transparent', language: language, style: syntaxStyle || hljs_1.atomOneDark, showLineNumbers: numbers, children: body })), !mounted && ((0, jsx_runtime_1.jsx)("pre", { className: 'flex-grow !p-4 !bg-transparent', style: {
                    display: 'block',
                    overflowX: 'auto',
                    padding: '0.5em',
                    color: 'rgb(171, 178, 191)',
                    background: 'rgb(40, 44, 52)',
                }, children: (0, jsx_runtime_1.jsx)("code", { style: { whiteSpace: 'pre' }, children: body }) })), copy && ((0, jsx_runtime_1.jsxs)("div", { className: 'text-sm p-4 text-gray-400 cursor-pointer whitespace-nowrap', onClick: copy && handleCopy, children: [(0, jsx_runtime_1.jsx)("i", { className: 'fas fa-copy' }), " ", _('Copy')] }))] }));
}
