"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Tgroup = exports.Trow = exports.Tcol = exports.Tfoot = exports.Thead = void 0;
exports.default = Table;
exports.Table = Table;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importDefault(require("react"));
const Rule = ({ width }) => {
    return (0, jsx_runtime_1.jsx)("hr", { style: { borderWidth: 0, margin: 0, width } });
};
class TableCol extends react_1.default.Component {
    table() {
        return 'TableCol';
    }
    render() {
        const _a = this.props, { stickyBottom, stickyLeft, stickyRight, stickyTop, noWrap, rowSpan, colSpan, wrap1, wrap2, wrap3, wrap4, wrap5, className, children } = _a, attributes = __rest(_a, ["stickyBottom", "stickyLeft", "stickyRight", "stickyTop", "noWrap", "rowSpan", "colSpan", "wrap1", "wrap2", "wrap3", "wrap4", "wrap5", "className", "children"]);
        const classNames = ['frui-tbl-col'];
        if (stickyBottom || stickyLeft || stickyRight || stickyTop) {
            classNames.push('frui-tbl-sticky');
            if (stickyBottom) {
                classNames.push('frui-tbl-sticky-b', 'frui-tbl-z1');
            }
            if (stickyLeft) {
                classNames.push('frui-tbl-sticky-l', 'frui-tbl-z2');
            }
            if (stickyRight) {
                classNames.push('frui-tbl-sticky-r', 'frui-tbl-z2');
            }
            if (stickyTop) {
                classNames.push('frui-tbl-sticky-t', 'frui-tbl-z1');
            }
        }
        if (noWrap) {
            classNames.push('frui-tbl-nowrap');
        }
        const extras = {};
        if (rowSpan) {
            extras.rowSpan = rowSpan || 0;
        }
        if (colSpan) {
            extras.colSpan = colSpan || 0;
        }
        let rule = null;
        if (wrap1) {
            rule = ((0, jsx_runtime_1.jsx)(Rule, { width: "100px" }));
        }
        else if (wrap2) {
            rule = ((0, jsx_runtime_1.jsx)(Rule, { width: "200px" }));
        }
        else if (wrap3) {
            rule = ((0, jsx_runtime_1.jsx)(Rule, { width: "300px" }));
        }
        else if (wrap4) {
            rule = ((0, jsx_runtime_1.jsx)(Rule, { width: "400px" }));
        }
        else if (wrap5) {
            rule = ((0, jsx_runtime_1.jsx)(Rule, { width: "500px" }));
        }
        if (className) {
            classNames.push(className);
        }
        return ((0, jsx_runtime_1.jsxs)("td", Object.assign({ valign: "top" }, attributes, { className: classNames.join(' ') }, extras, { children: [children, rule] })));
    }
}
exports.Tcol = TableCol;
class TableFoot extends react_1.default.Component {
    table() {
        return 'TableFoot';
    }
    render() {
        const _a = this.props, { stickyBottom, stickyLeft, stickyRight, noWrap, rowSpan, colSpan, className, children } = _a, attributes = __rest(_a, ["stickyBottom", "stickyLeft", "stickyRight", "noWrap", "rowSpan", "colSpan", "className", "children"]);
        const classNames = ['frui-tbl-foot'];
        if (stickyBottom || stickyLeft || stickyRight) {
            classNames.push('frui-tbl-sticky');
            if (stickyBottom) {
                classNames.push('frui-tbl-sticky-b', 'frui-tbl-z1');
            }
            if (stickyLeft) {
                classNames.push('frui-tbl-sticky-l', 'frui-tbl-z2');
            }
            if (stickyRight) {
                classNames.push('frui-tbl-sticky-r', 'frui-tbl-z2');
            }
            if (noWrap) {
                classNames.push('frui-tbl-nowrap');
            }
        }
        const extras = {};
        if (rowSpan) {
            extras.rowSpan = rowSpan || 0;
        }
        if (colSpan) {
            extras.colSpan = colSpan || 0;
        }
        if (className) {
            classNames.push(className);
        }
        return ((0, jsx_runtime_1.jsx)("th", Object.assign({}, attributes, { className: classNames.join(' ') }, extras, { children: children })));
    }
}
exports.Tfoot = TableFoot;
class TableGroup extends react_1.default.Component {
    table() {
        return 'TableGroup';
    }
    render() {
        return this.props.children;
    }
}
exports.Tgroup = TableGroup;
class TableRow extends react_1.default.Component {
    table() {
        return 'TableRow';
    }
    render() {
        const _a = this.props, { noWrap, rowSpan, colSpan, className, children } = _a, attributes = __rest(_a, ["noWrap", "rowSpan", "colSpan", "className", "children"]);
        const classNames = ['frui-tbl-row'];
        if (noWrap) {
            classNames.push('frui-tbl-nowrap');
        }
        const extras = {};
        if (rowSpan) {
            extras.rowSpan = rowSpan || 0;
        }
        if (colSpan) {
            extras.colSpan = colSpan || 0;
        }
        if (className) {
            classNames.push(className);
        }
        return ((0, jsx_runtime_1.jsx)("tr", Object.assign({}, attributes, { className: classNames.join(' ') }, extras, { children: children })));
    }
}
exports.Trow = TableRow;
class TableHead extends react_1.default.Component {
    table() {
        return 'TableHead';
    }
    render() {
        const _a = this.props, { stickyTop, stickyLeft, stickyRight, noWrap, rowSpan, colSpan, wrap1, wrap2, wrap3, wrap4, wrap5, className, children } = _a, attributes = __rest(_a, ["stickyTop", "stickyLeft", "stickyRight", "noWrap", "rowSpan", "colSpan", "wrap1", "wrap2", "wrap3", "wrap4", "wrap5", "className", "children"]);
        const classNames = ['frui-tbl-head'];
        if (stickyLeft || stickyRight || stickyTop) {
            classNames.push('frui-tbl-sticky');
            if (stickyTop) {
                classNames.push('frui-tbl-sticky-t');
                if (stickyLeft && stickyRight) {
                    classNames.push('frui-tbl-z4');
                }
                else if (stickyLeft || stickyRight) {
                    classNames.push('frui-tbl-z3');
                }
                else {
                    classNames.push('frui-tbl-z1');
                }
            }
            if (stickyLeft) {
                classNames.push('frui-tbl-sticky-l', 'frui-tbl-z1');
            }
            if (stickyRight) {
                classNames.push('frui-tbl-sticky-r', 'frui-tbl-z1');
            }
        }
        if (noWrap) {
            classNames.push('frui-tbl-nowrap');
        }
        const extras = {};
        if (rowSpan) {
            extras.rowSpan = rowSpan || 0;
        }
        if (colSpan) {
            extras.colSpan = colSpan || 0;
        }
        let rule = null;
        if (wrap1) {
            rule = ((0, jsx_runtime_1.jsx)(Rule, { width: "100px" }));
        }
        else if (wrap2) {
            rule = ((0, jsx_runtime_1.jsx)(Rule, { width: "200px" }));
        }
        else if (wrap3) {
            rule = ((0, jsx_runtime_1.jsx)(Rule, { width: "300px" }));
        }
        else if (wrap4) {
            rule = ((0, jsx_runtime_1.jsx)(Rule, { width: "400px" }));
        }
        else if (wrap5) {
            rule = ((0, jsx_runtime_1.jsx)(Rule, { width: "500px" }));
        }
        if (className) {
            classNames.push(className);
        }
        return ((0, jsx_runtime_1.jsxs)("th", Object.assign({}, attributes, { className: classNames.join(' ') }, extras, { children: [children, rule] })));
    }
}
exports.Thead = TableHead;
const getHead = function (children) {
    var _a, _b;
    const head = [];
    if (Array.isArray(children)) {
        for (const child of children) {
            if (!child) {
                continue;
            }
            if (Array.isArray(child)) {
                head.push.apply(head, getHead(child));
            }
            else if (typeof child === 'object' && child.props && 'thead' in child.props) {
                head.push(child);
            }
            else if (typeof ((_b = (_a = child === null || child === void 0 ? void 0 : child.type) === null || _a === void 0 ? void 0 : _a.prototype) === null || _b === void 0 ? void 0 : _b.table) === 'function'
                && child.type.prototype.table() === 'TableHead') {
                head.push(child);
            }
        }
    }
    return head;
};
const getFoot = function (children) {
    var _a, _b;
    const foot = [];
    if (Array.isArray(children)) {
        for (const child of children) {
            if (Array.isArray(child)) {
                foot.push.apply(foot, getFoot(child));
            }
            else if (typeof child === 'object' && child.props && 'tfoot' in child.props) {
                foot.push(child);
            }
            else if (typeof ((_b = (_a = child === null || child === void 0 ? void 0 : child.type) === null || _a === void 0 ? void 0 : _a.prototype) === null || _b === void 0 ? void 0 : _b.table) === 'function'
                && child.type.prototype.table() === 'TableFoot') {
                foot.push(child);
            }
        }
    }
    return foot;
};
const getBody = function (children) {
    var _a, _b, _c, _d;
    const body = [];
    if (Array.isArray(children)) {
        for (const child of children) {
            if (Array.isArray(child)) {
                body.push.apply(body, getBody(child));
            }
            else if (typeof child === 'object' && child.props && 'tbody' in child.props) {
                body.push(child);
            }
            else if (typeof ((_b = (_a = child === null || child === void 0 ? void 0 : child.type) === null || _a === void 0 ? void 0 : _a.prototype) === null || _b === void 0 ? void 0 : _b.table) === 'function'
                && child.type.prototype.table() === 'TableGroup') {
                const children = child.props.children || [];
                if (Array.isArray(children) && children.length > 0) {
                    body.push(...children);
                }
            }
            else if (typeof ((_d = (_c = child === null || child === void 0 ? void 0 : child.type) === null || _c === void 0 ? void 0 : _c.prototype) === null || _d === void 0 ? void 0 : _d.table) === 'function'
                && child.type.prototype.table() === 'TableRow') {
                body.push(child);
            }
        }
    }
    return body;
};
function Table(props) {
    let children = props.children || [];
    if (!Array.isArray(children)) {
        children = [children];
    }
    const head = getHead(children);
    const body = getBody(children);
    const foot = getFoot(children);
    const classNames = ['frui-tbl-overflow'];
    if (props.className) {
        classNames.push(props.className);
    }
    return ((0, jsx_runtime_1.jsx)("div", { className: classNames.join(' '), style: props.style, children: (0, jsx_runtime_1.jsxs)("table", { className: "frui-tbl", children: [head && (0, jsx_runtime_1.jsx)("thead", { children: (0, jsx_runtime_1.jsx)("tr", { children: head }) }), body && (0, jsx_runtime_1.jsx)("tbody", { children: body }), foot && (0, jsx_runtime_1.jsx)("tfoot", { children: (0, jsx_runtime_1.jsx)("tr", { children: foot }) })] }) }));
}
;
