"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTextlists = useTextlists;
exports.TextlistFields = TextlistFields;
exports.default = Textlist;
const jsx_runtime_1 = require("react/jsx-runtime");
const Input_js_1 = __importDefault(require("./Input.js"));
const Button_js_1 = __importDefault(require("../form/Button.js"));
const Fieldset_js_1 = __importDefault(require("../form/Fieldset.js"));
function useTextlists(config) {
    const { values, index, set } = config;
    const handlers = {
        update: (value) => {
            const newValues = [...(values || [])];
            newValues[index] = value;
            set(newValues);
        },
        remove: () => {
            const newValues = [...(values || [])];
            newValues[index] = undefined;
            set(newValues);
        }
    };
    return { handlers };
}
function TextlistFields(props) {
    const { name, config, values, index, error, set } = props;
    const placeholder = config === null || config === void 0 ? void 0 : config.placeholder;
    const { handlers } = useTextlists({ values, index, set });
    const value = values ? values[index] : undefined;
    return ((0, jsx_runtime_1.jsxs)("div", { className: "frui-field-textlist-row", children: [(0, jsx_runtime_1.jsx)(Input_js_1.default, { className: "frui-field-textlist-input", placeholder: placeholder, defaultValue: values ? values[index] : undefined, onUpdate: handlers.update, error: error, required: true }), (0, jsx_runtime_1.jsx)(Button_js_1.default, { outline: true, error: true, onClick: handlers.remove, className: "frui-field-textlist-remove", children: "\u00D7" }), typeof value === 'string' && ((0, jsx_runtime_1.jsx)("input", { type: "hidden", name: name, value: String(value) }))] }));
}
;
const Fieldset = (0, Fieldset_js_1.default)(TextlistFields);
function Textlist(props) {
    const { placeholder } = props, attributes = __rest(props, ["placeholder"]);
    const config = { placeholder };
    return ((0, jsx_runtime_1.jsx)(Fieldset, Object.assign({}, attributes, { config: config, emptyValue: "" })));
}
;
