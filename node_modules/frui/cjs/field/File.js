"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFile = useFile;
exports.default = File;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Input_js_1 = require("./Input.js");
const Input_js_2 = __importDefault(require("./Input.js"));
function useFile(config) {
    const { defaultValue, onChange, onUpdate, onUpload } = config;
    const [uploading, setUploading] = (0, react_1.useState)(false);
    const [url, setURL] = (0, react_1.useState)(defaultValue);
    (0, react_1.useEffect)(() => {
        url && url.length > 0 && onUpdate && onUpdate(url);
    }, [url]);
    const handlers = {
        change: (e) => {
            var _a;
            if (onUpload && ((_a = e.target.files) === null || _a === void 0 ? void 0 : _a.length)) {
                setUploading(true);
                onUpload(e.target.files[0], url => {
                    setURL(url);
                    setUploading(false);
                });
            }
            onChange && onChange(e);
        },
        reset: () => {
            setUploading(false);
            setURL(undefined);
        }
    };
    (0, Input_js_1.useInput)({ onChange: handlers.change, onUpdate });
    return { uploading, url, handlers };
}
;
function File(props) {
    const { uploading: locale = 'Uploading...', name, value, defaultValue, error, style, className, onChange, onUpdate, onUpload } = props, attributes = __rest(props, ["uploading", "name", "value", "defaultValue", "error", "style", "className", "onChange", "onUpdate", "onUpload"]);
    const { uploading, url, handlers } = useFile({
        defaultValue: defaultValue || value,
        onChange,
        onUpdate,
        onUpload
    });
    const classNames = ['frui-field-file'];
    if (className) {
        classNames.push(className);
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: classNames.join(' '), style: style, children: [!url && !uploading && ((0, jsx_runtime_1.jsx)(Input_js_2.default, Object.assign({}, attributes, { type: "file", error: error, className: "frui-field-file-control", onChange: handlers.change }))), !url && uploading && ((0, jsx_runtime_1.jsx)("div", { className: "frui-field-file-file", children: (0, jsx_runtime_1.jsx)("span", { className: "frui-field-file-link", children: locale }) })), url && ((0, jsx_runtime_1.jsxs)("div", { className: "frui-field-file-file", children: [(0, jsx_runtime_1.jsx)("a", { className: "frui-field-file-link", href: url, target: "_blank", rel: "noreferrer", children: url }), (0, jsx_runtime_1.jsx)("div", { className: "frui-field-file-reset", onClick: () => handlers.reset(), children: "\u00D7" }), (0, jsx_runtime_1.jsx)("input", { type: "hidden", name: name, value: url })] }))] }));
}
