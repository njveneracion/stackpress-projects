"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCountry = useCountry;
exports.default = Country;
const jsx_runtime_1 = require("react/jsx-runtime");
const Select_js_1 = __importDefault(require("./Select.js"));
const countries_js_1 = __importDefault(require("../data/countries.js"));
function useCountry(config) {
    const { value, defaultValue, map } = config;
    const options = countries_js_1.default.map(map);
    const selected = typeof value === 'string'
        ? options.filter(option => option.value === value)[0]
        : undefined;
    const selectedDefault = typeof defaultValue === 'string'
        ? options.filter(option => option.value === defaultValue)[0]
        : undefined;
    return { selected, selectedDefault, options };
}
;
function Country(props) {
    const { value, defaultValue, placeholder = 'Choose a Country' } = props, attributes = __rest(props, ["value", "defaultValue", "placeholder"]);
    const { selected, selectedDefault, options } = useCountry({
        value,
        defaultValue,
        map: country => ({
            label: ((0, jsx_runtime_1.jsxs)(jsx_runtime_1.Fragment, { children: [(0, jsx_runtime_1.jsx)("span", { className: "text-lg", children: country.flag }), (0, jsx_runtime_1.jsx)("span", { className: "frui-field-select-label", children: country.name })] })),
            value: country.iso3,
            keyword: (keyword) => country.iso3.toLowerCase().indexOf(keyword) >= 0
                || country.name.toLowerCase().indexOf(keyword) >= 0
                || country.iso3.toLowerCase().indexOf(keyword) >= 0
        })
    });
    return ((0, jsx_runtime_1.jsx)(Select_js_1.default, Object.assign({}, attributes, { placeholder: placeholder, value: selected, defaultValue: selectedDefault, options: options, searchable: true })));
}
;
