import type { SVGProps, ChangeEvent, MouseEvent, ReactNode, CSSProperties } from 'react';
import React from 'react';
export type RatingConfig = {
    name?: string;
    value?: number | null;
    defaultValue?: number | null;
    onChange?: (event: ChangeEvent<HTMLInputElement>, value: number | null) => void;
    onChangeActive?: (event: MouseEvent, value: number | null) => void;
    readOnly?: boolean;
    disabled?: boolean;
};
export type RatingProps = {
    name?: string;
    value?: number | null;
    defaultValue?: number | null;
    max?: number;
    onChange?: (event: ChangeEvent<HTMLInputElement>, value: number | null) => void;
    onChangeActive?: (event: MouseEvent, value: number | null) => void;
    readOnly?: boolean;
    disabled?: boolean;
    size?: 'small' | 'medium' | 'large';
    icon?: ReactNode;
    emptyIcon?: ReactNode;
    getLabelText?: (value: number) => string;
    highlightSelectedOnly?: boolean;
    className?: string;
    style?: CSSProperties;
};
export declare const defaultGetLabelText: (value: number) => string;
export declare function useRating(config: RatingConfig): {
    name: string;
    value: number | null;
    displayValue: number | null;
    hoverValue: number | null;
    setHoverValue: React.Dispatch<React.SetStateAction<number | null>>;
    handlers: {
        radioChange: (event: ChangeEvent<HTMLInputElement>) => void;
        mouseEnter: (event: MouseEvent, indexValue: number) => void;
        mouseLeave: (event: MouseEvent) => void;
    };
    isControlled: boolean;
};
export declare function Star({ style, ...props }: SVGProps<SVGSVGElement>): import("react/jsx-runtime").JSX.Element;
export default function Rating(props: RatingProps): import("react/jsx-runtime").JSX.Element;
