"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useAutocomplete = useAutocomplete;
exports.AutocompleteDropdown = AutocompleteDropdown;
exports.default = Autocomplete;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Input_js_1 = __importDefault(require("./Input.js"));
function useAutocomplete(config) {
    const { options: defaultOptions, defaultValue, onSelected, onQuery, onDropdown, onChange, onUpdate } = config;
    const [value, setValue] = (0, react_1.useState)(defaultValue || '');
    const [options, setOptions] = (0, react_1.useState)(defaultOptions || []);
    const [query, setQuery] = (0, react_1.useState)('');
    const [showing, show] = (0, react_1.useState)(false);
    const handlers = {
        search: (e) => {
            show(true);
            onDropdown && onDropdown(true);
            setTimeout(() => {
                const input = e.target;
                setQuery(input.value);
                onQuery && onQuery(input.value, setOptions);
            });
        },
        update: (e) => {
            onChange && onChange(e);
            onUpdate && onUpdate(e.target.value);
            setValue(e.target.value);
        },
        match: (option) => {
            const keyword = (query || '').toLowerCase();
            const phrase = option;
            return query.length && phrase.toLowerCase().indexOf(keyword) >= 0;
        },
        select: (option) => {
            show(false);
            onDropdown && onDropdown(false);
            onUpdate && onUpdate(option);
            setValue(option);
            if (onChange) {
                const e = { target: { value: option } };
                onChange(e);
            }
            onSelected && onSelected(option);
        },
        blur: (_e) => {
            setTimeout(() => show(false), 10);
        }
    };
    return { value, options, showing, handlers };
}
;
function AutocompleteDropdown(props) {
    const { options, show, select, match } = props;
    const style = !show ? { display: 'none' } : undefined;
    if (!options || options.filter(match).length === 0) {
        return null;
    }
    return ((0, jsx_runtime_1.jsx)("div", { className: "frui-field-autocomplete-dropdown", style: style, children: (0, jsx_runtime_1.jsx)("div", { className: "frui-field-autocomplete-options", children: options && options.filter(match).map((option, i) => ((0, jsx_runtime_1.jsx)("div", { onClick: _ => select(option), className: "frui-field-autocomplete-option", children: option }, i))) }) }));
}
;
function Autocomplete(props) {
    const { options: defaultOptions, className, style, defaultValue, value: _value, onQuery, onDropdown, onChange, onUpdate } = props, attributes = __rest(props, ["options", "className", "style", "defaultValue", "value", "onQuery", "onDropdown", "onChange", "onUpdate"]);
    const { value, options, showing, handlers } = useAutocomplete({
        defaultValue: defaultValue || _value,
        options: defaultOptions,
        onQuery,
        onDropdown,
        onChange,
        onUpdate
    });
    const classNames = ['frui-field-autocomplete'];
    if (className) {
        classNames.push(className);
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: classNames.join(' '), style: style, children: [(0, jsx_runtime_1.jsx)(Input_js_1.default, Object.assign({ onBlur: handlers.blur, onKeyDown: handlers.search, onChange: handlers.update }, attributes, { value: value })), (0, jsx_runtime_1.jsx)(AutocompleteDropdown, { options: options, show: showing, select: handlers.select, match: handlers.match })] }));
}
;
