import type { ChangeEvent, CSSProperties, ReactNode } from 'react';
import type { HTMLInputProps } from '../types.js';
import type { InputConfig } from './Input.js';
export type ChecklistProps = {
    children: ReactNode;
    name: string;
    defaultValue?: (string | number)[];
    onChange?: (selected: (string | number)[]) => void;
    onUpdate?: (value: string | number, checked: boolean) => void;
    style?: CSSProperties;
    className?: string;
    orientation?: 'row' | 'column';
    size?: number;
    error?: boolean;
    disabled?: boolean;
    color?: string;
};
export type ChecklistItemProps = Omit<HTMLInputProps, 'onChange' | 'type' | 'defaultChecked' | 'checked'> & {
    label: string;
    value: string | number;
    checked?: boolean;
    defaultChecked?: boolean;
    onChange?: (value: string | number, checked: boolean) => void;
    onUpdate?: (value: string | number, checked: boolean) => void;
    size?: number;
    error?: boolean;
    disabled?: boolean;
    color?: string;
};
export declare function useChecklistItem(config: InputConfig & {
    value: string | number;
    onUpdate?: (value: string | number, checked: boolean) => void;
}): {
    isChecked: boolean;
    handlers: {
        change: (e: ChangeEvent<HTMLInputElement>) => void;
    };
};
export declare function ChecklistItem({ label, value, checked: propChecked, defaultChecked, onChange, onUpdate, size, error, disabled, color, ...rest }: ChecklistItemProps): import("react/jsx-runtime").JSX.Element;
export default function Checklist({ children, name, defaultValue, onChange, onUpdate, style, className, orientation, size, error, disabled, color, }: ChecklistProps): import("react/jsx-runtime").JSX.Element;
