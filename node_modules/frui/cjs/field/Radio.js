"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useRadio = useRadio;
exports.default = Radio;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
function useRadio(config) {
    const { onChange, onUpdate, defaultChecked, checked } = config;
    const [isChecked, check] = (0, react_1.useState)(Boolean(defaultChecked || checked));
    const [isHovering, hover] = (0, react_1.useState)(false);
    (0, react_1.useEffect)(() => {
        if (typeof checked === 'undefined')
            return;
        if (checked !== isChecked) {
            check(checked);
        }
    }, [checked]);
    return {
        isHovering,
        isChecked,
        handlers: {
            out: (_e) => hover(false),
            over: (_e) => hover(true),
            change: (e) => {
                if (e.target.checked !== checked) {
                    check(e.target.checked);
                }
                onChange && onChange(e);
                onUpdate && onUpdate(e.target.value, e.target.checked);
            }
        }
    };
}
function Radio(props) {
    const { defaultChecked, checked, label, error, check, circle, square, rounded, blue, orange, style, className, onChange, onUpdate } = props, attributes = __rest(props, ["defaultChecked", "checked", "label", "error", "check", "circle", "square", "rounded", "blue", "orange", "style", "className", "onChange", "onUpdate"]);
    const { handlers } = useRadio({
        onChange,
        onUpdate,
        checked,
        defaultChecked
    });
    const classNames = ['frui-field-option'];
    if (rounded) {
        classNames.push('frui-field-option-rounded');
    }
    if (check) {
        classNames.push('frui-field-option-check');
    }
    else if (square) {
        classNames.push('frui-field-option-square');
    }
    else {
        classNames.push('frui-field-option-circle');
    }
    if (blue) {
        classNames.push('frui-field-option-blue');
    }
    else if (orange) {
        classNames.push('frui-field-option-orange');
    }
    else {
        classNames.push('frui-field-option-default');
    }
    if (error) {
        classNames.push('frui-tx-error');
    }
    if (className) {
        classNames.push(className);
    }
    return ((0, jsx_runtime_1.jsxs)("label", { className: classNames.join(' '), style: style, children: [(0, jsx_runtime_1.jsx)("input", Object.assign({}, attributes, { onChange: handlers.change, onMouseOut: handlers.out, onMouseOver: handlers.over, type: "radio", className: "frui-field-option-control", checked: checked, defaultChecked: defaultChecked })), (0, jsx_runtime_1.jsx)("span", { className: "frui-field-option-label", children: label })] }));
}
