"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useCodeEditor = useCodeEditor;
exports.default = CodeEditor;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const codemirror_1 = require("codemirror");
const view_1 = require("@codemirror/view");
const state_1 = require("@codemirror/state");
const Input_js_1 = __importDefault(require("./Input.js"));
const language_data_1 = require("@codemirror/language-data");
function useCodeEditor({ language, onUpdate, onChange, }) {
    const [languageExtension, setLanguageExtension] = (0, react_1.useState)(undefined);
    (0, react_1.useEffect)(() => {
        getLanguageExtension(language).then((extension) => {
            setLanguageExtension(extension);
        });
    }, [language]);
    return {
        languageExtension,
        handlers: {
            update: (value) => {
                onUpdate && onUpdate(value);
            },
            change: (event) => {
                onChange && onChange(event);
            },
        },
    };
}
function getEditorOptions(setup, numbers, extensions) {
    const options = [];
    switch (setup) {
        case 'minimal':
            options.push(codemirror_1.minimalSetup);
            break;
        case 'basic':
            options.push(codemirror_1.basicSetup);
            break;
        case 'custom':
            options.push();
            break;
        default:
            options.push();
            break;
    }
    options.push(extensions);
    if (numbers) {
        options.push((0, view_1.lineNumbers)());
    }
    return options;
}
function getLanguageExtension(language) {
    return __awaiter(this, void 0, void 0, function* () {
        const langName = language.toLowerCase();
        const lang = language_data_1.languages.find((lang) => {
            var _a;
            return lang.name.toLowerCase() === langName ||
                ((_a = lang.alias) === null || _a === void 0 ? void 0 : _a.map((a) => a.toLowerCase()).includes(langName));
        });
        if (lang) {
            yield lang.load();
            const support = lang.support;
            return support;
        }
        return undefined;
    });
}
function CodeEditor(props) {
    const { defaultValue, extensions = [], language = '', numbers = false, onUpdate, onChange, setup = 'minimal', value } = props, attributes = __rest(props, ["defaultValue", "extensions", "language", "numbers", "onUpdate", "onChange", "setup", "value"]);
    const [currentValue, setCurrentValue] = (0, react_1.useState)(value);
    const inputRef = (0, react_1.useRef)(null);
    const editorRef = (0, react_1.useRef)(null);
    const viewRef = (0, react_1.useRef)(null);
    const { languageExtension, handlers } = useCodeEditor({
        language,
        onChange,
        onUpdate,
    });
    const options = getEditorOptions(setup, numbers, extensions);
    (0, react_1.useEffect)(() => {
        var _a;
        if (editorRef.current) {
            const state = state_1.EditorState.create({
                doc: (_a = value !== null && value !== void 0 ? value : defaultValue) !== null && _a !== void 0 ? _a : '',
                extensions: [
                    options,
                    languageExtension !== null && languageExtension !== void 0 ? languageExtension : [],
                    view_1.EditorView.updateListener.of((viewUpdate) => {
                        if (viewUpdate.docChanged && viewRef.current) {
                            const newValue = viewUpdate.state.doc.toString();
                            handlers.change({
                                target: Object.assign(Object.assign({}, inputRef.current), { value: newValue }),
                            });
                            handlers.update(newValue);
                            if (value) {
                                setCurrentValue(newValue);
                            }
                            else {
                                inputRef.current.value = newValue;
                            }
                        }
                    }),
                ],
            });
            viewRef.current = new view_1.EditorView({
                state,
                parent: editorRef.current,
            });
        }
        return () => {
            if (viewRef.current) {
                viewRef.current.destroy();
            }
        };
    }, [languageExtension]);
    return ((0, jsx_runtime_1.jsxs)("div", { className: `frui-field-code-editor ${props.className || ''}`, children: [(0, jsx_runtime_1.jsx)(Input_js_1.default, Object.assign({}, attributes, { passRef: inputRef, type: 'hidden', value: currentValue, defaultValue: defaultValue })), (0, jsx_runtime_1.jsx)("div", { className: 'code-editor-container', ref: editorRef })] }));
}
