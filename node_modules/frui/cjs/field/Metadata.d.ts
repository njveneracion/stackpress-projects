import type { ExtendsType } from '../types.js';
import type { FieldsProps, FieldsetProps } from '../form/Fieldset.js';
export type MetadataType = [string, string | number | Date];
export type MetadataConfig = {
    type?: string;
    values?: (MetadataType | undefined)[];
    index: number;
    set: (values: (MetadataType | undefined)[]) => void;
};
export type MetadataProps = ExtendsType<FieldsetProps<MetadataType>, {
    type?: string;
    min?: number | string;
    max?: number | string;
    step?: number | string;
    placeholder?: string | string[];
}>;
export declare function useMetadata(config: MetadataConfig): {
    handlers: {
        update: (key: "name" | "value", input: any) => void;
        remove: () => void;
    };
    input: {
        isDate: boolean;
        isText: boolean;
        isNumber: boolean;
    };
};
export declare function MetadataFields(props: FieldsProps<MetadataType>): import("react/jsx-runtime").JSX.Element;
export default function Metadata(props: MetadataProps): import("react/jsx-runtime").JSX.Element;
