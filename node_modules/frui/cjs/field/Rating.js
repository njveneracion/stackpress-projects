"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultGetLabelText = void 0;
exports.useRating = useRating;
exports.Star = Star;
exports.default = Rating;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = __importStar(require("react"));
const defaultGetLabelText = (value) => `${value} Star${value !== 1 ? 's' : ''}`;
exports.defaultGetLabelText = defaultGetLabelText;
function useRating(config) {
    const { name: providedName, value: controlledValue, defaultValue = null, onChange, onChangeActive, readOnly = false, disabled = false } = config;
    const [uncontrolledValue, setUncontrolledValue] = (0, react_1.useState)(defaultValue);
    const [hoverValue, setHoverValue] = (0, react_1.useState)(null);
    const generatedName = (0, react_1.useId)();
    const name = providedName || generatedName;
    const isControlled = controlledValue !== undefined;
    const currentValue = isControlled ? controlledValue : uncontrolledValue;
    const displayValue = hoverValue !== null ? hoverValue : currentValue;
    const handlers = {
        radioChange: (0, react_1.useCallback)((event) => {
            if (readOnly)
                return;
            const newValue = parseInt(event.target.value, 10);
            if (!isControlled) {
                setUncontrolledValue(newValue);
            }
            onChange === null || onChange === void 0 ? void 0 : onChange(event, newValue);
        }, [isControlled, onChange, readOnly]),
        mouseEnter: (0, react_1.useCallback)((event, indexValue) => {
            if (readOnly || disabled)
                return;
            setHoverValue(indexValue);
            onChangeActive === null || onChangeActive === void 0 ? void 0 : onChangeActive(event, indexValue);
        }, [readOnly, disabled, onChangeActive]),
        mouseLeave: (0, react_1.useCallback)((event) => {
            if (readOnly || disabled)
                return;
            setHoverValue(null);
            onChangeActive === null || onChangeActive === void 0 ? void 0 : onChangeActive(event, null);
        }, [readOnly, disabled, onChangeActive])
    };
    return {
        name,
        value: currentValue,
        displayValue,
        hoverValue,
        setHoverValue,
        handlers,
        isControlled
    };
}
function Star(_a) {
    var { style } = _a, props = __rest(_a, ["style"]);
    return ((0, jsx_runtime_1.jsx)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "currentColor", height: "1em", width: "1em", style: Object.assign({ display: 'inline-block', flexShrink: 0, userSelect: 'none' }, style) }, props, { children: (0, jsx_runtime_1.jsx)("path", { d: "M12 17.27 18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" }) })));
}
;
function Rating(props) {
    const { name: providedName, value: controlledValue, defaultValue = null, max = 5, onChange, onChangeActive, readOnly = false, disabled = false, size = 'medium', icon, emptyIcon, getLabelText = exports.defaultGetLabelText, highlightSelectedOnly = false, className = '', style, } = props;
    const { name, value, handlers, displayValue, hoverValue } = useRating({
        name: providedName,
        value: controlledValue,
        defaultValue,
        onChange,
        onChangeActive,
        readOnly,
        disabled
    });
    const filledIcon = icon || (0, jsx_runtime_1.jsx)(Star, {});
    const unfilledIcon = emptyIcon || (0, jsx_runtime_1.jsx)(Star, { style: { opacity: 0.4 } });
    const classNames = ['frui-rating-root'];
    if (size === 'small') {
        classNames.push(`frui-rating-small`);
    }
    else if (size === 'large') {
        classNames.push(`frui-rating-large`);
    }
    else {
        classNames.push(`frui-rating-medium`);
    }
    if (disabled) {
        classNames.push('frui-rating-disabled');
    }
    if (readOnly) {
        classNames.push('frui-rating-readonly');
    }
    classNames.push(className);
    return ((0, jsx_runtime_1.jsx)("span", { className: classNames.join(' '), style: style, onMouseLeave: handlers.mouseLeave, children: Array.from({ length: max }, (_, index) => {
            const itemValue = index + 1;
            const isChecked = value === itemValue;
            let isFilled;
            if (highlightSelectedOnly) {
                isFilled = displayValue === itemValue;
            }
            else {
                isFilled = displayValue !== null && itemValue <= displayValue;
            }
            const iconNode = isFilled ? filledIcon : unfilledIcon;
            const classNames = ['frui-rating-icon'];
            if (isFilled) {
                classNames.push('frui-rating-icon-filled');
            }
            else {
                classNames.push('frui-rating-icon-empty');
            }
            if (hoverValue === itemValue) {
                classNames.push('frui-rating-icon-hover');
            }
            if (value === itemValue) {
                classNames.push('frui-rating-icon-active');
            }
            return ((0, jsx_runtime_1.jsx)(react_1.default.Fragment, { children: (0, jsx_runtime_1.jsxs)("label", { className: "frui-rating-icon-label", onMouseEnter: (e) => handlers.mouseEnter(e, itemValue), "aria-label": getLabelText(itemValue), children: [(0, jsx_runtime_1.jsx)("input", { className: "frui-rating-visually-hidden", type: "radio", name: name, value: itemValue, checked: isChecked, onChange: handlers.radioChange, disabled: disabled, readOnly: readOnly }), (0, jsx_runtime_1.jsx)("span", { className: classNames.join(' '), children: iconNode })] }) }, itemValue));
        }) }));
}
