"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useMetadata = useMetadata;
exports.MetadataFields = MetadataFields;
exports.default = Metadata;
const jsx_runtime_1 = require("react/jsx-runtime");
const Button_js_1 = __importDefault(require("../form/Button.js"));
const Fieldset_js_1 = __importDefault(require("../form/Fieldset.js"));
const Input_js_1 = __importDefault(require("./Input.js"));
const Number_js_1 = __importDefault(require("./Number.js"));
const Date_js_1 = __importDefault(require("./Date.js"));
const Datetime_js_1 = __importDefault(require("./Datetime.js"));
const Time_js_1 = __importDefault(require("./Time.js"));
function useMetadata(config) {
    const { type, values, index, set } = config;
    const isNumber = type === 'number';
    const isDate = ['date', 'time', 'datetime'].includes(type || '');
    const isText = !isDate && !isNumber;
    const handlers = {
        update: (key, input) => {
            const newValues = [...(values || [])];
            const entry = ['', ''];
            const current = newValues[index];
            entry[0] = current ? current[0] : '';
            entry[1] = current ? current[1] : '';
            if (key === 'name') {
                entry[0] = input;
            }
            else {
                entry[1] = input;
            }
            newValues[index] = entry;
            set(newValues);
        },
        remove: () => {
            const newValues = [...(values || [])];
            newValues[index] = undefined;
            set(newValues);
        }
    };
    return { handlers, input: { isDate, isText, isNumber } };
}
function MetadataFields(props) {
    const { name, config = {}, values, index, error, set } = props;
    const { type, min, max, step, placeholder } = config;
    const { handlers, input } = useMetadata({
        type,
        values,
        index,
        set
    });
    const value = values ? values[index] : undefined;
    return ((0, jsx_runtime_1.jsxs)("div", { className: "frui-field-metadata-row", children: [(0, jsx_runtime_1.jsx)(Input_js_1.default, { className: "frui-field-metadata-name", placeholder: Array.isArray(placeholder) ? placeholder[0] : undefined, defaultValue: Array.isArray(value) ? value[0] : undefined, onUpdate: name => handlers.update('name', name), error: error, required: true }), input.isText && ((0, jsx_runtime_1.jsx)(Input_js_1.default, { type: type, className: "frui-field-metadata-value", placeholder: Array.isArray(placeholder) ? placeholder[1] : undefined, defaultValue: Array.isArray(value) ? value[1] : undefined, onUpdate: value => handlers.update('value', value), error: error, required: true })), input.isNumber && ((0, jsx_runtime_1.jsx)(Number_js_1.default, { min: min, max: max, step: step, className: "frui-field-metadata-value", placeholder: Array.isArray(placeholder) ? placeholder[1] : undefined, defaultValue: Array.isArray(value) ? value[1] : undefined, onUpdate: (value) => handlers.update('value', value), error: error, required: true })), input.isDate && type === 'date' && ((0, jsx_runtime_1.jsx)(Date_js_1.default, { type: "date", className: "frui-field-metadata-value", placeholder: Array.isArray(placeholder) ? placeholder[1] : undefined, defaultValue: Array.isArray(value) ? value[1] : undefined, onUpdate: value => handlers.update('value', value), error: error, required: true })), input.isDate && type === 'time' && ((0, jsx_runtime_1.jsx)(Time_js_1.default, { type: "time", className: "frui-field-metadata-value", placeholder: Array.isArray(placeholder) ? placeholder[1] : undefined, defaultValue: Array.isArray(value) ? value[1] : undefined, onUpdate: (value) => handlers.update('value', value), error: error, required: true })), input.isDate && (type === 'datetime' || type === 'datetime-local') && ((0, jsx_runtime_1.jsx)(Datetime_js_1.default, { type: "datetime-local", className: "frui-field-metadata-value", placeholder: Array.isArray(placeholder) ? placeholder[1] : undefined, defaultValue: Array.isArray(value) ? value[1] : undefined, onUpdate: (value) => handlers.update('value', value), error: error, required: true })), (0, jsx_runtime_1.jsx)(Button_js_1.default, { outline: true, error: true, onClick: handlers.remove, className: "frui-field-metadata-remove", children: "\u00D7" }), value && value[0].length > 0 && ((0, jsx_runtime_1.jsx)("input", { type: "hidden", name: `${name}[${value[0]}]`, value: value[1] instanceof Date_js_1.default
                    ? value[1].toISOString()
                    : String(value[1]) }))] }));
}
;
const Fieldset = (0, Fieldset_js_1.default)(MetadataFields);
function Metadata(props) {
    const { type, min, max, step, placeholder } = props, attributes = __rest(props, ["type", "min", "max", "step", "placeholder"]);
    const placeholders = Array.isArray(placeholder)
        ? placeholder
        : [placeholder, placeholder];
    const config = { type, min, max, step, placeholder: placeholders };
    return ((0, jsx_runtime_1.jsx)(Fieldset, Object.assign({}, attributes, { config: config, emptyValue: ['', ''] })));
}
