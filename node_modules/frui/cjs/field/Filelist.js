"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useFilelist = useFilelist;
exports.default = Filelist;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
const Input_js_1 = require("./Input.js");
const Input_js_2 = __importDefault(require("./Input.js"));
function useFilelist(config) {
    const { defaultValue, onChange, onUpdate, onUpload } = config;
    const [queued, setQueue] = (0, react_1.useState)(0);
    const [uploaded, setUploaded] = (0, react_1.useState)(defaultValue || []);
    (0, react_1.useEffect)(() => {
        onUpdate && onUpdate(uploaded);
    }, [uploaded]);
    const handlers = {
        change: (e) => {
            if (onUpload && e.target.files) {
                const pending = Array.from(e.target.files);
                const queue = queued + pending.length;
                setQueue(queue);
                const values = uploaded;
                onUpload(pending, urls => {
                    const updated = queue - urls.length;
                    values.push(...urls);
                    setQueue(updated > 0 ? updated : 0);
                    setUploaded([...values]);
                });
            }
            onChange && onChange(e);
        },
        remove: (index) => {
            setQueue(queued ? queued - 1 : 0);
            const keepUploaded = [...uploaded];
            keepUploaded.splice(index, 1);
            setUploaded(keepUploaded);
        },
        reset: () => {
            setQueue(0);
            setUploaded([]);
        }
    };
    (0, Input_js_1.useInput)({ onChange: handlers.change, onUpdate });
    return { queued, uploaded, handlers };
}
;
function Filelist(props) {
    const { uploading = 'Uploading...', name, defaultValue, value, error, style, className, onChange, onUpdate, onUpload } = props, attributes = __rest(props, ["uploading", "name", "defaultValue", "value", "error", "style", "className", "onChange", "onUpdate", "onUpload"]);
    const { queued, uploaded, handlers } = useFilelist({
        defaultValue: value || defaultValue,
        onChange,
        onUpdate,
        onUpload
    });
    const classNames = ['frui-field-filelist'];
    if (className) {
        classNames.push(className);
    }
    return ((0, jsx_runtime_1.jsxs)("div", { className: classNames.join(' '), style: style, children: [(0, jsx_runtime_1.jsx)(Input_js_2.default, Object.assign({}, attributes, { multiple: true, type: "file", error: error, className: "frui-field-filelist-control", onChange: handlers.change })), uploaded.length > 0 && uploaded.map((url, i) => ((0, jsx_runtime_1.jsxs)("div", { className: "frui-field-filelist-file", children: [(0, jsx_runtime_1.jsx)("a", { className: "frui-field-filelist-link", href: url, target: "_blank", rel: "noreferrer", children: url }), (0, jsx_runtime_1.jsx)("div", { className: "frui-field-filelist-remove", onClick: () => handlers.remove(i), children: "\u00D7" }), (0, jsx_runtime_1.jsx)("input", { type: "hidden", name: name, value: url })] }, i))), queued > 0 && ((0, jsx_runtime_1.jsx)("div", { className: "frui-field-filelist-file", children: (0, jsx_runtime_1.jsx)("span", { className: "frui-field-filelist-link", children: uploading }) }))] }));
}
