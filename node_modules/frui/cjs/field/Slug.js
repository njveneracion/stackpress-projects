"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.slugify = slugify;
exports.camelfy = camelfy;
exports.useSlug = useSlug;
exports.default = Slug;
const jsx_runtime_1 = require("react/jsx-runtime");
const Input_js_1 = __importDefault(require("./Input.js"));
function slugify(str, noDash = false, noLine = false) {
    return str.trim()
        .replace(/[^a-zA-Z0-9\-_]/g, noLine ? '-' : '_')
        .replace(/-/g, noLine ? '-' : '_')
        .replace(/_/g, noDash ? '_' : '-')
        .replace(/-{2,}/g, '-')
        .replace(/_{2,}/g, '_')
        .replace(/^-+|-+$/g, '')
        .replace(/^_+|_+$/g, '')
        .toLowerCase();
}
;
function camelfy(str) {
    return str.trim()
        .replace(/[^a-zA-Z0-9]/g, '_')
        .replace(/_{2,}/g, '_')
        .replace(/^_+|_+$/g, '')
        .replace(/([-_][a-z0-9])/ig, ($1) => {
        return $1.toUpperCase()
            .replace('-', '')
            .replace('_', '');
    });
}
function useSlug(config) {
    const value = config.value
        ? (config.camel
            ? camelfy(String(config.value))
            : slugify(String(config.value), !config.dash, !config.line)) : undefined;
    const defaultValue = config.defaultValue
        ? (config.camel
            ? camelfy(String(config.defaultValue))
            : slugify(String(config.defaultValue), !config.dash, !config.line)) : undefined;
    const change = (e) => {
        e.target.value = config.camel
            ? camelfy(e.target.value)
            : slugify(e.target.value, !config.dash, !config.line);
        config.onChange && config.onChange(e);
    };
    return { value, defaultValue, change };
}
;
function Slug(props) {
    const { dash, line, camel, value: rawValue, defaultValue: rawDefaultValue, onChange } = props, attributes = __rest(props, ["dash", "line", "camel", "value", "defaultValue", "onChange"]);
    const { value, defaultValue, change } = useSlug({
        dash,
        line,
        camel,
        value: rawValue,
        defaultValue: rawDefaultValue,
        onChange
    });
    return ((0, jsx_runtime_1.jsx)(Input_js_1.default, Object.assign({}, attributes, { value: value, defaultValue: defaultValue, onChange: change })));
}
;
