"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTaglist = useTaglist;
exports.default = Taglist;
const jsx_runtime_1 = require("react/jsx-runtime");
const react_1 = require("react");
function useTaglist(config) {
    const { value, defaultValue, onChange, onUpdate } = config;
    const [input, setInput] = (0, react_1.useState)('');
    const [isKeyReleased, setIsKeyReleased] = (0, react_1.useState)(false);
    const [tags, setTags] = (0, react_1.useState)(defaultValue || []);
    (0, react_1.useEffect)(() => {
        if (Array.isArray(value)
            && JSON.stringify(value) === JSON.stringify(tags))
            return;
        onUpdate && onUpdate(tags);
    }, [tags]);
    (0, react_1.useEffect)(() => {
        if (!Array.isArray(value))
            return;
        setTags(value);
    }, [value]);
    return {
        input,
        tags,
        handlers: {
            change: (e) => {
                const { value } = e.target;
                setInput(value);
                onChange && onChange(e);
            },
            remove: (index) => {
                setTags(prevState => prevState.filter((_tag, i) => i !== index));
            },
            edit: (e) => {
                const { key } = e;
                const trimmedInput = input.trim();
                if ((key === 'Enter' || key === ',') && trimmedInput.length && !tags.includes(trimmedInput)) {
                    e.preventDefault();
                    setTags(prevState => [...prevState, trimmedInput]);
                    setInput('');
                }
                if (key === 'Backspace' && !input.length && tags.length && isKeyReleased) {
                    const tagsCopy = [...tags];
                    const poppedTag = tagsCopy.pop();
                    e.preventDefault();
                    setTags(tagsCopy);
                    setInput(poppedTag || '');
                }
                setIsKeyReleased(false);
            },
            save: () => {
                setIsKeyReleased(true);
            }
        }
    };
}
;
function Taglist(props) {
    const { name, value, defaultValue, color, info, warning, success, danger, muted, error, className, style, onChange, onUpdate } = props, attributes = __rest(props, ["name", "value", "defaultValue", "color", "info", "warning", "success", "danger", "muted", "error", "className", "style", "onChange", "onUpdate"]);
    const { input, tags, handlers } = useTaglist({
        onChange,
        onUpdate,
        value: Array.isArray(value)
            ? value
            : typeof value === 'string'
                ? value.split(',')
                : undefined,
        defaultValue: Array.isArray(defaultValue)
            ? defaultValue
            : typeof defaultValue === 'string'
                ? defaultValue.split(',')
                : undefined,
    });
    const classNames = ['frui-field-taglist'];
    if (error) {
        classNames.push('frui-tx-error');
    }
    if (className) {
        classNames.push(className);
    }
    const tagClasses = ['frui-field-taglist-tag'];
    const tagStyle = {};
    if (color) {
        tagStyle.backgroundColor = color;
    }
    else if (info) {
        tagClasses.push('frui-bg-info');
    }
    else if (warning) {
        tagClasses.push('frui-bg-warning');
    }
    else if (success) {
        tagClasses.push('frui-bg-success');
    }
    else if (error) {
        tagClasses.push('frui-bg-error');
    }
    else if (muted) {
        tagClasses.push('frui-bg-muted');
    }
    else {
        tagClasses.push('frui-bg-warning');
    }
    return ((0, jsx_runtime_1.jsxs)("div", Object.assign({}, attributes, { className: classNames.join(' '), children: [tags.map((tag, i) => ((0, jsx_runtime_1.jsxs)("div", { className: tagClasses.join(' '), style: tagStyle, children: [tag, (0, jsx_runtime_1.jsx)("button", { className: "frui-field-taglist-remove", onClick: () => handlers.remove(i), children: "\u00D7" }), (0, jsx_runtime_1.jsx)("input", { type: "hidden", name: name, value: tag })] }, i))), (0, jsx_runtime_1.jsx)("input", { className: "frui-field-taglist-input", value: input, onKeyDown: handlers.edit, onKeyUp: handlers.save, onChange: handlers.change })] })));
}
