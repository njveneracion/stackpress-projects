import type { ExtendsType } from '../types.js';
import type { ButtonProps } from './Button.js';
import React from 'react';
export type FieldsetConfig<ValueType = any> = {
    value?: ValueType[];
    defaultValue?: ValueType[];
    emptyValue?: ValueType;
    onChange?: (values: ValueType[]) => void;
    onUpdate?: (values: ValueType[]) => void;
};
export type FieldsetProps<ValueType = any> = ExtendsType<ButtonProps, {
    add?: string;
    limit?: number;
    config?: Record<string, any>;
    value?: ValueType[];
    defaultValue?: ValueType[];
    emptyValue?: ValueType;
    error?: boolean;
    onChange?: (values: ValueType[]) => void;
    onUpdate?: (values: ValueType[]) => void;
}>;
export type FieldsProps<ValueType = any> = {
    name?: string;
    limit?: number;
    config?: Record<string, any>;
    values?: (ValueType | undefined)[];
    index: number;
    error?: boolean;
    set: (values: (ValueType | undefined)[]) => void;
};
export declare function useFieldset<ValueType = any>(config: FieldsetConfig<ValueType>): {
    values: (ValueType | undefined)[];
    handlers: {
        set: (newValues: (ValueType | undefined)[]) => void;
        add: () => void;
    };
};
export default function make<ValueType = any>(Fields: React.FC<FieldsProps<ValueType>>): (props: FieldsetProps<ValueType>) => import("react/jsx-runtime").JSX.Element;
