import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import Button from './Button.js';
export function useFieldset(config) {
    const { value, defaultValue, emptyValue, onChange, onUpdate } = config;
    const safeValues = Array.isArray(defaultValue) ? [...defaultValue] : [];
    const [values, setValues] = useState(safeValues);
    const handlers = {
        set: (newValues) => {
            const serial = JSON.stringify(newValues);
            if (serial !== JSON.stringify(values)) {
                const final = JSON
                    .parse(serial)
                    .map((value) => value === null ? undefined : value);
                const clean = final
                    .filter((value) => typeof value !== 'undefined');
                setValues(final);
                onChange && onChange(clean);
                onUpdate && onUpdate(clean);
            }
        },
        add: () => handlers.set(values.concat([emptyValue]))
    };
    useEffect(() => {
        if (!Array.isArray(value))
            return;
        handlers.set([...value]);
    }, [value]);
    return { values, handlers };
}
;
export default function make(Fields) {
    return function Fieldset(props) {
        const { name, add, config, value, limit = 0, defaultValue, emptyValue, error, onChange, onUpdate, ...attributes } = props;
        const { values, handlers } = useFieldset({
            value,
            defaultValue,
            emptyValue,
            onChange,
            onUpdate
        });
        const size = values.filter(value => typeof value !== 'undefined').length;
        return (_jsxs(_Fragment, { children: [values.map((value, index) => (typeof value !== 'undefined' ? (_jsx(Fields, { name: name, config: config, index: index, values: values, limit: limit, error: error, set: handlers.set }, index)) : null)), (!limit || size < limit) && (_jsxs(Button, { muted: true, ...attributes, onClick: handlers.add, type: "button", children: [_jsx("span", { className: "frui-fieldset-add", children: "+" }), add || 'Add'] }))] }));
    };
}
;
