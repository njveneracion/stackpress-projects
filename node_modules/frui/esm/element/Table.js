import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React from 'react';
const Rule = ({ width }) => {
    return _jsx("hr", { style: { borderWidth: 0, margin: 0, width } });
};
class TableCol extends React.Component {
    table() {
        return 'TableCol';
    }
    render() {
        const { stickyBottom, stickyLeft, stickyRight, stickyTop, noWrap, rowSpan, colSpan, wrap1, wrap2, wrap3, wrap4, wrap5, className, children, ...attributes } = this.props;
        const classNames = ['frui-tbl-col'];
        if (stickyBottom || stickyLeft || stickyRight || stickyTop) {
            classNames.push('frui-tbl-sticky');
            if (stickyBottom) {
                classNames.push('frui-tbl-sticky-b', 'frui-tbl-z1');
            }
            if (stickyLeft) {
                classNames.push('frui-tbl-sticky-l', 'frui-tbl-z2');
            }
            if (stickyRight) {
                classNames.push('frui-tbl-sticky-r', 'frui-tbl-z2');
            }
            if (stickyTop) {
                classNames.push('frui-tbl-sticky-t', 'frui-tbl-z1');
            }
        }
        if (noWrap) {
            classNames.push('frui-tbl-nowrap');
        }
        const extras = {};
        if (rowSpan) {
            extras.rowSpan = rowSpan || 0;
        }
        if (colSpan) {
            extras.colSpan = colSpan || 0;
        }
        let rule = null;
        if (wrap1) {
            rule = (_jsx(Rule, { width: "100px" }));
        }
        else if (wrap2) {
            rule = (_jsx(Rule, { width: "200px" }));
        }
        else if (wrap3) {
            rule = (_jsx(Rule, { width: "300px" }));
        }
        else if (wrap4) {
            rule = (_jsx(Rule, { width: "400px" }));
        }
        else if (wrap5) {
            rule = (_jsx(Rule, { width: "500px" }));
        }
        if (className) {
            classNames.push(className);
        }
        return (_jsxs("td", { valign: "top", ...attributes, className: classNames.join(' '), ...extras, children: [children, rule] }));
    }
}
class TableFoot extends React.Component {
    table() {
        return 'TableFoot';
    }
    render() {
        const { stickyBottom, stickyLeft, stickyRight, noWrap, rowSpan, colSpan, className, children, ...attributes } = this.props;
        const classNames = ['frui-tbl-foot'];
        if (stickyBottom || stickyLeft || stickyRight) {
            classNames.push('frui-tbl-sticky');
            if (stickyBottom) {
                classNames.push('frui-tbl-sticky-b', 'frui-tbl-z1');
            }
            if (stickyLeft) {
                classNames.push('frui-tbl-sticky-l', 'frui-tbl-z2');
            }
            if (stickyRight) {
                classNames.push('frui-tbl-sticky-r', 'frui-tbl-z2');
            }
            if (noWrap) {
                classNames.push('frui-tbl-nowrap');
            }
        }
        const extras = {};
        if (rowSpan) {
            extras.rowSpan = rowSpan || 0;
        }
        if (colSpan) {
            extras.colSpan = colSpan || 0;
        }
        if (className) {
            classNames.push(className);
        }
        return (_jsx("th", { ...attributes, className: classNames.join(' '), ...extras, children: children }));
    }
}
class TableGroup extends React.Component {
    table() {
        return 'TableGroup';
    }
    render() {
        return this.props.children;
    }
}
class TableRow extends React.Component {
    table() {
        return 'TableRow';
    }
    render() {
        const { noWrap, rowSpan, colSpan, className, children, ...attributes } = this.props;
        const classNames = ['frui-tbl-row'];
        if (noWrap) {
            classNames.push('frui-tbl-nowrap');
        }
        const extras = {};
        if (rowSpan) {
            extras.rowSpan = rowSpan || 0;
        }
        if (colSpan) {
            extras.colSpan = colSpan || 0;
        }
        if (className) {
            classNames.push(className);
        }
        return (_jsx("tr", { ...attributes, className: classNames.join(' '), ...extras, children: children }));
    }
}
class TableHead extends React.Component {
    table() {
        return 'TableHead';
    }
    render() {
        const { stickyTop, stickyLeft, stickyRight, noWrap, rowSpan, colSpan, wrap1, wrap2, wrap3, wrap4, wrap5, className, children, ...attributes } = this.props;
        const classNames = ['frui-tbl-head'];
        if (stickyLeft || stickyRight || stickyTop) {
            classNames.push('frui-tbl-sticky');
            if (stickyTop) {
                classNames.push('frui-tbl-sticky-t');
                if (stickyLeft && stickyRight) {
                    classNames.push('frui-tbl-z4');
                }
                else if (stickyLeft || stickyRight) {
                    classNames.push('frui-tbl-z3');
                }
                else {
                    classNames.push('frui-tbl-z1');
                }
            }
            if (stickyLeft) {
                classNames.push('frui-tbl-sticky-l', 'frui-tbl-z1');
            }
            if (stickyRight) {
                classNames.push('frui-tbl-sticky-r', 'frui-tbl-z1');
            }
        }
        if (noWrap) {
            classNames.push('frui-tbl-nowrap');
        }
        const extras = {};
        if (rowSpan) {
            extras.rowSpan = rowSpan || 0;
        }
        if (colSpan) {
            extras.colSpan = colSpan || 0;
        }
        let rule = null;
        if (wrap1) {
            rule = (_jsx(Rule, { width: "100px" }));
        }
        else if (wrap2) {
            rule = (_jsx(Rule, { width: "200px" }));
        }
        else if (wrap3) {
            rule = (_jsx(Rule, { width: "300px" }));
        }
        else if (wrap4) {
            rule = (_jsx(Rule, { width: "400px" }));
        }
        else if (wrap5) {
            rule = (_jsx(Rule, { width: "500px" }));
        }
        if (className) {
            classNames.push(className);
        }
        return (_jsxs("th", { ...attributes, className: classNames.join(' '), ...extras, children: [children, rule] }));
    }
}
const getHead = function (children) {
    const head = [];
    if (Array.isArray(children)) {
        for (const child of children) {
            if (!child) {
                continue;
            }
            if (Array.isArray(child)) {
                head.push.apply(head, getHead(child));
            }
            else if (typeof child === 'object' && child.props && 'thead' in child.props) {
                head.push(child);
            }
            else if (typeof child?.type?.prototype?.table === 'function'
                && child.type.prototype.table() === 'TableHead') {
                head.push(child);
            }
        }
    }
    return head;
};
const getFoot = function (children) {
    const foot = [];
    if (Array.isArray(children)) {
        for (const child of children) {
            if (Array.isArray(child)) {
                foot.push.apply(foot, getFoot(child));
            }
            else if (typeof child === 'object' && child.props && 'tfoot' in child.props) {
                foot.push(child);
            }
            else if (typeof child?.type?.prototype?.table === 'function'
                && child.type.prototype.table() === 'TableFoot') {
                foot.push(child);
            }
        }
    }
    return foot;
};
const getBody = function (children) {
    const body = [];
    if (Array.isArray(children)) {
        for (const child of children) {
            if (Array.isArray(child)) {
                body.push.apply(body, getBody(child));
            }
            else if (typeof child === 'object' && child.props && 'tbody' in child.props) {
                body.push(child);
            }
            else if (typeof child?.type?.prototype?.table === 'function'
                && child.type.prototype.table() === 'TableGroup') {
                const children = child.props.children || [];
                if (Array.isArray(children) && children.length > 0) {
                    body.push(...children);
                }
            }
            else if (typeof child?.type?.prototype?.table === 'function'
                && child.type.prototype.table() === 'TableRow') {
                body.push(child);
            }
        }
    }
    return body;
};
export default function Table(props) {
    let children = props.children || [];
    if (!Array.isArray(children)) {
        children = [children];
    }
    const head = getHead(children);
    const body = getBody(children);
    const foot = getFoot(children);
    const classNames = ['frui-tbl-overflow'];
    if (props.className) {
        classNames.push(props.className);
    }
    return (_jsx("div", { className: classNames.join(' '), style: props.style, children: _jsxs("table", { className: "frui-tbl", children: [head && _jsx("thead", { children: _jsx("tr", { children: head }) }), body && _jsx("tbody", { children: body }), foot && _jsx("tfoot", { children: _jsx("tr", { children: foot }) })] }) }));
}
;
export { Table, TableHead as Thead, TableFoot as Tfoot, TableCol as Tcol, TableRow as Trow, TableGroup as Tgroup };
