import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from "react/jsx-runtime";
import { useLanguage } from 'r22n';
import { useEffect, useState } from 'react';
import SyntaxHighlighter from 'react-syntax-highlighter';
import { atomOneDark } from 'react-syntax-highlighter/dist/cjs/styles/hljs';
export default function Code(props) {
    const [mounted, setMounted] = useState(false);
    const { children, className, copy, onCopy, language, numbers, syntaxStyle } = props;
    const { _ } = useLanguage();
    const body = children
        .split('\n')
        .map((line) => (language === 'bash' ? `$ ${line}` : line))
        .join('\n');
    const handleCopy = () => {
        if (onCopy) {
            onCopy();
        }
        navigator.clipboard.writeText(children.toString());
    };
    useEffect(() => {
        setMounted(true);
    }, []);
    if (!language) {
        return (_jsxs(_Fragment, { children: [_jsx("span", { children: "\u00A0" }), _jsx("code", { className: 'text-sm text-t2 bg-b1 font-semibold inline-block p-0.5', children: body }), _jsx("span", { children: "\u00A0" })] }));
    }
    return (_jsxs("div", { className: `flex text-sm bg-black ${className || ''}`, children: [mounted && (_jsx(SyntaxHighlighter, { className: 'flex-grow !p-4 !bg-transparent', language: language, style: syntaxStyle || atomOneDark, showLineNumbers: numbers, children: body })), !mounted && (_jsx("pre", { className: 'flex-grow !p-4 !bg-transparent', style: {
                    display: 'block',
                    overflowX: 'auto',
                    padding: '0.5em',
                    color: 'rgb(171, 178, 191)',
                    background: 'rgb(40, 44, 52)',
                }, children: _jsx("code", { style: { whiteSpace: 'pre' }, children: body }) })), copy && (_jsxs("div", { className: 'text-sm p-4 text-gray-400 cursor-pointer whitespace-nowrap', onClick: copy && handleCopy, children: [_jsx("i", { className: 'fas fa-copy' }), " ", _('Copy')] }))] }));
}
