import type { ReactNode, KeyboardEvent, CSSProperties } from 'react';
export type SelectOption<T = any> = {
    label: ReactNode;
    value: T;
    keyword?: string | Function;
};
export type SelectConfig<T = any> = {
    value?: T;
    defaultValue?: T;
    defaultOptions?: SelectOption<T>[];
    onDropdown?: (show: boolean) => void;
    onSelected?: (value: SelectOption<T>) => void;
    onUpdate?: (value: T) => void;
    onQuery?: (query: string, update: (options: SelectOption<T>[]) => void) => void;
};
export type SelectDropdownProps<T = any> = {
    options: SelectOption<T>[];
    show: boolean;
    error?: boolean;
    searchable?: boolean;
    select: (value: SelectOption<T>) => void;
    search: (e: KeyboardEvent) => void;
    match: (option: SelectOption<T>) => void;
};
export type SelectProps<T = any> = {
    name?: string;
    value?: T;
    defaultValue?: T;
    options: SelectOption<T>[] | Record<string, T>;
    searchable?: boolean;
    placeholder?: string;
    error?: boolean;
    style?: CSSProperties;
    className?: string;
    onDropdown?: (show: boolean) => void;
    onSelected?: (value: SelectOption<T>) => void;
    onUpdate?: (value: T) => void;
    onQuery?: (query: string, update: (options: SelectOption<T>[]) => void) => void;
};
export declare function useSelect<T = any>(config: SelectConfig<T>): {
    selected: SelectOption<T> | undefined;
    options: SelectOption<T>[];
    showing: boolean;
    handlers: {
        toggle(): void;
        search(e: KeyboardEvent): void;
        match(option: SelectOption<T>): any;
        select(option: SelectOption<T>): void;
    };
};
export declare function SelectDropdown(props: SelectDropdownProps): import("react/jsx-runtime").JSX.Element;
export default function Select<T = any>(props: SelectProps): import("react/jsx-runtime").JSX.Element;
