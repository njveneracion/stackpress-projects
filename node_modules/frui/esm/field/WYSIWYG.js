import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useRef, useState } from 'react';
export function useWYSIWYG(config) {
    const { value = '', onChange, onUpdate } = config;
    const [isCodeView, setIsCodeView] = useState(false);
    const [currentValue, setCurrentValue] = useState(value);
    useEffect(() => {
        if (refs.editor.current
            && typeof value === 'string'
            && value !== refs.editor.current.innerHTML
            && !isCodeView) {
            refs.editor.current.innerHTML = value;
            setCurrentValue(value);
            if (refs.hidden.current) {
                refs.hidden.current.value = value;
            }
        }
    }, [value, isCodeView]);
    const refs = {
        editor: useRef(null),
        textarea: useRef(null),
        hidden: useRef(null),
        file: useRef(null),
        gallery: useRef(null)
    };
    const blocks = {
        listOrdered: () => handlers.execCommand('insertOrderedList'),
        listUnordered: () => handlers.execCommand('insertUnorderedList'),
        undo: () => handlers.execCommand('undo'),
        redo: () => handlers.execCommand('redo'),
        font(e) {
            handlers.execCommand('fontName', e.target.value);
            e.target.value = '';
        },
        size(e) {
            handlers.execCommand('fontSize', e.target.value);
            e.target.value = '';
        },
        format(e) {
            handlers.execCommand('formatBlock', e.target.value);
        },
        paragraph: () => handlers.execCommand('formatBlock', 'p'),
        blockquote: () => handlers.execCommand('formatBlock', 'blockquote'),
        bold: () => handlers.execCommand('bold'),
        italic: () => handlers.execCommand('italic'),
        underline: () => handlers.execCommand('underline'),
        color(e) {
            handlers.execCommand('foreColor', e.target.value);
        },
        highlight(e) {
            handlers.execCommand('hiliteColor', e.target.value);
        },
        strikethrough: () => handlers.execCommand('strikeThrough'),
        subscript: () => handlers.execCommand('subscript'),
        superscript: () => handlers.execCommand('superscript'),
        textStyle(e) {
            const style = e.target.value;
            if (!refs.editor.current || isCodeView)
                return;
            const selection = window.getSelection();
            if (selection && selection.rangeCount > 0) {
                const range = selection.getRangeAt(0);
                const fragment = range.extractContents();
                const styleSpans = fragment.querySelectorAll('span[class*="__frui-wysiwyg-t-"]');
                styleSpans.forEach(span => {
                    const parent = span.parentNode;
                    while (span.firstChild) {
                        parent?.insertBefore(span.firstChild, span);
                    }
                    parent?.removeChild(span);
                });
                const span = document.createElement('span');
                span.className = `__frui-wysiwyg-t-${style}`;
                span.appendChild(fragment);
                range.insertNode(span);
                selection.removeAllRanges();
                const newRange = document.createRange();
                newRange.selectNodeContents(span);
                selection.addRange(newRange);
            }
            handlers.input();
            e.target.value = '';
        },
        removeFormat: () => {
            if (!refs.editor.current || isCodeView)
                return;
            const selection = window.getSelection();
            if (selection && selection.rangeCount > 0) {
                const range = selection.getRangeAt(0);
                const container = document.createElement('div');
                container.appendChild(range.cloneContents());
                const styledElements = container.querySelectorAll('b, i, u, strike, sub, sup, font, span[style], '
                    + 'span[class*="__frui-wysiwyg-t-"]');
                styledElements.forEach(element => {
                    const textNode = document.createTextNode(element.textContent || '');
                    element.parentNode?.replaceChild(textNode, element);
                });
                container.normalize();
                const p = document.createElement('p');
                p.innerHTML = container.innerHTML || ' ';
                range.deleteContents();
                range.insertNode(p);
                selection.removeAllRanges();
                selection.addRange(range);
            }
            handlers.input();
            onUpdate && onUpdate({
                value: refs.editor.current.innerHTML || '',
                action: 'removeFormat'
            });
        },
        indent: () => handlers.execCommand('indent'),
        outdent: () => handlers.execCommand('outdent'),
        alignLeft: () => handlers.execCommand('justifyLeft'),
        alignCenter: () => handlers.execCommand('justifyCenter'),
        alignRight: () => handlers.execCommand('justifyRight'),
        rule: () => handlers.execCommand('insertHorizontalRule'),
        lineHeight(e) {
            if (refs.editor.current && !isCodeView) {
                refs.editor.current.style.lineHeight = e.target.value;
                handlers.input();
            }
        },
        table() {
            if (isCodeView)
                return;
            const rows = prompt('Enter number of rows', '2');
            const cols = prompt('Enter number of columns', '2');
            if (rows && cols && !isNaN(+rows) && !isNaN(+cols)) {
                const tableHTML = `<table border="1">${Array.from({ length: parseInt(rows) }, () => `<tr>${Array.from({ length: parseInt(cols) }, () => '<td> </td>').join('')}</tr>`).join('')}</table>`;
                handlers.execCommand('insertHTML', tableHTML);
            }
        },
        link() {
            if (isCodeView)
                return;
            const url = prompt('Enter URL', 'https://');
            if (url && /^https?:\/\//.test(url))
                handlers.execCommand('createLink', url);
        },
        image: () => refs.file.current?.click(),
        imageUpload(e) {
            if (isCodeView)
                return;
            const file = e.target.files?.[0];
            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = () => handlers.execCommand('insertImage', reader.result);
                reader.readAsDataURL(file);
            }
        },
        imageGallery: () => refs.gallery.current?.click(),
        galleryUpload(e) {
            if (isCodeView)
                return;
            const files = e.target.files;
            if (files) {
                Array.from(files).forEach((file) => {
                    if (file.type.startsWith('image/')) {
                        const reader = new FileReader();
                        reader.onload = () => handlers.execCommand('insertImage', reader.result);
                        reader.readAsDataURL(file);
                    }
                });
            }
        },
        video() {
            if (isCodeView)
                return;
            const url = prompt('Enter video URL (e.g., YouTube embed)', '');
            if (url && /^https?:\/\//.test(url)) {
                handlers.execCommand('insertHTML', `<iframe src="${url}" width="560" height="315" frameborder="0" allowfullscreen></iframe>`);
            }
        },
        audio() {
            if (isCodeView)
                return;
            const url = prompt('Enter audio URL', '');
            if (url && /^https?:\/\//.test(url)) {
                handlers.execCommand('insertHTML', `<audio controls src="${url}"></audio>`);
            }
        },
        math() {
            if (isCodeView)
                return;
            const expr = prompt('Enter math expression (e.g., x^2)', '');
            if (expr) {
                handlers.execCommand('insertHTML', `<span class="frui-wysiwyg-math">[Math: ${expr}]</span>`);
            }
        },
        fullscreen: () => {
            if (refs.editor.current) {
                if (!document.fullscreenElement) {
                    refs.editor.current.requestFullscreen();
                }
                else {
                    document.exitFullscreen();
                }
            }
        },
        showBlocks() {
            if (refs.editor.current && !isCodeView) {
                refs.editor.current.classList.toggle('frui-wysiwyg-show-block');
            }
        },
        codeViewToggle() {
            if (refs.editor.current && refs.textarea.current && refs.hidden.current) {
                if (!isCodeView) {
                    refs.textarea.current.value = refs.editor.current.innerHTML;
                    refs.hidden.current.value = refs.editor.current.innerHTML;
                    refs.textarea.current.style.display = 'block';
                    refs.editor.current.style.display = 'none';
                }
                else {
                    refs.editor.current.innerHTML = refs.textarea.current.value;
                    refs.hidden.current.value = refs.textarea.current.value;
                    refs.textarea.current.style.display = 'none';
                    refs.editor.current.style.display = 'block';
                }
                setIsCodeView(!isCodeView);
                setCurrentValue(!isCodeView ? refs.textarea.current.value : refs.editor.current.innerHTML);
                onChange && onChange(!isCodeView ? refs.textarea.current.value : refs.editor.current.innerHTML);
                onUpdate && onUpdate({ value: !isCodeView ? refs.textarea.current.value : refs.editor.current.innerHTML, action: 'codeViewToggle' });
            }
        },
        preview() {
            if (refs.editor.current) {
                const win = window.open('', '_blank');
                win?.document.write(`<html><body>${refs.editor.current.innerHTML}</body></html>`);
                win?.document.close();
            }
        },
        print: () => window.print(),
        save() {
            if (refs.editor.current) {
                const blob = new Blob([refs.editor.current.innerHTML], { type: 'text/html' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = 'editor-content.html';
                a.click();
                URL.revokeObjectURL(url);
            }
        },
        template(e) {
            const templateHTML = e.target.value;
            if (templateHTML && !isCodeView)
                handlers.execCommand('insertHTML', templateHTML);
            e.target.value = '';
        },
        dirToggle() {
            if (refs.editor.current && !isCodeView) {
                const currentDir = refs.editor.current.getAttribute('dir') || 'ltr';
                refs.editor.current.setAttribute('dir', currentDir === 'ltr' ? 'rtl' : 'ltr');
                handlers.input();
            }
        },
        dirLTR() {
            if (refs.editor.current && !isCodeView) {
                refs.editor.current.setAttribute('dir', 'ltr');
                handlers.input();
            }
        },
        dirRTL() {
            if (refs.editor.current && !isCodeView) {
                refs.editor.current.setAttribute('dir', 'rtl');
                handlers.input();
            }
        }
    };
    const handlers = {
        change(e) {
            if (isCodeView && refs.hidden.current) {
                refs.hidden.current.value = e.target.value;
                setCurrentValue(e.target.value);
                onChange?.(e.target.value);
                onUpdate?.({ value: e.target.value, action: 'input' });
            }
        },
        input() {
            if (refs.editor.current && refs.hidden.current) {
                const content = refs.editor.current.innerHTML;
                refs.hidden.current.value = content;
                setCurrentValue(content);
                onChange?.(content);
                onUpdate?.({ value: content, action: 'input' });
            }
        },
        click(e) {
            if (isCodeView || !refs.editor.current)
                return;
            const target = e.target;
            const link = target.closest('a[href]');
            if (link && (e.ctrlKey || e.metaKey)) {
                e.preventDefault();
                const href = link.getAttribute('href');
                if (href) {
                    window.open(href, '_blank', 'noopener,noreferrer');
                }
            }
        },
        execCommand(command, value) {
            if (!refs.editor.current || isCodeView)
                return;
            refs.editor.current.focus();
            document.execCommand(command, false, value);
            refs.editor.current.focus();
            handlers.input();
            onUpdate?.({ value: refs.editor.current.innerHTML || '', action: command });
        }
    };
    return { refs, blocks, handlers, isCodeView, value: currentValue };
}
;
export default function WYSIWYG(props) {
    const { history, font, size, format, paragraph, blockquote, style, color, highlight, text, textStyle, remove, indent, align, rule, list, lineheight, table, link, image, imageGallery, video, audio, math, fullscreen, showblocks, code, preview, print, save, template, dir, onChange, onUpdate, ...attributes } = props;
    const { refs, blocks, handlers, value, isCodeView } = useWYSIWYG({
        value: props.value,
        onChange,
        onUpdate
    });
    return (_jsxs("div", { className: `frui-wysiwyg ${dir === 'rtl' ? 'frui-wysiwyg-rtl' : ''}`, children: [_jsxs("div", { className: "frui-wysiwyg-toolbar", children: [history && (_jsxs("div", { className: "frui-wysiwyg-btn-module", children: [_jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.undo, title: "Undo", "aria-label": "Undo", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-undo" }) }), _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.redo, title: "Redo", "aria-label": "Redo", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-redo" }) })] })), font && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsxs("select", { className: "frui-wysiwyg-btn-select", onChange: blocks.font, title: "Font", "aria-label": "Font", defaultValue: "", disabled: isCodeView, children: [_jsx("option", { value: "", disabled: true, children: "Font" }), _jsx("option", { value: "Arial", style: { fontFamily: 'Arial' }, children: "Arial" }), _jsx("option", { value: "Comic Sans MS", style: { fontFamily: 'Comic Sans MS' }, children: "Comic Sans MS" }), _jsx("option", { value: "Courier New", style: { fontFamily: 'Courier New' }, children: "Courier New" }), _jsx("option", { value: "Impact", style: { fontFamily: 'Impact' }, children: "Impact" }), _jsx("option", { value: "Georgia", style: { fontFamily: 'Georgia' }, children: "Georgia" }), _jsx("option", { value: "Tahoma", style: { fontFamily: 'Tahoma' }, children: "Tahoma" }), _jsx("option", { value: "Trebuchet MS", style: { fontFamily: 'Trebuchet MS' }, children: "Trebuchet MS" }), _jsx("option", { value: "Verdana", style: { fontFamily: 'Verdana' }, children: "Verdana" })] }) })), size && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsxs("select", { className: "frui-wysiwyg-btn-select", onChange: blocks.size, title: "Size", "aria-label": "Font Size", defaultValue: "", disabled: isCodeView, children: [_jsx("option", { value: "", disabled: true, children: "Size" }), _jsx("option", { value: "8px", children: "8px" }), _jsx("option", { value: "9px", children: "9px" }), _jsx("option", { value: "10px", children: "10px" }), _jsx("option", { value: "11px", children: "11px" }), _jsx("option", { value: "12px", children: "12px" }), _jsx("option", { value: "14px", children: "14px" }), _jsx("option", { value: "16px", children: "16px" }), _jsx("option", { value: "18px", children: "18px" }), _jsx("option", { value: "20px", children: "20px" }), _jsx("option", { value: "22px", children: "22px" }), _jsx("option", { value: "24px", children: "24px" }), _jsx("option", { value: "26px", children: "26px" }), _jsx("option", { value: "28px", children: "28px" }), _jsx("option", { value: "36px", children: "36px" }), _jsx("option", { value: "48px", children: "48px" }), _jsx("option", { value: "72px", children: "72px" })] }) })), format && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsxs("select", { className: "frui-wysiwyg-btn-select", onChange: blocks.format, title: "Format", "aria-label": "Block Format", defaultValue: "", disabled: isCodeView, children: [_jsx("option", { value: "", disabled: true, children: "Format" }), _jsx("option", { value: "h1", children: "Heading 1" }), _jsx("option", { value: "h2", children: "Heading 2" }), _jsx("option", { value: "h3", children: "Heading 3" }), _jsx("option", { value: "h4", children: "Heading 4" }), _jsx("option", { value: "h5", children: "Heading 5" }), _jsx("option", { value: "h6", children: "Heading 6" }), _jsx("option", { value: "p", children: "Paragraph" }), _jsx("option", { value: "pre", children: "Code" })] }) })), paragraph && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.paragraph, title: "Paragraph", "aria-label": "Paragraph", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-paragraph" }) }) })), blockquote && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.blockquote, title: "Blockquote", "aria-label": "Blockquote", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-quote-right" }) }) })), style && (_jsxs("div", { className: "frui-wysiwyg-btn-module", children: [_jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.bold, title: "Bold", "aria-label": "Bold", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-bold" }) }), _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.italic, title: "Italic", "aria-label": "Italic", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-italic" }) }), _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.underline, title: "Underline", "aria-label": "Underline", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-underline" }) })] })), color && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("input", { type: "color", onChange: blocks.color, title: "Text Color", "aria-label": "Text Color", style: { width: '34px', height: '34px', padding: 0, border: 'none' }, disabled: isCodeView }) })), highlight && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("input", { type: "color", onChange: blocks.highlight, title: "Highlight", "aria-label": "Highlight", style: { width: '34px', height: '34px', padding: 0, border: 'none' }, disabled: isCodeView }) })), text && (_jsxs("div", { className: "frui-wysiwyg-btn-module", children: [_jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.strikethrough, title: "Strikethrough", "aria-label": "Strikethrough", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-strikethrough" }) }), _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.subscript, title: "Subscript", "aria-label": "Subscript", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-subscript" }) }), _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.superscript, title: "Superscript", "aria-label": "Superscript", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-superscript" }) })] })), textStyle && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsxs("select", { className: "frui-wysiwyg-btn-select", onChange: blocks.textStyle, title: "Text Style", "aria-label": "Text Style", defaultValue: "", disabled: isCodeView, children: [_jsx("option", { value: "", disabled: true, children: "T Style" }), _jsx("option", { value: "code", style: { backgroundColor: '#F9F9F9',
                                        border: '1px solid #E1E1E1', padding: '0 4px' }, children: "Code" }), _jsx("option", { value: "translucent", style: { opacity: 0.6 }, children: "Translucent" }), _jsx("option", { value: "shadow", style: { textShadow: '2px 2px 2px #B1B1B1' }, children: "Shadow" }), _jsx("option", { value: "spaced", style: {
                                        letterSpacing: '2px',
                                        wordSpacing: '4px'
                                    }, children: "Spaced" }), _jsx("option", { value: "bordered", style: {
                                        border: '2px solid #000000',
                                        padding: '2px 6px'
                                    }, children: "Bordered" }), _jsx("option", { value: "neon", style: {
                                        textShadow: '0 0 5px #FFFFFF, 0 0 10px #FFFFFF, 0 0 20px #FF00DE',
                                        color: '#FFFFFF',
                                        backgroundColor: '#000000',
                                        padding: '2px 6px'
                                    }, children: "NEON" })] }) })), remove && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.removeFormat, title: "Remove Format", "aria-label": "Remove Format", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-eraser" }) }) })), indent && (_jsxs("div", { className: "frui-wysiwyg-btn-module", children: [_jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.indent, title: "Indent", "aria-label": "Indent", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-indent" }) }), _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.outdent, title: "Outdent", "aria-label": "Outdent", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-outdent" }) })] })), align && (_jsxs("div", { className: "frui-wysiwyg-btn-module", children: [_jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.alignLeft, title: "Align Left", "aria-label": "Align Left", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-align-left" }) }), _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.alignCenter, title: "Align Center", "aria-label": "Align Center", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-align-center" }) }), _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.alignRight, title: "Align Right", "aria-label": "Align Right", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-align-right" }) })] })), rule && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.rule, title: "Horizontal Rule", "aria-label": "Horizontal Rule", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-minus" }) }) })), list && (_jsxs("div", { className: "frui-wysiwyg-btn-module", children: [_jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.listOrdered, title: "Ordered List", "aria-label": "Ordered List", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-list-ol" }) }), _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.listUnordered, title: "Unordered List", "aria-label": "Unordered List", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-list-ul" }) })] })), lineheight && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsxs("select", { className: "frui-wysiwyg-btn-select", onChange: blocks.lineHeight, title: "Line Height", "aria-label": "Line Height", defaultValue: "1", disabled: isCodeView, children: [_jsx("option", { value: "1", children: "1" }), _jsx("option", { value: "1.15", children: "1.15" }), _jsx("option", { value: "1.5", children: "1.5" }), _jsx("option", { value: "2", children: "2" })] }) })), table && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.table, title: "Table", "aria-label": "Insert Table", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-table" }) }) })), link && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.link, title: "Link", "aria-label": "Insert Link", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-link" }) }) })), image && (_jsxs("div", { className: "frui-wysiwyg-btn-module", children: [_jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.image, title: "Image", "aria-label": "Insert Image", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-image" }) }), _jsx("input", { type: "file", ref: refs.file, onChange: blocks.imageUpload, accept: "image/*", style: { display: 'none' }, "aria-hidden": "true" })] })), imageGallery && (_jsxs("div", { className: "frui-wysiwyg-btn-module", children: [_jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.imageGallery, title: "Image Gallery", "aria-label": "Insert from Gallery", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-images" }) }), _jsx("input", { type: "file", ref: refs.gallery, onChange: blocks.galleryUpload, accept: "image/*", multiple: true, style: { display: 'none' }, "aria-hidden": "true" })] })), video && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.video, title: "Video", "aria-label": "Insert Video", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-video" }) }) })), audio && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.audio, title: "Audio", "aria-label": "Insert Audio", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-volume-up" }) }) })), math && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.math, title: "Math", "aria-label": "Insert Math", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-square-root-alt" }) }) })), fullscreen && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.fullscreen, title: "Fullscreen", "aria-label": "Toggle Fullscreen", children: _jsx("i", { className: "fas fa-fw fa-expand" }) }) })), showblocks && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.showBlocks, title: "Show Blocks", "aria-label": "Toggle Block Visibility", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-border-all" }) }) })), code && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.codeViewToggle, title: isCodeView ? 'WYSIWYG View' : 'Code View', "aria-label": isCodeView
                                ? 'Switch to WYSIWYG View'
                                : 'Switch to Code View', children: _jsx("i", { className: `fas fa-fw ${isCodeView ? 'fa-eye' : 'fa-code'}` }) }) })), preview && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.preview, title: "Preview", "aria-label": "Preview Content", children: _jsx("i", { className: "fas fa-fw fa-eye" }) }) })), print && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.print, title: "Print", "aria-label": "Print", children: _jsx("i", { className: "fas fa-fw fa-print" }) }) })), save && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.save, title: "Save", "aria-label": "Save as HTML", children: _jsx("i", { className: "fas fa-fw fa-save" }) }) })), template && (_jsx("div", { className: "frui-wysiwyg-btn-module", children: _jsxs("select", { className: "frui-wysiwyg-btn-select", onChange: blocks.template, title: "Template", "aria-label": "Insert Template", defaultValue: "", disabled: isCodeView, children: [_jsx("option", { value: "", disabled: true, children: "Template" }), _jsx("option", { value: "<p><strong>Header</strong><br>Content</p>", children: "Simple Block" }), _jsx("option", { value: "<table border='1'><tr><td>Cell</td></tr></table>", children: "Table Block" })] }) })), dir && (_jsxs("div", { className: "frui-wysiwyg-btn-module", children: [_jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.dirToggle, title: "Toggle Direction", "aria-label": "Toggle Text Direction", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-exchange-alt" }) }), _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.dirLTR, title: "Left to Right", "aria-label": "Left to Right", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-long-arrow-alt-left" }) }), _jsx("button", { className: "frui-wysiwyg-btn", onClick: blocks.dirRTL, title: "Right to Left", "aria-label": "Right to Left", disabled: isCodeView, children: _jsx("i", { className: "fas fa-fw fa-long-arrow-alt-right" }) })] }))] }), _jsx("input", { type: "hidden", ref: refs.hidden, value: value, ...attributes }), _jsx("div", { ref: refs.editor, className: "frui-wysiwyg-editable", contentEditable: !isCodeView, onInput: handlers.input, onClick: handlers.click, dir: dir, "aria-label": "Rich Text Editor" }), _jsx("textarea", { ref: refs.textarea, style: {
                    display: isCodeView ? 'block' : 'none',
                    width: '100%',
                    minHeight: '200px',
                    padding: '16px',
                    fontFamily: 'monospace',
                    fontSize: '13px',
                    backgroundColor: '#F9F9F9',
                    border: 'none',
                    resize: 'vertical'
                }, onChange: handlers.change, defaultValue: value })] }));
}
;
