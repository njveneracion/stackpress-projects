import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import Input from './Input.js';
export function useSelect(config) {
    const { value, defaultValue, defaultOptions = [], onDropdown, onSelected, onUpdate, onQuery } = config;
    const currentValue = typeof defaultValue !== 'undefined'
        ? defaultValue
        : typeof value !== 'undefined'
            ? value
            : undefined;
    const defaultSelected = defaultOptions.find(option => option.value === currentValue);
    const [options, setOptions] = useState(defaultOptions);
    const [query, setQuery] = useState('');
    const [selected, setSelected] = useState(defaultSelected);
    const [showing, show] = useState(false);
    const handlers = {
        toggle() {
            show(!showing);
            onDropdown && onDropdown(!showing);
        },
        search(e) {
            setTimeout(() => {
                const input = e.target;
                setQuery(input.value);
                onQuery && onQuery(input.value, setOptions);
            });
        },
        match(option) {
            const keyword = (query || '').toLowerCase();
            if (typeof option.keyword === 'string') {
                return option.keyword
                    .toLowerCase()
                    .indexOf(keyword) >= 0;
            }
            else if (typeof option.keyword === 'function') {
                return option.keyword(keyword);
            }
            else if (typeof option.value !== 'undefined'
                && option.value !== null) {
                return option.value
                    .toString()
                    .toLowerCase()
                    .indexOf(keyword) >= 0;
            }
            else if (typeof option.label === 'string') {
                return option.label
                    .toLowerCase()
                    .indexOf(keyword) >= 0;
            }
            return true;
        },
        select(option) {
            show(false);
            setSelected(option);
            onDropdown && onDropdown(false);
            onSelected && onSelected(option);
            onUpdate && onUpdate(option.value);
        }
    };
    useEffect(() => {
        if (!value)
            return;
        const selected = options.find(option => option.value === value);
        setSelected(selected);
    }, [value]);
    return { selected, options, showing, handlers };
}
;
export function SelectDropdown(props) {
    const { options, show, searchable, select, search, match } = props;
    const style = !show ? { display: 'none' } : undefined;
    return (_jsxs("div", { className: "frui-field-select-dropdown", style: style, children: [searchable && (_jsxs("div", { className: "frui-field-select-search", children: [_jsx(Input, { className: "frui-field-select-search-control", onKeyUp: search }), _jsx("span", { className: "frui-field-select-search-icon", children: "\uD83D\uDD0E" })] })), _jsx("div", { className: "frui-field-select-options", children: options.filter(match).map((option, i) => (_jsx("div", { onClick: _ => select(option), className: "frui-field-select-option", children: option.label }, i))) })] }));
}
;
export default function Select(props) {
    const { name, searchable, value, defaultValue, options: defaultOptions, placeholder = 'Choose an Option', error, className, style, onQuery, onDropdown, onSelected, onUpdate } = props;
    const entries = (typeof defaultOptions === 'object' && !Array.isArray(defaultOptions)) ? Object.keys(defaultOptions).map(value => ({
        value, label: defaultOptions[value]
    })) : defaultOptions;
    const { selected, options, showing, handlers } = useSelect({
        value,
        defaultValue,
        defaultOptions: entries,
        onQuery,
        onDropdown,
        onSelected,
        onUpdate
    });
    const classNames = ['frui-field-select'];
    if (className) {
        classNames.push(className);
    }
    const placeholderClass = ['frui-field-select-placeholder'];
    if (error) {
        placeholderClass.push('frui-tx-error', 'frui-bd-error');
    }
    const inputValue = typeof selected?.value === 'string'
        ? selected.value
        : typeof selected?.value === 'number'
            ? String(selected.value)
            : typeof selected?.value === 'boolean'
                ? String(selected.value)
                : selected?.value && typeof selected.value === 'object'
                    ? JSON.stringify(selected.value)
                    : '';
    return (_jsxs("div", { className: classNames.join(' '), style: style, children: [_jsx("div", { className: "frui-field-select-control", onClick: handlers.toggle, children: selected?.label || (_jsx("span", { className: placeholderClass.join(' '), children: placeholder })) }), _jsx(SelectDropdown, { options: options, show: showing, error: error, searchable: searchable, select: handlers.select, search: handlers.search, match: handlers.match }), _jsx("input", { name: name, type: "hidden", value: inputValue })] }));
}
;
