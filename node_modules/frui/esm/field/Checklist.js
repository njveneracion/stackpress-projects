import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import { Children, isValidElement, cloneElement } from 'react';
export function useChecklistItem(config) {
    const { onChange, checked: propChecked, defaultChecked, value, onUpdate } = config;
    const [isChecked, setIsChecked] = useState(Boolean(defaultChecked || propChecked));
    useEffect(() => {
        if (typeof propChecked === 'undefined')
            return;
        if (propChecked !== isChecked) {
            setIsChecked(propChecked);
        }
    }, [propChecked]);
    return {
        isChecked,
        handlers: {
            change: (e) => {
                setIsChecked(e.target.checked);
                onChange && onChange(e);
                onUpdate && onUpdate(value, e.target.checked);
            },
        },
    };
}
export function ChecklistItem({ label, value, checked: propChecked, defaultChecked, onChange, onUpdate, size = 17, error, disabled, color, ...rest }) {
    const { isChecked, handlers } = useChecklistItem({
        onChange: (e) => onChange && onChange(value, e.target.checked),
        onUpdate,
        checked: propChecked,
        defaultChecked,
        value,
    });
    return (_jsxs("label", { style: {
            display: 'flex',
            alignItems: 'center',
            gap: '6px',
            fontSize: '15px',
            cursor: disabled ? 'not-allowed' : 'pointer',
            marginTop: '2px',
            color: error ? 'red' : disabled ? 'gray' : 'inherit',
            opacity: disabled ? 0.5 : 1,
        }, children: [_jsx("input", { type: "checkbox", value: value, checked: isChecked, onChange: handlers.change, style: {
                    width: `${size}px`,
                    height: `${size}px`,
                    cursor: disabled ? 'not-allowed' : 'pointer',
                    verticalAlign: 'middle',
                    marginTop: '2px',
                    accentColor: error ? 'red' : color || 'inherit',
                }, disabled: disabled, ...rest }), _jsx("span", { style: { fontSize: 'inherit', lineHeight: `${size}px` }, children: label })] }));
}
export default function Checklist({ children, name, defaultValue = [], onChange, onUpdate, style, className, orientation = 'row', size = 17, error, disabled, color, }) {
    const [selected, setSelected] = useState(() => {
        const defaultCheckedValues = [];
        Children.forEach(children, (child) => {
            if (isValidElement(child) && child.props.defaultChecked) {
                defaultCheckedValues.push(child.props.value);
            }
        });
        if (defaultValue.length > 0) {
            return defaultValue;
        }
        return defaultCheckedValues;
    });
    const toggleSelection = (value, checked, itemOnUpdate) => {
        if (!disabled) {
            setSelected((prev) => {
                const newSelection = checked
                    ? [...prev, value]
                    : prev.filter((v) => v !== value);
                onChange?.(newSelection);
                return newSelection;
            });
            setTimeout(() => {
                onUpdate?.(value, checked);
                itemOnUpdate?.(value, checked);
            }, 0);
        }
    };
    return (_jsxs("div", { className: `checklist ${className || ''}`, style: {
            display: 'flex',
            flexDirection: orientation === 'column' ? 'column' : 'row',
            alignItems: 'center',
            gap: '12px',
            fontSize: '15px',
            marginTop: '2px',
            opacity: disabled ? 0.5 : 1,
            ...style,
        }, children: [Children.map(children, (child) => {
                if (isValidElement(child)) {
                    return cloneElement(child, {
                        checked: selected.includes(child.props.value),
                        onChange: (value, checked) => {
                            toggleSelection(value, checked, child.props.onUpdate);
                        },
                        size: child.props.size || size,
                        error: child.props.error !== undefined ? child.props.error : error,
                        disabled: disabled || child.props.disabled,
                        color: child.props.color || color,
                        onUpdate: child.props.onUpdate,
                    });
                }
                return child;
            }), _jsx("input", { type: "hidden", name: name, value: JSON.stringify(selected) })] }));
}
