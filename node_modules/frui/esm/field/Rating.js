import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import React, { useState, useCallback, useId } from 'react';
export const defaultGetLabelText = (value) => `${value} Star${value !== 1 ? 's' : ''}`;
export function useRating(config) {
    const { name: providedName, value: controlledValue, defaultValue = null, onChange, onChangeActive, readOnly = false, disabled = false } = config;
    const [uncontrolledValue, setUncontrolledValue] = useState(defaultValue);
    const [hoverValue, setHoverValue] = useState(null);
    const generatedName = useId();
    const name = providedName || generatedName;
    const isControlled = controlledValue !== undefined;
    const currentValue = isControlled ? controlledValue : uncontrolledValue;
    const displayValue = hoverValue !== null ? hoverValue : currentValue;
    const handlers = {
        radioChange: useCallback((event) => {
            if (readOnly)
                return;
            const newValue = parseInt(event.target.value, 10);
            if (!isControlled) {
                setUncontrolledValue(newValue);
            }
            onChange?.(event, newValue);
        }, [isControlled, onChange, readOnly]),
        mouseEnter: useCallback((event, indexValue) => {
            if (readOnly || disabled)
                return;
            setHoverValue(indexValue);
            onChangeActive?.(event, indexValue);
        }, [readOnly, disabled, onChangeActive]),
        mouseLeave: useCallback((event) => {
            if (readOnly || disabled)
                return;
            setHoverValue(null);
            onChangeActive?.(event, null);
        }, [readOnly, disabled, onChangeActive])
    };
    return {
        name,
        value: currentValue,
        displayValue,
        hoverValue,
        setHoverValue,
        handlers,
        isControlled
    };
}
export function Star({ style, ...props }) {
    return (_jsx("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", fill: "currentColor", height: "1em", width: "1em", style: { display: 'inline-block', flexShrink: 0, userSelect: 'none', ...style }, ...props, children: _jsx("path", { d: "M12 17.27 18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z" }) }));
}
;
export default function Rating(props) {
    const { name: providedName, value: controlledValue, defaultValue = null, max = 5, onChange, onChangeActive, readOnly = false, disabled = false, size = 'medium', icon, emptyIcon, getLabelText = defaultGetLabelText, highlightSelectedOnly = false, className = '', style, } = props;
    const { name, value, handlers, displayValue, hoverValue } = useRating({
        name: providedName,
        value: controlledValue,
        defaultValue,
        onChange,
        onChangeActive,
        readOnly,
        disabled
    });
    const filledIcon = icon || _jsx(Star, {});
    const unfilledIcon = emptyIcon || _jsx(Star, { style: { opacity: 0.4 } });
    const classNames = ['frui-rating-root'];
    if (size === 'small') {
        classNames.push(`frui-rating-small`);
    }
    else if (size === 'large') {
        classNames.push(`frui-rating-large`);
    }
    else {
        classNames.push(`frui-rating-medium`);
    }
    if (disabled) {
        classNames.push('frui-rating-disabled');
    }
    if (readOnly) {
        classNames.push('frui-rating-readonly');
    }
    classNames.push(className);
    return (_jsx("span", { className: classNames.join(' '), style: style, onMouseLeave: handlers.mouseLeave, children: Array.from({ length: max }, (_, index) => {
            const itemValue = index + 1;
            const isChecked = value === itemValue;
            let isFilled;
            if (highlightSelectedOnly) {
                isFilled = displayValue === itemValue;
            }
            else {
                isFilled = displayValue !== null && itemValue <= displayValue;
            }
            const iconNode = isFilled ? filledIcon : unfilledIcon;
            const classNames = ['frui-rating-icon'];
            if (isFilled) {
                classNames.push('frui-rating-icon-filled');
            }
            else {
                classNames.push('frui-rating-icon-empty');
            }
            if (hoverValue === itemValue) {
                classNames.push('frui-rating-icon-hover');
            }
            if (value === itemValue) {
                classNames.push('frui-rating-icon-active');
            }
            return (_jsx(React.Fragment, { children: _jsxs("label", { className: "frui-rating-icon-label", onMouseEnter: (e) => handlers.mouseEnter(e, itemValue), "aria-label": getLabelText(itemValue), children: [_jsx("input", { className: "frui-rating-visually-hidden", type: "radio", name: name, value: itemValue, checked: isChecked, onChange: handlers.radioChange, disabled: disabled, readOnly: readOnly }), _jsx("span", { className: classNames.join(' '), children: iconNode })] }) }, itemValue));
        }) }));
}
