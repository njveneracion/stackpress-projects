import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import Button from '../form/Button.js';
import make from '../form/Fieldset.js';
import Input from './Input.js';
import Number from './Number.js';
import Date from './Date.js';
import Datetime from './Datetime.js';
import Time from './Time.js';
export function useMetadata(config) {
    const { type, values, index, set } = config;
    const isNumber = type === 'number';
    const isDate = ['date', 'time', 'datetime'].includes(type || '');
    const isText = !isDate && !isNumber;
    const handlers = {
        update: (key, input) => {
            const newValues = [...(values || [])];
            const entry = ['', ''];
            const current = newValues[index];
            entry[0] = current ? current[0] : '';
            entry[1] = current ? current[1] : '';
            if (key === 'name') {
                entry[0] = input;
            }
            else {
                entry[1] = input;
            }
            newValues[index] = entry;
            set(newValues);
        },
        remove: () => {
            const newValues = [...(values || [])];
            newValues[index] = undefined;
            set(newValues);
        }
    };
    return { handlers, input: { isDate, isText, isNumber } };
}
export function MetadataFields(props) {
    const { name, config = {}, values, index, error, set } = props;
    const { type, min, max, step, placeholder } = config;
    const { handlers, input } = useMetadata({
        type,
        values,
        index,
        set
    });
    const value = values ? values[index] : undefined;
    return (_jsxs("div", { className: "frui-field-metadata-row", children: [_jsx(Input, { className: "frui-field-metadata-name", placeholder: Array.isArray(placeholder) ? placeholder[0] : undefined, defaultValue: Array.isArray(value) ? value[0] : undefined, onUpdate: name => handlers.update('name', name), error: error, required: true }), input.isText && (_jsx(Input, { type: type, className: "frui-field-metadata-value", placeholder: Array.isArray(placeholder) ? placeholder[1] : undefined, defaultValue: Array.isArray(value) ? value[1] : undefined, onUpdate: value => handlers.update('value', value), error: error, required: true })), input.isNumber && (_jsx(Number, { min: min, max: max, step: step, className: "frui-field-metadata-value", placeholder: Array.isArray(placeholder) ? placeholder[1] : undefined, defaultValue: Array.isArray(value) ? value[1] : undefined, onUpdate: (value) => handlers.update('value', value), error: error, required: true })), input.isDate && type === 'date' && (_jsx(Date, { type: "date", className: "frui-field-metadata-value", placeholder: Array.isArray(placeholder) ? placeholder[1] : undefined, defaultValue: Array.isArray(value) ? value[1] : undefined, onUpdate: value => handlers.update('value', value), error: error, required: true })), input.isDate && type === 'time' && (_jsx(Time, { type: "time", className: "frui-field-metadata-value", placeholder: Array.isArray(placeholder) ? placeholder[1] : undefined, defaultValue: Array.isArray(value) ? value[1] : undefined, onUpdate: (value) => handlers.update('value', value), error: error, required: true })), input.isDate && (type === 'datetime' || type === 'datetime-local') && (_jsx(Datetime, { type: "datetime-local", className: "frui-field-metadata-value", placeholder: Array.isArray(placeholder) ? placeholder[1] : undefined, defaultValue: Array.isArray(value) ? value[1] : undefined, onUpdate: (value) => handlers.update('value', value), error: error, required: true })), _jsx(Button, { outline: true, error: true, onClick: handlers.remove, className: "frui-field-metadata-remove", children: "\u00D7" }), value && value[0].length > 0 && (_jsx("input", { type: "hidden", name: `${name}[${value[0]}]`, value: value[1] instanceof Date
                    ? value[1].toISOString()
                    : String(value[1]) }))] }));
}
;
const Fieldset = make(MetadataFields);
export default function Metadata(props) {
    const { type, min, max, step, placeholder, ...attributes } = props;
    const placeholders = Array.isArray(placeholder)
        ? placeholder
        : [placeholder, placeholder];
    const config = { type, min, max, step, placeholder: placeholders };
    return (_jsx(Fieldset, { ...attributes, config: config, emptyValue: ['', ''] }));
}
