import { jsx as _jsx } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import Input from './Input.js';
function toggleNegative(value, absolute) {
    const isNegative = (value.match(/\-/g) || []).length % 2;
    const negative = !absolute && isNegative ? '-' : '';
    value = value.replaceAll('-', '');
    value = value.replace(new RegExp('^0+', 'g'), '');
    return negative + value;
}
function fixDecimal(value, decimal, decimals, cursor) {
    if (decimals < 0) {
        return value;
    }
    if (!decimals) {
        return value.replaceAll(decimal, '');
    }
    cursor = cursor || value.lastIndexOf(decimal);
    const allDecimals = new RegExp(`\\${decimal}`, 'g');
    if ((value.match(allDecimals) || []).length > 1) {
        value = [
            value.substring(0, cursor).replaceAll(decimal, ''),
            value.substring(cursor + 1).replaceAll(decimal, '')
        ].join(decimal);
    }
    if ((value.split(decimal)[1] || '').length > decimals) {
        value = value.substring(0, value.length - 1);
    }
    return value;
}
function between(value, min, max) {
    if (min && !isNaN(min) && parseFloat(value) < min) {
        value = String(min);
    }
    if (max && !isNaN(max) && parseFloat(value) > max) {
        value = String(max);
    }
    return value;
}
function padDecimals(value, decimal, decimals) {
    if (!decimals || !value.length) {
        return value;
    }
    if (value[value.length - 1] === decimal) {
        value = value.substring(0, value.length - 1);
    }
    const allDecimals = new RegExp(`\\${decimal}`, 'g');
    if (!(value.match(allDecimals) || []).length && decimals > 0) {
        value += decimal + '0'.repeat(decimals);
    }
    if (value[0] === decimal) {
        value = '0' + value;
    }
    if (value.indexOf(`-${decimal}`) === 0) {
        value = '-0.' + value.substr(decimal.length + 1);
    }
    if (decimals > 0) {
        value += '0'.repeat(decimals - value.split(decimal)[1].length);
    }
    return value;
}
function prettify(value, separator, decimal) {
    const placeCommas = new RegExp(`\\B(?<!\\${separator}\\d*)(?=(\\d{3})+(?!\\d))`, 'g');
    if (separator) {
        if (value.indexOf(decimal) !== -1) {
            let [numerator, denominator] = value.split(decimal);
            numerator = numerator.replace(placeCommas, separator);
            value = [numerator, denominator].join(decimal);
        }
        else {
            value = value.replace(placeCommas, separator);
        }
    }
    return value;
}
function getFormats(value, options, cursor = 0) {
    const { min, max, separator = ',', decimal = '.', decimals = 0, absolute = false } = options;
    const dec = decimal || '.';
    const notNumberRelated = new RegExp(`[^0-9\-\\${dec}]`, 'g');
    let formatted = value.replace(notNumberRelated, '');
    formatted = toggleNegative(formatted, absolute);
    formatted = fixDecimal(formatted, dec, decimals, cursor);
    formatted = between(formatted, min, max);
    return {
        value: padDecimals(formatted, dec, decimals),
        display: prettify(formatted, separator, decimal)
    };
}
function getFormatsFromInput(input, options) {
    const cursor = input.selectionStart ? input.selectionStart - 1 : 0;
    return getFormats(input.value, options, cursor);
}
export function useNumber(config) {
    const { value, defaultValue, min, max, separator = ',', decimal = '.', step, absolute = false, controls, onUpdate, onChange } = config;
    const decimals = step ? String(step).split('.')[1]?.length || -1 : -1;
    const options = {
        min: Number(min) || undefined,
        max: Number(max) || undefined,
        separator,
        decimal,
        decimals,
        absolute
    };
    const initial = getFormats(String(defaultValue || ''), options);
    const [hiddenValue, setHiddenValue] = useState(initial.value);
    const [displayValue, setDisplayValue] = useState(initial.display);
    const [cursor, setCursor] = useState(0);
    const [input, setInput] = useState();
    const handlers = {
        update: (value) => {
            getFormats(String(value), options);
        },
        passRef: (element) => {
            if (element && !input) {
                controls && controls({ update: handlers.update, value: hiddenValue });
                setInput(element);
            }
        },
        format: (e) => {
            const { value, display } = getFormatsFromInput(e.target, options);
            if (Number(hiddenValue) !== Number(value)) {
                onChange && onChange(e);
                onUpdate && onUpdate(String(Number(value)));
                setHiddenValue(value);
            }
            const pointer = e.target.selectionStart || 0;
            if (displayValue !== display) {
                if (display.length > displayValue.length) {
                    setCursor(pointer + (display.length - displayValue.length) - 1);
                }
                else if (display.length < displayValue.length) {
                    setCursor(pointer - (displayValue.length - display.length) + 1);
                }
                else {
                    setCursor(pointer);
                }
                setDisplayValue(display);
            }
        },
        defocus: () => {
            setDisplayValue(padDecimals(displayValue, decimal, decimals));
        }
    };
    useEffect(() => {
        if (input && cursor >= 0) {
            input.selectionStart = cursor;
            input.selectionEnd = cursor;
        }
    }, [cursor]);
    useEffect(() => {
        if (value === undefined)
            return;
        const newValue = getFormats(String(value || ''), options);
        setHiddenValue(newValue.value);
        setDisplayValue(newValue.display);
    }, [value]);
    return { displayValue, handlers };
}
export default function NumberField(props) {
    const { name, value, defaultValue, min, max, separator = ',', decimal = '.', step, absolute = false, controls, onUpdate, onChange, ...attributes } = props;
    const { displayValue, handlers } = useNumber({
        value,
        defaultValue,
        min,
        max,
        separator,
        decimal,
        step,
        absolute,
        controls,
        onUpdate,
        onChange
    });
    return (_jsx(Input, { passRef: handlers.passRef, ...attributes, onChange: handlers.format, onBlur: handlers.defocus, value: displayValue }));
}
;
