import { ChangeEvent } from 'react';
import { Extension } from '@codemirror/state';
import type { InputProps } from './Input.js';
import { ExtendsType } from '../types.js';
import { LanguageSupport } from '@codemirror/language';
export type CodeEditorConfig = {
    language: string;
    onChange?: Function;
    onUpdate?: Function;
};
export type CodeEditorProps = ExtendsType<InputProps, {
    defaultValue?: string;
    extensions?: Extension[];
    language?: string;
    numbers?: boolean;
    setup?: 'minimal' | 'basic' | 'custom';
    value?: string;
}>;
export declare function useCodeEditor({ language, onUpdate, onChange, }: CodeEditorConfig): {
    languageExtension: LanguageSupport | undefined;
    handlers: {
        update: (value: string) => void;
        change: (event: ChangeEvent<HTMLInputElement>) => void;
    };
};
export default function CodeEditor(props: CodeEditorProps): import("react/jsx-runtime").JSX.Element;
