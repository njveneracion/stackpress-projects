import type { CSSProperties } from 'react';
import React from 'react';
import { ColorProps } from '../format/Color';
export type RGBA = {
    r: number;
    g: number;
    b: number;
    a: number;
};
export type HSVA = {
    h: number;
    s: number;
    v: number;
    a: number;
};
export type Dragging = 'palette' | 'hue' | 'alpha' | null;
export type ColorPickerConfig = {
    value?: string;
    defaultValue?: string;
    onChange?: (color: string) => void;
};
export type ColorPickerProps = Omit<ColorProps, 'value'> & {
    value?: string;
    defaultValue?: string;
    onChange?: (color: string) => void;
    showAlpha?: boolean;
    showInputs?: boolean;
    swatches?: string[];
    pickerStyle?: CSSProperties;
    pickerClassName?: string;
};
export declare const defaultHsva: HSVA;
export declare const defaultRgbaString: string;
export declare function hsvaToRgba(hsva: HSVA): RGBA;
export declare function rgbaToHsva(rgba: RGBA): HSVA;
export declare function rgbaToString(rgba: RGBA): string;
export declare function parseColorString(colorString: string): RGBA | null;
export declare function useColorPicker(config: ColorPickerConfig): {
    refs: {
        picker: React.RefObject<HTMLDivElement | null>;
        wrapper: React.RefObject<HTMLDivElement | null>;
        palette: React.RefObject<HTMLDivElement | null>;
        hueSlider: React.RefObject<HTMLInputElement | null>;
        alphaSlider: React.RefObject<HTMLInputElement | null>;
    };
    handlers: {
        colorDisplayClick: () => void;
        clickOutside: (event: MouseEvent) => void;
        mouseDown: (type: "palette" | "hue" | "alpha", e: React.MouseEvent) => void;
        mouseMove: (e: MouseEvent) => void;
        mouseUp: () => void | null;
        hueChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
        alphaChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
        rgbaInputChange: (field: "r" | "g" | "b" | "a", fieldValue: string) => void;
        swatchClick: (swatchColor: string) => void;
    };
    isControlled: boolean;
    hsva: HSVA;
    currentRgba: RGBA;
    currentRgbaString: string;
    displayPicker: boolean;
    setDisplayPicker: React.Dispatch<React.SetStateAction<boolean>>;
    isDragging: Dragging;
    setIsDragging: React.Dispatch<React.SetStateAction<Dragging>>;
    internalHsva: HSVA;
    setInternalHsva: React.Dispatch<React.SetStateAction<HSVA>>;
};
export default function ColorPicker(props: ColorPickerProps): import("react/jsx-runtime").JSX.Element;
