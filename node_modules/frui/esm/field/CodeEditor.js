import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useRef, useState } from 'react';
import { minimalSetup, basicSetup } from 'codemirror';
import { EditorView, lineNumbers } from '@codemirror/view';
import { EditorState } from '@codemirror/state';
import Input from './Input.js';
import { languages } from '@codemirror/language-data';
export function useCodeEditor({ language, onUpdate, onChange, }) {
    const [languageExtension, setLanguageExtension] = useState(undefined);
    useEffect(() => {
        getLanguageExtension(language).then((extension) => {
            setLanguageExtension(extension);
        });
    }, [language]);
    return {
        languageExtension,
        handlers: {
            update: (value) => {
                onUpdate && onUpdate(value);
            },
            change: (event) => {
                onChange && onChange(event);
            },
        },
    };
}
function getEditorOptions(setup, numbers, extensions) {
    const options = [];
    switch (setup) {
        case 'minimal':
            options.push(minimalSetup);
            break;
        case 'basic':
            options.push(basicSetup);
            break;
        case 'custom':
            options.push();
            break;
        default:
            options.push();
            break;
    }
    options.push(extensions);
    if (numbers) {
        options.push(lineNumbers());
    }
    return options;
}
async function getLanguageExtension(language) {
    const langName = language.toLowerCase();
    const lang = languages.find((lang) => lang.name.toLowerCase() === langName ||
        lang.alias?.map((a) => a.toLowerCase()).includes(langName));
    if (lang) {
        await lang.load();
        const support = lang.support;
        return support;
    }
    return undefined;
}
export default function CodeEditor(props) {
    const { defaultValue, extensions = [], language = '', numbers = false, onUpdate, onChange, setup = 'minimal', value, ...attributes } = props;
    const [currentValue, setCurrentValue] = useState(value);
    const inputRef = useRef(null);
    const editorRef = useRef(null);
    const viewRef = useRef(null);
    const { languageExtension, handlers } = useCodeEditor({
        language,
        onChange,
        onUpdate,
    });
    const options = getEditorOptions(setup, numbers, extensions);
    useEffect(() => {
        if (editorRef.current) {
            const state = EditorState.create({
                doc: value ?? defaultValue ?? '',
                extensions: [
                    options,
                    languageExtension ?? [],
                    EditorView.updateListener.of((viewUpdate) => {
                        if (viewUpdate.docChanged && viewRef.current) {
                            const newValue = viewUpdate.state.doc.toString();
                            handlers.change({
                                target: {
                                    ...inputRef.current,
                                    value: newValue,
                                },
                            });
                            handlers.update(newValue);
                            if (value) {
                                setCurrentValue(newValue);
                            }
                            else {
                                inputRef.current.value = newValue;
                            }
                        }
                    }),
                ],
            });
            viewRef.current = new EditorView({
                state,
                parent: editorRef.current,
            });
        }
        return () => {
            if (viewRef.current) {
                viewRef.current.destroy();
            }
        };
    }, [languageExtension]);
    return (_jsxs("div", { className: `frui-field-code-editor ${props.className || ''}`, children: [_jsx(Input, { ...attributes, passRef: inputRef, type: 'hidden', value: currentValue, defaultValue: defaultValue }), _jsx("div", { className: 'code-editor-container', ref: editorRef })] }));
}
