import type { ChangeEvent, FocusEvent, KeyboardEvent, CSSProperties } from 'react';
import type { InputProps } from './Input.js';
export type AutocompleteConfig = {
    options?: string[];
    defaultValue?: string | number | readonly string[];
    onSelected?: (option: string) => void;
    onQuery?: (query: string, set: Function) => void;
    onDropdown?: (show: boolean) => void;
    onChange?: (e: ChangeEvent<HTMLInputElement>) => void;
    onUpdate?: (value: string) => void;
};
export type AutocompleteDropdownProps = {
    options?: string[];
    show: boolean;
    styles?: Record<string, CSSProperties | false | undefined> | false;
    classNames?: Record<string, string | false | undefined> | false;
    select: (option: string) => void;
    match: (option: string) => void;
};
export type AutocompleteProps = InputProps & {
    options?: string[];
    styles?: Record<string, CSSProperties | false | undefined> | false;
    classNames?: Record<string, string | false | undefined> | false;
    onSelected?: (option: string) => void;
    onQuery?: (query: string, set: Function) => void;
    onDropdown?: (show: boolean) => void;
};
export declare function useAutocomplete(config: AutocompleteConfig): {
    value: string | number | readonly string[];
    options: string[];
    showing: boolean;
    handlers: {
        search: (e: KeyboardEvent) => void;
        update: (e: ChangeEvent<HTMLInputElement>) => void;
        match: (option: string) => boolean | 0;
        select: (option: string) => void;
        blur: (_e: FocusEvent<HTMLInputElement>) => void;
    };
};
export declare function AutocompleteDropdown(props: AutocompleteDropdownProps): import("react/jsx-runtime").JSX.Element | null;
export default function Autocomplete(props: AutocompleteProps): import("react/jsx-runtime").JSX.Element;
