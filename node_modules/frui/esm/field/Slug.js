import { jsx as _jsx } from "react/jsx-runtime";
import Input from './Input.js';
export function slugify(str, noDash = false, noLine = false) {
    return str.trim()
        .replace(/[^a-zA-Z0-9\-_]/g, noLine ? '-' : '_')
        .replace(/-/g, noLine ? '-' : '_')
        .replace(/_/g, noDash ? '_' : '-')
        .replace(/-{2,}/g, '-')
        .replace(/_{2,}/g, '_')
        .replace(/^-+|-+$/g, '')
        .replace(/^_+|_+$/g, '')
        .toLowerCase();
}
;
export function camelfy(str) {
    return str.trim()
        .replace(/[^a-zA-Z0-9]/g, '_')
        .replace(/_{2,}/g, '_')
        .replace(/^_+|_+$/g, '')
        .replace(/([-_][a-z0-9])/ig, ($1) => {
        return $1.toUpperCase()
            .replace('-', '')
            .replace('_', '');
    });
}
export function useSlug(config) {
    const value = config.value
        ? (config.camel
            ? camelfy(String(config.value))
            : slugify(String(config.value), !config.dash, !config.line)) : undefined;
    const defaultValue = config.defaultValue
        ? (config.camel
            ? camelfy(String(config.defaultValue))
            : slugify(String(config.defaultValue), !config.dash, !config.line)) : undefined;
    const change = (e) => {
        e.target.value = config.camel
            ? camelfy(e.target.value)
            : slugify(e.target.value, !config.dash, !config.line);
        config.onChange && config.onChange(e);
    };
    return { value, defaultValue, change };
}
;
export default function Slug(props) {
    const { dash, line, camel, value: rawValue, defaultValue: rawDefaultValue, onChange, ...attributes } = props;
    const { value, defaultValue, change } = useSlug({
        dash,
        line,
        camel,
        value: rawValue,
        defaultValue: rawDefaultValue,
        onChange
    });
    return (_jsx(Input, { ...attributes, value: value, defaultValue: defaultValue, onChange: change }));
}
;
