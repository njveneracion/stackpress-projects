import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useState, useEffect, useRef } from 'react';
export default function MultiSelect({ options = [], custom = false, searchable = false, className = '', name = '', placeholder = 'Select an option', ...htmlProps }) {
    const [inputValue, setInputValue] = useState('');
    const [selected, setSelected] = useState([]);
    const [filteredOptions, setFilteredOptions] = useState([]);
    const [isDropdownOpen, setIsDropdownOpen] = useState(false);
    const wrapperRef = useRef(null);
    const inputRef = useRef(null);
    useEffect(() => {
        let filtered = [];
        if (searchable && inputValue) {
            const query = inputValue.toLowerCase();
            filtered = options.filter((option) => option.toLowerCase().includes(query) && !selected.includes(option));
        }
        else {
            filtered = options.filter((option) => !selected.includes(option));
        }
        setFilteredOptions(filtered);
    }, [inputValue, options, selected, searchable]);
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (wrapperRef.current &&
                !wrapperRef.current.contains(event.target)) {
                setIsDropdownOpen(false);
                setInputValue('');
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);
    const handleInputChange = (e) => {
        setInputValue(e.target.value);
        if (!isDropdownOpen && (searchable || custom)) {
            setIsDropdownOpen(true);
        }
    };
    const addTag = (tag) => {
        tag = tag.trim();
        if (!tag || selected.includes(tag))
            return;
        if (custom || options.includes(tag)) {
            setSelected([...selected, tag]);
            setInputValue('');
            setIsDropdownOpen(false);
            inputRef.current?.blur();
        }
    };
    const removeTag = (index) => {
        setSelected(selected.filter((_, i) => i !== index));
        inputRef.current?.blur();
    };
    const handleKeyDown = (e) => {
        if (['Enter', 'Tab'].includes(e.key)) {
            e.preventDefault();
            if (inputValue && (custom || options.includes(inputValue))) {
                addTag(inputValue);
            }
        }
        else if (e.key === 'Backspace' && !inputValue && selected.length > 0) {
            removeTag(selected.length - 1);
        }
    };
    const toggleDropdown = () => {
        if (filteredOptions.length > 0 || custom || searchable) {
            setIsDropdownOpen(!isDropdownOpen);
        }
    };
    return (_jsxs("div", { className: `frui-field-multiselect ${className}`, role: "combobox", "aria-multiselectable": "true", "aria-expanded": isDropdownOpen, ...htmlProps, ref: wrapperRef, children: [_jsx("div", { className: "frui-field-multiselect-control", onClick: toggleDropdown, children: selected.length > 0 ? (selected.map((tag, index) => (_jsxs("span", { className: "frui-field-multiselect-tag", children: [tag, _jsx("button", { type: "button", className: "frui-field-multiselect-tag-remove", onClick: (e) => {
                                e.stopPropagation();
                                removeTag(index);
                            }, "aria-label": `Remove ${tag}`, children: "\u00D7" })] }, index)))) : (_jsx("span", { className: "frui-field-multiselect-placeholder", children: placeholder })) }), _jsxs("div", { className: "frui-field-multiselect-dropdown", style: { display: isDropdownOpen ? 'block' : 'none' }, children: [(searchable || custom) && (_jsx("div", { className: "frui-field-multiselect-search", children: _jsx("input", { ref: inputRef, type: "text", value: inputValue, onChange: handleInputChange, onKeyDown: handleKeyDown, className: "frui-field-multiselect-search-control", placeholder: placeholder, "aria-autocomplete": searchable ? 'list' : 'none', autoFocus: true }) })), filteredOptions.length > 0 && (_jsx("div", { className: "frui-field-multiselect-options", children: filteredOptions.map((option, index) => (_jsx("div", { className: "frui-field-multiselect-option", onClick: () => addTag(option), role: "option", "aria-selected": selected.includes(option), children: option }, index))) }))] }), selected.map((tag, index) => (_jsx("input", { type: "hidden", name: `${name}[]`, value: tag }, index)))] }));
}
;
