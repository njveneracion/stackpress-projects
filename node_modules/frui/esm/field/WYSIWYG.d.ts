import type { ChangeEvent, MouseEvent } from 'react';
export type WYSIWYGConfig = {
    value?: string;
    onChange?: (value: string) => void;
    onUpdate?: (state: {
        value: string;
        action: string;
    }) => void;
};
export type WYSIWYGProps = {
    value?: string;
    history?: boolean;
    font?: boolean;
    size?: boolean;
    format?: boolean;
    paragraph?: boolean;
    blockquote?: boolean;
    style?: boolean;
    color?: boolean;
    highlight?: boolean;
    text?: boolean;
    textStyle?: boolean;
    remove?: boolean;
    indent?: boolean;
    align?: boolean;
    rule?: boolean;
    list?: boolean;
    lineheight?: boolean;
    table?: boolean;
    link?: boolean;
    image?: boolean;
    imageGallery?: boolean;
    video?: boolean;
    audio?: boolean;
    math?: boolean;
    fullscreen?: boolean;
    showblocks?: boolean;
    code?: boolean;
    preview?: boolean;
    print?: boolean;
    save?: boolean;
    template?: boolean;
    dir?: 'ltr' | 'rtl';
    onChange?: (value: string) => void;
    onUpdate?: (state: {
        value: string;
        action: string;
    }) => void;
    [key: string]: any;
};
export declare function useWYSIWYG(config: WYSIWYGConfig): {
    refs: {
        editor: import("react").RefObject<HTMLDivElement | null>;
        textarea: import("react").RefObject<HTMLTextAreaElement | null>;
        hidden: import("react").RefObject<HTMLInputElement | null>;
        file: import("react").RefObject<HTMLInputElement | null>;
        gallery: import("react").RefObject<HTMLInputElement | null>;
    };
    blocks: {
        listOrdered: () => void;
        listUnordered: () => void;
        undo: () => void;
        redo: () => void;
        font(e: ChangeEvent<HTMLSelectElement>): void;
        size(e: ChangeEvent<HTMLSelectElement>): void;
        format(e: ChangeEvent<HTMLSelectElement>): void;
        paragraph: () => void;
        blockquote: () => void;
        bold: () => void;
        italic: () => void;
        underline: () => void;
        color(e: ChangeEvent<HTMLInputElement>): void;
        highlight(e: ChangeEvent<HTMLInputElement>): void;
        strikethrough: () => void;
        subscript: () => void;
        superscript: () => void;
        textStyle(e: ChangeEvent<HTMLSelectElement>): void;
        removeFormat: () => void;
        indent: () => void;
        outdent: () => void;
        alignLeft: () => void;
        alignCenter: () => void;
        alignRight: () => void;
        rule: () => void;
        lineHeight(e: ChangeEvent<HTMLSelectElement>): void;
        table(): void;
        link(): void;
        image: () => void | undefined;
        imageUpload(e: ChangeEvent<HTMLInputElement>): void;
        imageGallery: () => void | undefined;
        galleryUpload(e: ChangeEvent<HTMLInputElement>): void;
        video(): void;
        audio(): void;
        math(): void;
        fullscreen: () => void;
        showBlocks(): void;
        codeViewToggle(): void;
        preview(): void;
        print: () => void;
        save(): void;
        template(e: ChangeEvent<HTMLSelectElement>): void;
        dirToggle(): void;
        dirLTR(): void;
        dirRTL(): void;
    };
    handlers: {
        change(e: ChangeEvent<HTMLTextAreaElement>): void;
        input(): void;
        click(e: MouseEvent<HTMLDivElement>): void;
        execCommand(command: string, value?: string): void;
    };
    isCodeView: boolean;
    value: string;
};
export default function WYSIWYG(props: WYSIWYGProps): import("react/jsx-runtime").JSX.Element;
