import Path from './ReadonlyPath.js';
export default class ReadonlyNest {
    withPath;
    _data;
    get data() {
        return this._data;
    }
    get size() {
        return Object.keys(this._data).length;
    }
    constructor(data = {}) {
        this._data = data;
        this.withPath = new Path(this);
    }
    entries() {
        return Object.entries(this._data);
    }
    async forEach(...path) {
        const callback = path.pop();
        let list = this.get(...path);
        if (!list
            || Array.isArray(list) && !list.length
            || typeof list === 'string' && !list.length
            || typeof list === 'object' && !Object.keys(list).length) {
            return false;
        }
        for (let key in list) {
            if ((await callback(list[key], key)) === false) {
                return false;
            }
        }
        return true;
    }
    get(...path) {
        if (!path.length) {
            return this._data;
        }
        if (!this.has(...path)) {
            return undefined;
        }
        const last = path.pop();
        let pointer = this._data;
        path.forEach(step => {
            pointer = pointer[step];
        });
        return pointer[last];
    }
    has(...path) {
        if (!path.length) {
            return false;
        }
        let found = true;
        const last = path.pop();
        let pointer = this._data;
        path.forEach(step => {
            if (!found) {
                return;
            }
            if (typeof pointer[step] !== 'object') {
                found = false;
                return;
            }
            pointer = pointer[step];
        });
        return !(!found || typeof pointer[last] === 'undefined');
    }
    keys() {
        return Object.keys(this._data);
    }
    path(path, defaults) {
        return (this.withPath.get(path, '.') ?? defaults);
    }
    toString(expand = true, ...path) {
        return expand
            ? JSON.stringify(this.get(...path), null, 2)
            : JSON.stringify(this.get(...path));
    }
    values() {
        return Object.values(this._data);
    }
}
