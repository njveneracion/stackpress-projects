export default class QueryString {
    nest;
    constructor(nest) {
        this.nest = nest;
    }
    set(...path) {
        if (path.length < 1) {
            return this.nest;
        }
        const query = path.pop();
        const separator = '~~' + Math.floor(Math.random() * 10000) + '~~';
        query.split(/\&/gi).forEach((filter) => {
            let [key, ...values] = filter.split('=');
            let value = values.join('=');
            key = decodeURIComponent(key);
            value = value.replace(/\+/g, ' ');
            value = decodeURIComponent(value);
            const keys = key
                .replace(/\]\[/g, separator)
                .replace('[', separator)
                .replace(/\[/g, '')
                .replace(/\]/g, '')
                .split(separator)
                .map((key) => {
                const index = Number(key);
                if (key && !isNaN(index) && key.indexOf('.') === -1) {
                    return index;
                }
                return key;
            });
            const paths = path.concat(keys);
            if (/(^\{.*\}$)|(^\[.*\]$)/.test(value)) {
                try {
                    return query.set(...paths, JSON.parse(value));
                }
                catch (e) { }
            }
            if (value.length > 0 && !isNaN(Number(value))) {
                this.nest.set(...paths, Number(value));
            }
            else if (value === 'true') {
                this.nest.set(...paths, true);
            }
            else if (value === 'false') {
                this.nest.set(...paths, false);
            }
            else if (value === 'null') {
                this.nest.set(...paths, null);
            }
            else {
                this.nest.set(...paths, value);
            }
        });
        return this.nest;
    }
}
