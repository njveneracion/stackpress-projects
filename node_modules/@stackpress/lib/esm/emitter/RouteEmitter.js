import ExpressEmitter from './ExpressEmitter.js';
export default class RouteEmitter extends ExpressEmitter {
    routes = new Map;
    constructor() {
        super('/');
    }
    route(method, path, action, priority = 0) {
        const event = this._eventNameFromRoute(method, path);
        return this._listen(event, action, priority);
    }
    use(emitter) {
        if (emitter instanceof RouteEmitter) {
            emitter.routes.forEach((route, event) => this.routes.set(event, route));
        }
        super.use(emitter);
        return this;
    }
    _eventNameFromRoute(method, path) {
        method = method.toUpperCase();
        const fragment = this._toFragment(path);
        if (method === 'ANY') {
            const pattern = fragment !== path ? path : '';
            const expression = `^[A-Z]+ ${fragment}${this.separator}*$`;
            const event = this._eventNameFromExpression(expression, pattern);
            this.routes.set(event, { method, path });
            return event;
        }
        let event = `${method} ${path}`;
        if (fragment !== path) {
            const expression = `^${method} ${fragment}${this.separator}*$`;
            event = this._eventNameFromExpression(expression, event);
            this.routes.set(event, { method, path });
            return event;
        }
        this.routes.set(event, { method, path });
        return event;
    }
}
;
