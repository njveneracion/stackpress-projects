import type { TaskAction, EventMap, EventName, EventMatch, EventExpression } from '../types.js';
import EventEmitter from './EventEmitter.js';
export declare const VARIABLE_NAME: RegExp;
export declare const EVENT_PATTERNS: RegExp;
export default class ExpressEmitter<M extends EventMap> extends EventEmitter<M> {
    readonly separator: string;
    readonly expressions: Map<string, EventExpression>;
    constructor(separator?: string);
    match(event: string): Map<string, EventMatch>;
    on<N extends EventName<M>>(event: N | RegExp, action: TaskAction<M[N]>, priority?: number): this;
    use(emitter: EventEmitter<M>): this;
    protected _eventName<N extends EventName<M>>(event: N | RegExp): N;
    protected _eventNameFromExpression(expression: string, pattern: string): string;
    protected _eventNameFromRegExp(regexp: RegExp, pattern: string): string;
    protected _listen<N extends EventName<M>>(event: N, action: TaskAction<M[N]>, priority?: number): this;
    protected _match(event: string, expression: EventExpression): EventMatch | null;
    protected _toFragment(pattern: string): string;
}
