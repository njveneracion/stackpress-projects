import Status from '../Status.js';
import TaskQueue from '../queue/TaskQueue.js';
export default class EventEmitter {
    _after;
    _before;
    _event;
    _listeners = {};
    set after(action) {
        this._after = action;
    }
    set before(action) {
        this._before = action;
    }
    get event() {
        return this._event;
    }
    get listeners() {
        return Object.freeze({ ...this._listeners });
    }
    clear(event) {
        if (typeof this._listeners[event] !== 'undefined') {
            delete this._listeners[event];
        }
        return this;
    }
    async emit(event, ...args) {
        const queue = this.tasks(event);
        if (queue.size === 0) {
            return Status.NOT_FOUND;
        }
        return await queue.run(...args);
    }
    makeQueue() {
        return new TaskQueue();
    }
    match(event) {
        const matches = new Map();
        if (typeof this.listeners[event] !== 'undefined') {
            const data = { args: [], params: {} };
            matches.set(event, { event, pattern: event, data });
        }
        return matches;
    }
    on(event, action, priority = 0) {
        if (typeof this._listeners[event] === 'undefined') {
            this._listeners[event] = new Set();
        }
        const listeners = this._listeners[event];
        listeners.add({ item: action, priority });
        return this;
    }
    tasks(event) {
        const matches = this.match(event);
        const queue = this.makeQueue();
        for (const [event, match] of matches) {
            if (typeof this._listeners[event] === 'undefined') {
                continue;
            }
            const tasks = this._listeners[event];
            tasks.forEach(task => {
                queue.add(this._task(match, task), task.priority);
            });
        }
        return queue;
    }
    unbind(event, action) {
        const set = this._listeners[event];
        if (set) {
            set.forEach(task => {
                if (task.item === action) {
                    set.delete(task);
                }
            });
        }
        return this;
    }
    use(emitter) {
        for (const event in emitter.listeners) {
            const tasks = emitter.listeners[event];
            if (typeof tasks === 'undefined') {
                continue;
            }
            for (const { item, priority } of tasks) {
                this.on(event, item, priority);
            }
        }
        return this;
    }
    _task(match, task) {
        return async (...args) => {
            this._event = { ...match, ...task, args, action: task.item };
            if (typeof this._before === 'function'
                && await this._before(this._event) === false) {
                return false;
            }
            if (await task.item(...args) === false) {
                return false;
            }
            if (typeof this._after === 'function'
                && await this._after(this._event) === false) {
                return false;
            }
        };
    }
}
