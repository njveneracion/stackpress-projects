import type { Trace, NestedObject, ErrorResponse, StatusResponse } from './types.js';
export default class Exception extends Error {
    static for(message: string, ...values: unknown[]): Exception;
    static forResponse(response: Partial<StatusResponse>, message?: string): Exception;
    static forErrors(errors: NestedObject<string>): Exception;
    static require(condition: boolean, message: string, ...values: any[]): void;
    static try<T = unknown, E = Exception>(callback: () => T): {
        catch: (catcher: (error: E, kind: string) => T) => T;
    };
    static upgrade(error: Error, code?: number): Exception;
    protected _code: number;
    protected _status: string;
    protected _type: string;
    protected _errors: NestedObject<string | string[]>;
    protected _start: number;
    protected _end: number;
    get code(): number;
    get end(): number;
    get errors(): {
        [x: string]: string | string[] | NestedObject<string | string[]>;
        [x: number]: string | string[] | NestedObject<string | string[]>;
    };
    get start(): number;
    get type(): string;
    constructor(message: string, code?: number);
    toJSON(): string;
    toResponse(start?: number, end?: number): ErrorResponse;
    trace(start?: number, end?: number): Trace[];
    withCode(code: number): this;
    withErrors(errors: NestedObject<string | string[]>): this;
    withPosition(start: number, end: number): this;
}
