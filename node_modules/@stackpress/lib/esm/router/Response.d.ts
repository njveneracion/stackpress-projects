import type { Body, Trace, NestedObject, CallableMap, CallableNest, ResponseStatus, StatusResponse, ErrorResponse, CallableSession, ResponseDispatcher, ResponseOptions } from '../types.js';
import Exception from '../Exception.js';
export default class Response<S = unknown> {
    readonly headers: CallableMap<string, string | string[]>;
    readonly session: CallableSession;
    readonly errors: CallableNest<NestedObject<string | string[]>>;
    readonly data: CallableNest;
    protected _body: Body | null;
    protected _code: number;
    protected _dispatcher?: ResponseDispatcher<S>;
    protected _error?: string;
    protected _mimetype?: string;
    protected _resource?: S;
    protected _sent: boolean;
    protected _stack?: Trace[];
    protected _status: string;
    protected _total: number;
    get body(): Body | null;
    get code(): number;
    get error(): string | undefined;
    get redirected(): boolean;
    get sent(): boolean;
    get stack(): Trace[] | undefined;
    get status(): string;
    get total(): number;
    get mimetype(): string | undefined;
    get resource(): S;
    get type(): "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function" | "null" | "buffer" | "uint8array" | "array";
    set body(value: Body | null);
    set code(code: number);
    set dispatcher(dispatcher: ResponseDispatcher<S>);
    set error(error: string);
    set resource(resource: S);
    set stack(stack: Trace[]);
    set status(status: ResponseStatus);
    set total(total: number);
    set mimetype(value: string);
    constructor(init?: Partial<ResponseOptions<S>>);
    dispatch(): Promise<S>;
    fromStatusResponse<T = unknown>(response: Partial<StatusResponse<T>>): this;
    redirect(url: string, code?: number, status?: string): this;
    setBody(type: string, body: Body, code?: number, status?: string): this;
    setError(error: string | ErrorResponse, errors?: NestedObject<string | string[]>, stack?: Trace[], code?: number, status?: string): this;
    setHTML(body: string, code?: number, status?: string): this;
    setJSON(body: string | NestedObject, code?: number, status?: string): this;
    setResults(body: NestedObject, code?: number, status?: string): this;
    setRows(body: NestedObject[], total?: number, code?: number, status?: string): this;
    setStatus(code: number, message?: string): this;
    setXML(body: string, code?: number, status?: string): this;
    stop(): this;
    toException(message?: string): Exception;
    toStatusResponse<T = unknown>(): Partial<StatusResponse<T>>;
}
