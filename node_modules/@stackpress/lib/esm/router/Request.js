import map from '../data/map.js';
import cookie from '../data/cookie.js';
import { nest, isObject, objectFromQuery } from '../data/Nest.js';
import { session } from './Session.js';
export default class Request {
    data;
    headers;
    query;
    post;
    session;
    url = new URL('http://unknownhost/');
    method;
    _body;
    _mimetype;
    _loaded = false;
    _loader;
    _resource;
    get body() {
        return typeof this._body !== 'undefined' ? this._body : null;
    }
    get loaded() {
        return this._loaded;
    }
    get mimetype() {
        return this._mimetype;
    }
    get resource() {
        return this._resource;
    }
    get type() {
        if (this._body instanceof Buffer) {
            return 'buffer';
        }
        else if (this._body instanceof Uint8Array) {
            return 'uint8array';
        }
        else if (isObject(this._body)) {
            return 'object';
        }
        else if (Array.isArray(this._body)) {
            return 'array';
        }
        else if (typeof this._body === 'string') {
            return 'string';
        }
        else if (this._body === null) {
            return 'null';
        }
        return typeof this._body;
    }
    set loader(loader) {
        this._loader = loader;
    }
    constructor(init = {}) {
        this.data = nest();
        this.url = init.url instanceof URL ? init.url
            : typeof init.url === 'string' ? new URL(init.url)
                : new URL('http://unknownhost/');
        this.headers = map(init.headers instanceof Map
            ? Array.from(init.headers.entries())
            : isObject(init.headers)
                ? Object.entries(init.headers)
                : undefined);
        this.session = session(init.session instanceof Map
            ? Array.from(init.session.entries())
            : isObject(init.session)
                ? Object.entries(init.session)
                : this.headers.has('cookie')
                    ? Object.entries(cookie.parse(this.headers.get('cookie'))).filter(([_key, value]) => typeof value !== 'undefined')
                    : undefined);
        this.query = nest(typeof init.query === 'string'
            ? objectFromQuery(init.query)
            : init.query instanceof Map
                ? Object.fromEntries(init.query)
                : isObject(init.query)
                    ? init.query
                    : this.url.search
                        ? objectFromQuery(this.url.search)
                        : Object.fromEntries(this.url.searchParams.entries()));
        this.post = nest(init.post instanceof Map
            ? Object.fromEntries(init.post)
            : isObject(init.post)
                ? init.post
                : undefined);
        this.method = init.method || 'GET';
        this._body = init.body || null;
        this._mimetype = init.mimetype || 'text/plain';
        this._resource = init.resource;
        if (this.query.size) {
            this.data.set(this.query.get());
        }
        if (this.post.size) {
            this.data.set(this.post.get());
        }
        if (init.data instanceof Map) {
            this.data.set(Object.fromEntries(init.data));
        }
        else if (isObject(init.data)) {
            this.data.set(init.data);
        }
    }
    async load() {
        if (this._loaded) {
            return this;
        }
        if (typeof this._loader === 'function') {
            const data = await this._loader(this);
            if (data) {
                if (data.body) {
                    this._body = data.body;
                }
                if (data.post instanceof Map) {
                    const post = Object.fromEntries(Object.entries(data.post));
                    this.post.set(post);
                    this.data.set(post);
                }
                else if (isObject(data.post)) {
                    this.post.set(data.post);
                    this.data.set(data.post);
                }
            }
        }
        this._loaded = true;
        return this;
    }
}
export function withUnknownHost(url) {
    if (url.indexOf('/') !== 0) {
        url = '/' + url;
    }
    return `http://unknownhost${url}`;
}
;
