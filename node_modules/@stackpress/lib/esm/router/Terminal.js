import { input } from '@inquirer/prompts';
import { objectFromArgs } from '../data/Nest.js';
import Router from './Router.js';
export function control(brand = '') {
    const controls = {
        brand,
        error(message, variables = []) {
            this.output(message, variables, '\x1b[31m%s\x1b[0m');
        },
        info(message, variables = []) {
            this.output(message, variables, '\x1b[34m%s\x1b[0m');
        },
        async input(question, answer) {
            return await input({
                message: question,
                default: answer,
                required: typeof answer !== 'string'
            });
        },
        output(message, variables = [], color) {
            for (const variable of variables) {
                message = message.replace('%s', variable);
            }
            message = `${this.brand} ${message}`.trim();
            if (color) {
                console.log(color, message);
                return;
            }
            console.log(message);
        },
        success(message, variables = []) {
            this.output(message, variables, '\x1b[32m%s\x1b[0m');
        },
        system(message, variables = []) {
            this.output(message, variables, '\x1b[35m%s\x1b[0m');
        },
        warning(message, variables = []) {
            this.output(message, variables, '\x1b[33m%s\x1b[0m');
        }
    };
    return controls;
}
export default class Terminal extends Router {
    command;
    _control;
    _args;
    _data;
    get args() {
        return [...this._args];
    }
    get brand() {
        return this._control.brand;
    }
    get control() {
        return Object.freeze(this._control);
    }
    get data() {
        if (!this._data) {
            this._data = objectFromArgs(this._args.join(' '));
        }
        return { ...this._data };
    }
    constructor(args, brand = '') {
        super();
        this.command = args[0] || '';
        this._args = args.slice(1);
        this._control = control(brand);
    }
    expect(flags, defaults) {
        for (const flag of flags) {
            if (this.data[flag]) {
                return this.data[flag];
            }
        }
        return defaults;
    }
    run() {
        const req = this.request({ data: this.data });
        const res = this.response();
        return this.resolve(this.command, req, res);
    }
}
