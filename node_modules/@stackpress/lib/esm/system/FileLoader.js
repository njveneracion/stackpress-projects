import * as path from 'node:path';
import { pathToFileURL } from 'node:url';
import Exception from '../Exception.js';
export default class FileLoader {
    _cwd;
    _fs;
    get cwd() {
        return this._cwd;
    }
    get fs() {
        return this._fs;
    }
    constructor(fs, cwd) {
        this._cwd = cwd || process.cwd();
        this._fs = fs;
    }
    async absolute(pathname, pwd = this._cwd) {
        let absolute = path
            .resolve(pwd, pathname)
            .replaceAll(path.sep + path.sep, path.sep);
        if (pathname.startsWith('@/')) {
            absolute = path.resolve(this._cwd, pathname.substring(2));
        }
        else if (/^\.{1,2}(\/|\\)/.test(pathname)) {
            absolute = path.resolve(pwd, pathname);
        }
        else if (!path.isAbsolute(pathname)) {
            try {
                const modules = await this.modules(pathname, pwd);
                absolute = path.resolve(modules, pathname);
            }
            catch (e) {
            }
        }
        try {
            return await this._fs.realpath(absolute);
        }
        catch (e) { }
        return absolute;
    }
    basepath(pathname) {
        const extname = path.extname(pathname);
        if (extname.length) {
            return pathname.substring(0, pathname.length - extname.length);
        }
        return pathname;
    }
    async lib(pwd = this._cwd) {
        return this.modules(path.join('@stackpress', 'lib'), pwd);
    }
    async modules(pathname, pwd = this._cwd, meta = true) {
        if (meta) {
            try {
                const absolute = require.resolve(pathname);
                if (absolute.includes('/node_modules/')) {
                    const end = absolute.lastIndexOf('/node_modules/') + 13;
                    return absolute.substring(0, end);
                }
            }
            catch (e) {
            }
            if (typeof globalThis.import !== 'undefined') {
                try {
                    const url = globalThis.import.meta.resolve(pathname, `file://${pwd}/`);
                    const resolved = (new URL(url)).pathname;
                    const absolute = await this._fs.realpath(resolved);
                    if (absolute.includes('/node_modules/')) {
                        const end = absolute.lastIndexOf('/node_modules/') + 13;
                        return absolute.substring(0, end);
                    }
                }
                catch (e) {
                }
            }
        }
        const module = path.resolve(pwd, 'node_modules', pathname);
        if (await this._fs.exists(module)) {
            return path.resolve(pwd, 'node_modules');
        }
        const parent = path.dirname(pwd);
        if (parent === pwd) {
            throw Exception.for('Cannot find %s in any node_modules', pathname);
        }
        return await this.modules(pathname, parent, false);
    }
    async import(pathname, getDefault = false) {
        const absolute = await this.absolute(pathname);
        if (path.extname(absolute) === '.json') {
            const contents = await this._fs.readFile(absolute, 'utf8');
            try {
                return JSON.parse(contents) || {};
            }
            catch (e) { }
            return {};
        }
        const imports = await import(pathToFileURL(absolute).href);
        if (getDefault) {
            return imports.default;
        }
        return imports;
    }
    relative(pathname, require, withExtname = false) {
        if (!withExtname) {
            const extname = path.extname(require);
            if (extname.length) {
                require = require.substring(0, require.length - extname.length);
            }
        }
        const relative = path.relative(path.dirname(pathname), require);
        return relative.startsWith('.') ? relative : `./${relative}`;
    }
    async resolve(pathname, pwd = this._cwd, exists = false) {
        const absolute = await this.absolute(pathname, pwd);
        if (await this._fs.exists(absolute)) {
            return absolute;
        }
        else if (exists) {
            throw Exception.for(`Cannot resolve '${pathname}'`);
        }
        return null;
    }
    async resolveFile(pathname, extnames = ['.js', '.json'], pwd = this._cwd, exists = false) {
        const absolute = await this.absolute(pathname, pwd);
        if (await this._fileExists(absolute)) {
            return absolute;
        }
        for (const extname of extnames) {
            let file = await this.absolute(pathname + extname, pwd);
            if (await this._fileExists(file)) {
                return file;
            }
            const index = path.join(pathname, 'index' + extname);
            file = await this.absolute(index, pwd);
            if (await this._fileExists(file)) {
                return file;
            }
        }
        if (exists) {
            throw Exception.for(`Cannot resolve '${pathname}'`);
        }
        return null;
    }
    async _fileExists(pathname) {
        if (!(await this._fs.exists(pathname))) {
            return false;
        }
        const stats = await this._fs.stat(pathname);
        return stats && stats.isFile();
    }
}
