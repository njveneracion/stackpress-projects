"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class Reflection {
    static stack() {
        if (typeof Error.stackTraceLimit === 'undefined'
            || typeof Error.prepareStackTrace === 'undefined') {
            return [];
        }
        const trace = Error.prepareStackTrace;
        Error.prepareStackTrace = (_, stack) => stack;
        const stack = new Error().stack;
        Error.prepareStackTrace = trace;
        if (stack !== null && typeof stack === 'object') {
            return stack.map(trace => new Reflection(trace)).slice(1);
        }
        return [];
    }
    ;
    get column() {
        return this.trace.getColumnNumber();
    }
    get evalOrigin() {
        return this.trace.getEvalOrigin();
    }
    get file() {
        return this.trace.getFileName();
    }
    get func() {
        return this.trace.getFunction();
    }
    get funcName() {
        return this.trace.getFunctionName();
    }
    get line() {
        return this.trace.getLineNumber();
    }
    get method() {
        return this.trace.getMethodName();
    }
    get promiseIndex() {
        return this.trace.getPromiseIndex();
    }
    get self() {
        return this.trace.getThis();
    }
    get type() {
        return this.trace.getTypeName();
    }
    constructor(trace) {
        this.trace = trace;
    }
    isAsync() {
        return this.trace.isAsync();
    }
    isConstructor() {
        return this.trace.isConstructor();
    }
    isEval() {
        return this.trace.isEval();
    }
    isNative() {
        return this.trace.isNative();
    }
    isPromiseAll() {
        return this.trace.isPromiseAll();
    }
    isTopLevel() {
        return this.trace.isToplevel();
    }
    toObject() {
        return {
            column: this.column,
            evalOrigin: this.evalOrigin,
            file: this.file,
            func: this.func,
            funcName: this.funcName,
            line: this.line,
            method: this.method,
            promiseIndex: this.promiseIndex,
            self: this.self,
            type: this.type,
            isAsync: this.isAsync(),
            isConstructor: this.isConstructor(),
            isEval: this.isEval(),
            isNative: this.isNative(),
            isPromiseAll: this.isPromiseAll(),
            isTopLevel: this.isTopLevel()
        };
    }
}
exports.default = Reflection;
