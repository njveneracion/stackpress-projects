"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withUnknownHost = withUnknownHost;
const map_js_1 = __importDefault(require("../data/map.js"));
const cookie_js_1 = __importDefault(require("../data/cookie.js"));
const Nest_js_1 = require("../data/Nest.js");
const Session_js_1 = require("./Session.js");
class Request {
    get body() {
        return typeof this._body !== 'undefined' ? this._body : null;
    }
    get loaded() {
        return this._loaded;
    }
    get mimetype() {
        return this._mimetype;
    }
    get resource() {
        return this._resource;
    }
    get type() {
        if (this._body instanceof Buffer) {
            return 'buffer';
        }
        else if (this._body instanceof Uint8Array) {
            return 'uint8array';
        }
        else if ((0, Nest_js_1.isObject)(this._body)) {
            return 'object';
        }
        else if (Array.isArray(this._body)) {
            return 'array';
        }
        else if (typeof this._body === 'string') {
            return 'string';
        }
        else if (this._body === null) {
            return 'null';
        }
        return typeof this._body;
    }
    set loader(loader) {
        this._loader = loader;
    }
    constructor(init = {}) {
        this.url = new URL('http://unknownhost/');
        this._loaded = false;
        this.data = (0, Nest_js_1.nest)();
        this.url = init.url instanceof URL ? init.url
            : typeof init.url === 'string' ? new URL(init.url)
                : new URL('http://unknownhost/');
        this.headers = (0, map_js_1.default)(init.headers instanceof Map
            ? Array.from(init.headers.entries())
            : (0, Nest_js_1.isObject)(init.headers)
                ? Object.entries(init.headers)
                : undefined);
        this.session = (0, Session_js_1.session)(init.session instanceof Map
            ? Array.from(init.session.entries())
            : (0, Nest_js_1.isObject)(init.session)
                ? Object.entries(init.session)
                : this.headers.has('cookie')
                    ? Object.entries(cookie_js_1.default.parse(this.headers.get('cookie'))).filter(([_key, value]) => typeof value !== 'undefined')
                    : undefined);
        this.query = (0, Nest_js_1.nest)(typeof init.query === 'string'
            ? (0, Nest_js_1.objectFromQuery)(init.query)
            : init.query instanceof Map
                ? Object.fromEntries(init.query)
                : (0, Nest_js_1.isObject)(init.query)
                    ? init.query
                    : this.url.search
                        ? (0, Nest_js_1.objectFromQuery)(this.url.search)
                        : Object.fromEntries(this.url.searchParams.entries()));
        this.post = (0, Nest_js_1.nest)(init.post instanceof Map
            ? Object.fromEntries(init.post)
            : (0, Nest_js_1.isObject)(init.post)
                ? init.post
                : undefined);
        this.method = init.method || 'GET';
        this._body = init.body || null;
        this._mimetype = init.mimetype || 'text/plain';
        this._resource = init.resource;
        if (this.query.size) {
            this.data.set(this.query.get());
        }
        if (this.post.size) {
            this.data.set(this.post.get());
        }
        if (init.data instanceof Map) {
            this.data.set(Object.fromEntries(init.data));
        }
        else if ((0, Nest_js_1.isObject)(init.data)) {
            this.data.set(init.data);
        }
    }
    load() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._loaded) {
                return this;
            }
            if (typeof this._loader === 'function') {
                const data = yield this._loader(this);
                if (data) {
                    if (data.body) {
                        this._body = data.body;
                    }
                    if (data.post instanceof Map) {
                        const post = Object.fromEntries(Object.entries(data.post));
                        this.post.set(post);
                        this.data.set(post);
                    }
                    else if ((0, Nest_js_1.isObject)(data.post)) {
                        this.post.set(data.post);
                        this.data.set(data.post);
                    }
                }
            }
            this._loaded = true;
            return this;
        });
    }
}
exports.default = Request;
function withUnknownHost(url) {
    if (url.indexOf('/') !== 0) {
        url = '/' + url;
    }
    return `http://unknownhost${url}`;
}
;
