import type { Body, Method, CallableMap, CallableNest, CallableSession, RequestLoader, RequestOptions } from '../types.js';
export default class Request<R = unknown> {
    readonly data: CallableNest;
    readonly headers: CallableMap<string, string | string[]>;
    readonly query: CallableNest;
    readonly post: CallableNest;
    readonly session: CallableSession;
    readonly url: URL;
    readonly method: Method;
    protected _body: Body | null;
    protected _mimetype: string;
    protected _loaded: boolean;
    protected _loader?: RequestLoader<R>;
    protected _resource?: R;
    get body(): Body | null;
    get loaded(): boolean;
    get mimetype(): string;
    get resource(): R;
    get type(): "string" | "number" | "bigint" | "boolean" | "symbol" | "undefined" | "object" | "function" | "null" | "buffer" | "uint8array" | "array";
    set loader(loader: RequestLoader<R>);
    constructor(init?: Partial<RequestOptions<R>>);
    load(): Promise<this>;
}
export declare function withUnknownHost(url: string): string;
