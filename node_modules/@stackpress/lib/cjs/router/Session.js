"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WriteSession = exports.ReadSession = void 0;
exports.session = session;
const ReadonlyMap_js_1 = __importDefault(require("../data/ReadonlyMap.js"));
class ReadSession extends ReadonlyMap_js_1.default {
    get data() {
        return Object.fromEntries(this._map);
    }
}
exports.ReadSession = ReadSession;
class WriteSession extends ReadSession {
    constructor() {
        super(...arguments);
        this.revisions = new Map();
    }
    clear() {
        for (const name of this.keys()) {
            this.revisions.set(name, { action: 'remove' });
        }
        this._map.clear();
    }
    delete(name) {
        this.revisions.set(name, { action: 'remove' });
        return this._map.delete(name);
    }
    set(name, value) {
        this.revisions.set(name, { action: 'set', value });
        return this._map.set(name, value);
    }
}
exports.WriteSession = WriteSession;
function session(data) {
    const store = new WriteSession(data);
    const callable = Object.assign((name) => store.get(name), {
        clear: () => store.clear(),
        delete: (name) => store.delete(name),
        entries: () => store.entries(),
        forEach: (callback) => store.forEach(callback),
        get: (name) => store.get(name),
        has: (name) => store.has(name),
        keys: () => store.keys(),
        set: (name, value) => store.set(name, value),
        values: () => store.values()
    });
    Object.defineProperty(callable, 'size', { get: () => store.size });
    Object.defineProperty(callable, 'data', { get: () => store.data });
    Object.defineProperty(callable, 'revisions', { get: () => store.revisions });
    return callable;
}
