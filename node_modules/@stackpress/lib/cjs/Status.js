"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.codes = void 0;
exports.codes = {
    CONTINUE: { code: 100, status: 'Continue' },
    PROCESSING: { code: 102, status: 'Processing' },
    OK: { code: 200, status: 'OK' },
    CREATED: { code: 201, status: 'Created' },
    ACCEPTED: { code: 202, status: 'Accepted' },
    EMPTY: { code: 204, status: 'No Content' },
    RESET: { code: 205, status: 'Reset Content' },
    PARTIAL: { code: 206, status: 'Partial Content' },
    MOVED: { code: 301, status: 'Moved Permanently' },
    FOUND: { code: 302, status: 'Found' },
    REDIRECT: { code: 303, status: 'See Other' },
    CACHE: { code: 304, status: 'Not Modified' },
    TEMPORARY: { code: 307, status: 'Temporary Redirect' },
    PERMANENT: { code: 308, status: 'Permanent Redirect' },
    ABORT: { code: 309, status: 'Aborted' },
    BAD_REQUEST: { code: 400, status: 'Bad Request' },
    UNAUTHORIZED: { code: 401, status: 'Unauthorized' },
    FORBIDDEN: { code: 403, status: 'Forbidden' },
    NOT_FOUND: { code: 404, status: 'Not Found' },
    BAD_METHOD: { code: 405, status: 'Method Not Allowed' },
    NOT_ACCEPTABLE: { code: 406, status: 'Not Acceptable' },
    REQUEST_TIMEOUT: { code: 408, status: 'Request Timeout' },
    CONFLICT: { code: 409, status: 'Conflict' },
    GONE: { code: 410, status: 'Gone' },
    LENGTH_REQUIRED: { code: 411, status: 'Length Required' },
    TOO_LARGE: { code: 413, status: 'Payload Too Large' },
    TOO_LONG: { code: 414, status: 'URI Too Long' },
    UNSUPPORTED_TYPE: { code: 415, status: 'Unsupported Media Type' },
    BAD_RANGE: { code: 416, status: 'Range Not Satisfiable' },
    BAD_EXPECTATION: { code: 417, status: 'Expectation Failed' },
    MISDIRECTED: { code: 421, status: 'Misdirected Request' },
    UNPROCESSABLE: { code: 422, status: 'Unprocessable Content' },
    LOCKED: { code: 423, status: 'Locked' },
    BAD_DEPENDENCY: { code: 424, status: 'Failed Dependency' },
    UPGRADE_REQUIRED: { code: 426, status: 'Upgrade Required' },
    BAD_PRECONDITION: { code: 428, status: 'Precondition Required' },
    TOO_MANY: { code: 429, status: 'Too Many Requests' },
    HEADER_TOO_LARGE: { code: 431, status: 'Request Header Fields Too Large' },
    LEGAL_REASONS: { code: 451, status: 'Unavailable For Legal Reasons' },
    ERROR: { code: 500, status: 'Internal Server Error' },
    NOT_IMPLEMENTED: { code: 501, status: 'Not Implemented' },
    BAD_GATEWAY: { code: 502, status: 'Bad Gateway' },
    UNAVAILABLE: { code: 503, status: 'Service Unavailable' },
    RESPONSE_TIMEOUT: { code: 504, status: 'Gateway Timeout' },
    BAD_VERSION: { code: 505, status: 'HTTP Version Not Supported' },
    INSUFFICIENT_STORAGE: { code: 507, status: 'Insufficient Storage' },
    INFINITE_LOOP: { code: 508, status: 'Loop Detected' },
    NETWORK_AUTHENTICATION_REQUIRED: { code: 511, status: 'Network Authentication Required' }
};
const Status = {
    CONTINUE: exports.codes.CONTINUE,
    PROCESSING: exports.codes.PROCESSING,
    OK: exports.codes.OK,
    CREATED: exports.codes.CREATED,
    ACCEPTED: exports.codes.ACCEPTED,
    EMPTY: exports.codes.EMPTY,
    RESET: exports.codes.RESET,
    PARTIAL: exports.codes.PARTIAL,
    MOVED: exports.codes.MOVED,
    FOUND: exports.codes.FOUND,
    REDIRECT: exports.codes.REDIRECT,
    CACHE: exports.codes.CACHE,
    TEMPORARY: exports.codes.TEMPORARY,
    PERMANENT: exports.codes.PERMANENT,
    ABORT: exports.codes.ABORT,
    BAD_REQUEST: exports.codes.BAD_REQUEST,
    UNAUTHORIZED: exports.codes.UNAUTHORIZED,
    FORBIDDEN: exports.codes.FORBIDDEN,
    NOT_FOUND: exports.codes.NOT_FOUND,
    BAD_METHOD: exports.codes.BAD_METHOD,
    NOT_ACCEPTABLE: exports.codes.NOT_ACCEPTABLE,
    REQUEST_TIMEOUT: exports.codes.REQUEST_TIMEOUT,
    CONFLICT: exports.codes.CONFLICT,
    GONE: exports.codes.GONE,
    LENGTH_REQUIRED: exports.codes.LENGTH_REQUIRED,
    TOO_LARGE: exports.codes.TOO_LARGE,
    TOO_LONG: exports.codes.TOO_LONG,
    UNSUPPORTED_TYPE: exports.codes.UNSUPPORTED_TYPE,
    BAD_RANGE: exports.codes.BAD_RANGE,
    BAD_EXPECTATION: exports.codes.BAD_EXPECTATION,
    MISDIRECTED: exports.codes.MISDIRECTED,
    UNPROCESSABLE: exports.codes.UNPROCESSABLE,
    LOCKED: exports.codes.LOCKED,
    BAD_DEPENDENCY: exports.codes.BAD_DEPENDENCY,
    UPGRADE_REQUIRED: exports.codes.UPGRADE_REQUIRED,
    BAD_PRECONDITION: exports.codes.BAD_PRECONDITION,
    TOO_MANY: exports.codes.TOO_MANY,
    HEADER_TOO_LARGE: exports.codes.HEADER_TOO_LARGE,
    LEGAL_REASONS: exports.codes.LEGAL_REASONS,
    ERROR: exports.codes.ERROR,
    NOT_IMPLEMENTED: exports.codes.NOT_IMPLEMENTED,
    BAD_GATEWAY: exports.codes.BAD_GATEWAY,
    UNAVAILABLE: exports.codes.UNAVAILABLE,
    RESPONSE_TIMEOUT: exports.codes.RESPONSE_TIMEOUT,
    BAD_VERSION: exports.codes.BAD_VERSION,
    INSUFFICIENT_STORAGE: exports.codes.INSUFFICIENT_STORAGE,
    INFINITE_LOOP: exports.codes.INFINITE_LOOP,
    NETWORK_AUTHENTICATION_REQUIRED: exports.codes.NETWORK_AUTHENTICATION_REQUIRED,
    find(status) {
        return Object.values(exports.codes).find(response => typeof response !== 'function' && response.status === status);
    },
    get(code) {
        return Object.values(exports.codes).find(response => typeof response !== 'function' && response.code === code);
    }
};
exports.default = Status;
