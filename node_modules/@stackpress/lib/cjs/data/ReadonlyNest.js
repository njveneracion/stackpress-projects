"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ReadonlyPath_js_1 = __importDefault(require("./ReadonlyPath.js"));
class ReadonlyNest {
    get data() {
        return this._data;
    }
    get size() {
        return Object.keys(this._data).length;
    }
    constructor(data = {}) {
        this._data = data;
        this.withPath = new ReadonlyPath_js_1.default(this);
    }
    entries() {
        return Object.entries(this._data);
    }
    forEach(...path) {
        return __awaiter(this, void 0, void 0, function* () {
            const callback = path.pop();
            let list = this.get(...path);
            if (!list
                || Array.isArray(list) && !list.length
                || typeof list === 'string' && !list.length
                || typeof list === 'object' && !Object.keys(list).length) {
                return false;
            }
            for (let key in list) {
                if ((yield callback(list[key], key)) === false) {
                    return false;
                }
            }
            return true;
        });
    }
    get(...path) {
        if (!path.length) {
            return this._data;
        }
        if (!this.has(...path)) {
            return undefined;
        }
        const last = path.pop();
        let pointer = this._data;
        path.forEach(step => {
            pointer = pointer[step];
        });
        return pointer[last];
    }
    has(...path) {
        if (!path.length) {
            return false;
        }
        let found = true;
        const last = path.pop();
        let pointer = this._data;
        path.forEach(step => {
            if (!found) {
                return;
            }
            if (typeof pointer[step] !== 'object') {
                found = false;
                return;
            }
            pointer = pointer[step];
        });
        return !(!found || typeof pointer[last] === 'undefined');
    }
    keys() {
        return Object.keys(this._data);
    }
    path(path, defaults) {
        var _a;
        return ((_a = this.withPath.get(path, '.')) !== null && _a !== void 0 ? _a : defaults);
    }
    toString(expand = true, ...path) {
        return expand
            ? JSON.stringify(this.get(...path), null, 2)
            : JSON.stringify(this.get(...path));
    }
    values() {
        return Object.values(this._data);
    }
}
exports.default = ReadonlyNest;
