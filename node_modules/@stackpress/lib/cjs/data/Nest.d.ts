import type { Key, NestedObject, UnknownNest, CallableNest } from '../types.js';
import ArgString from './processors/ArgString.js';
import PathString from './processors/PathString.js';
import QueryString from './processors/QueryString.js';
import FormData from './processors/FormData.js';
import ReadonlyNest from './ReadonlyNest.js';
export default class Nest<M extends UnknownNest = UnknownNest> extends ReadonlyNest<M> {
    withArgs: ArgString;
    withFormData: FormData;
    withPath: PathString;
    withQuery: QueryString;
    get data(): M;
    set data(data: M);
    constructor(data?: M);
    clear(): this;
    delete(...path: Key[]): this;
    set(...path: any[]): this;
}
export declare function formDataToObject(type: string, body: string): UnknownNest;
export declare function isObject(value: unknown): boolean;
export declare function makeArray(object: NestedObject<unknown>): any[];
export declare function makeObject(array: any[]): NestedObject<unknown>;
export declare function objectFromArgs(args: string): UnknownNest;
export declare function objectFromJson(json: string): Record<string, unknown>;
export declare function objectFromQuery(query: string): UnknownNest;
export declare function objectFromFormData(data: string): UnknownNest;
export declare function shouldBeAnArray(object: NestedObject<unknown> | null | undefined): boolean;
export declare function nest<M extends UnknownNest = UnknownNest>(data?: M): CallableNest<M>;
