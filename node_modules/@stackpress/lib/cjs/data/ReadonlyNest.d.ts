import type { Key, UnknownNest, TypeOf } from '../types.js';
import Path from './ReadonlyPath.js';
export default class ReadonlyNest<M extends UnknownNest = UnknownNest> {
    withPath: Path;
    protected _data: M;
    get data(): M;
    get size(): number;
    constructor(data?: M);
    entries(): [string, unknown][];
    forEach(...path: any[]): Promise<boolean>;
    get<T extends UnknownNest = M>(): T;
    get<T = any>(...path: Key[]): T;
    has(...path: Key[]): boolean;
    keys(): string[];
    path<T = any>(path: string, defaults?: TypeOf<T>): TypeOf<T>;
    toString(expand?: boolean, ...path: Key[]): string;
    values(): unknown[];
}
