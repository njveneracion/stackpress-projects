"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("node:path"));
const node_url_1 = require("node:url");
const Exception_js_1 = __importDefault(require("../Exception.js"));
class FileLoader {
    get cwd() {
        return this._cwd;
    }
    get fs() {
        return this._fs;
    }
    constructor(fs, cwd) {
        this._cwd = cwd || process.cwd();
        this._fs = fs;
    }
    absolute(pathname_1) {
        return __awaiter(this, arguments, void 0, function* (pathname, pwd = this._cwd) {
            let absolute = path
                .resolve(pwd, pathname)
                .replaceAll(path.sep + path.sep, path.sep);
            if (pathname.startsWith('@/')) {
                absolute = path.resolve(this._cwd, pathname.substring(2));
            }
            else if (/^\.{1,2}(\/|\\)/.test(pathname)) {
                absolute = path.resolve(pwd, pathname);
            }
            else if (!path.isAbsolute(pathname)) {
                try {
                    const modules = yield this.modules(pathname, pwd);
                    absolute = path.resolve(modules, pathname);
                }
                catch (e) {
                }
            }
            try {
                return yield this._fs.realpath(absolute);
            }
            catch (e) { }
            return absolute;
        });
    }
    basepath(pathname) {
        const extname = path.extname(pathname);
        if (extname.length) {
            return pathname.substring(0, pathname.length - extname.length);
        }
        return pathname;
    }
    lib() {
        return __awaiter(this, arguments, void 0, function* (pwd = this._cwd) {
            return this.modules(path.join('@stackpress', 'lib'), pwd);
        });
    }
    modules(pathname_1) {
        return __awaiter(this, arguments, void 0, function* (pathname, pwd = this._cwd, meta = true) {
            if (meta) {
                try {
                    const absolute = require.resolve(pathname);
                    if (absolute.includes('/node_modules/')) {
                        const end = absolute.lastIndexOf('/node_modules/') + 13;
                        return absolute.substring(0, end);
                    }
                }
                catch (e) {
                }
                if (typeof globalThis.import !== 'undefined') {
                    try {
                        const url = globalThis.import.meta.resolve(pathname, `file://${pwd}/`);
                        const resolved = (new URL(url)).pathname;
                        const absolute = yield this._fs.realpath(resolved);
                        if (absolute.includes('/node_modules/')) {
                            const end = absolute.lastIndexOf('/node_modules/') + 13;
                            return absolute.substring(0, end);
                        }
                    }
                    catch (e) {
                    }
                }
            }
            const module = path.resolve(pwd, 'node_modules', pathname);
            if (yield this._fs.exists(module)) {
                return path.resolve(pwd, 'node_modules');
            }
            const parent = path.dirname(pwd);
            if (parent === pwd) {
                throw Exception_js_1.default.for('Cannot find %s in any node_modules', pathname);
            }
            return yield this.modules(pathname, parent, false);
        });
    }
    import(pathname_1) {
        return __awaiter(this, arguments, void 0, function* (pathname, getDefault = false) {
            const absolute = yield this.absolute(pathname);
            if (path.extname(absolute) === '.json') {
                const contents = yield this._fs.readFile(absolute, 'utf8');
                try {
                    return JSON.parse(contents) || {};
                }
                catch (e) { }
                return {};
            }
            const imports = yield Promise.resolve(`${(0, node_url_1.pathToFileURL)(absolute).href}`).then(s => __importStar(require(s)));
            if (getDefault) {
                return imports.default;
            }
            return imports;
        });
    }
    relative(pathname, require, withExtname = false) {
        if (!withExtname) {
            const extname = path.extname(require);
            if (extname.length) {
                require = require.substring(0, require.length - extname.length);
            }
        }
        const relative = path.relative(path.dirname(pathname), require);
        return relative.startsWith('.') ? relative : `./${relative}`;
    }
    resolve(pathname_1) {
        return __awaiter(this, arguments, void 0, function* (pathname, pwd = this._cwd, exists = false) {
            const absolute = yield this.absolute(pathname, pwd);
            if (yield this._fs.exists(absolute)) {
                return absolute;
            }
            else if (exists) {
                throw Exception_js_1.default.for(`Cannot resolve '${pathname}'`);
            }
            return null;
        });
    }
    resolveFile(pathname_1) {
        return __awaiter(this, arguments, void 0, function* (pathname, extnames = ['.js', '.json'], pwd = this._cwd, exists = false) {
            const absolute = yield this.absolute(pathname, pwd);
            if (yield this._fileExists(absolute)) {
                return absolute;
            }
            for (const extname of extnames) {
                let file = yield this.absolute(pathname + extname, pwd);
                if (yield this._fileExists(file)) {
                    return file;
                }
                const index = path.join(pathname, 'index' + extname);
                file = yield this.absolute(index, pwd);
                if (yield this._fileExists(file)) {
                    return file;
                }
            }
            if (exists) {
                throw Exception_js_1.default.for(`Cannot resolve '${pathname}'`);
            }
            return null;
        });
    }
    _fileExists(pathname) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield this._fs.exists(pathname))) {
                return false;
            }
            const stats = yield this._fs.stat(pathname);
            return stats && stats.isFile();
        });
    }
}
exports.default = FileLoader;
