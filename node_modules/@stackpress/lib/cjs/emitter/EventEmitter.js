"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Status_js_1 = __importDefault(require("../Status.js"));
const TaskQueue_js_1 = __importDefault(require("../queue/TaskQueue.js"));
class EventEmitter {
    constructor() {
        this._listeners = {};
    }
    set after(action) {
        this._after = action;
    }
    set before(action) {
        this._before = action;
    }
    get event() {
        return this._event;
    }
    get listeners() {
        return Object.freeze(Object.assign({}, this._listeners));
    }
    clear(event) {
        if (typeof this._listeners[event] !== 'undefined') {
            delete this._listeners[event];
        }
        return this;
    }
    emit(event, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            const queue = this.tasks(event);
            if (queue.size === 0) {
                return Status_js_1.default.NOT_FOUND;
            }
            return yield queue.run(...args);
        });
    }
    makeQueue() {
        return new TaskQueue_js_1.default();
    }
    match(event) {
        const matches = new Map();
        if (typeof this.listeners[event] !== 'undefined') {
            const data = { args: [], params: {} };
            matches.set(event, { event, pattern: event, data });
        }
        return matches;
    }
    on(event, action, priority = 0) {
        if (typeof this._listeners[event] === 'undefined') {
            this._listeners[event] = new Set();
        }
        const listeners = this._listeners[event];
        listeners.add({ item: action, priority });
        return this;
    }
    tasks(event) {
        const matches = this.match(event);
        const queue = this.makeQueue();
        for (const [event, match] of matches) {
            if (typeof this._listeners[event] === 'undefined') {
                continue;
            }
            const tasks = this._listeners[event];
            tasks.forEach(task => {
                queue.add(this._task(match, task), task.priority);
            });
        }
        return queue;
    }
    unbind(event, action) {
        const set = this._listeners[event];
        if (set) {
            set.forEach(task => {
                if (task.item === action) {
                    set.delete(task);
                }
            });
        }
        return this;
    }
    use(emitter) {
        for (const event in emitter.listeners) {
            const tasks = emitter.listeners[event];
            if (typeof tasks === 'undefined') {
                continue;
            }
            for (const { item, priority } of tasks) {
                this.on(event, item, priority);
            }
        }
        return this;
    }
    _task(match, task) {
        return (...args) => __awaiter(this, void 0, void 0, function* () {
            this._event = Object.assign(Object.assign(Object.assign({}, match), task), { args, action: task.item });
            if (typeof this._before === 'function'
                && (yield this._before(this._event)) === false) {
                return false;
            }
            if ((yield task.item(...args)) === false) {
                return false;
            }
            if (typeof this._after === 'function'
                && (yield this._after(this._event)) === false) {
                return false;
            }
        });
    }
}
exports.default = EventEmitter;
