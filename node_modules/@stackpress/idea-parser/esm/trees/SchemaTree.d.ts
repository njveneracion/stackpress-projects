import type { SchemaToken, ImportToken, DeclarationToken } from '../types.js';
import Lexer from '../Lexer.js';
import AbstractTree from './AbstractTree.js';
import EnumTree from './EnumTree.js';
import PropTree from './PropTree.js';
import TypeTree from './TypeTree.js';
import ModelTree from './ModelTree.js';
import PluginTree from './PluginTree.js';
import UseTree from './UseTree.js';
type BodyToken = DeclarationToken | ImportToken;
export default class SchemaTree extends AbstractTree<SchemaToken> {
    static definitions(lexer: Lexer): Lexer;
    static parse(code: string): SchemaToken;
    protected _enumTree: EnumTree;
    protected _propTree: PropTree;
    protected _typeTree: TypeTree;
    protected _modelTree: ModelTree;
    protected _pluginTree: PluginTree;
    protected _useTree: UseTree;
    constructor(lexer?: Lexer);
    parse(code: string, start?: number): SchemaToken;
    protected dotryall(...all: (() => BodyToken | undefined)[]): Generator<BodyToken, void, unknown>;
}
export {};
