"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Status_1 = __importDefault(require("@stackpress/lib/Status"));
const Exception_js_1 = __importDefault(require("./Exception.js"));
class Route {
    static emit(event, request, response, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const route = new Route(event, request, response, context);
            return route.emit();
        });
    }
    constructor(event, request, response, context) {
        this.event = event;
        this.request = request;
        this.response = response;
        this.context = context;
    }
    emit() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(yield this.prepare())) {
                return false;
            }
            if (!(yield this.process())) {
                return false;
            }
            if (!(yield this.shutdown())) {
                return false;
            }
            return true;
        });
    }
    prepare() {
        return __awaiter(this, void 0, void 0, function* () {
            let status = Status_1.default.OK;
            try {
                status = yield this.context.emit('request', this.request, this.response);
            }
            catch (error) {
                status = yield this._catch(error);
            }
            return status.code !== Status_1.default.ABORT.code;
        });
    }
    process() {
        return __awaiter(this, void 0, void 0, function* () {
            let status = Status_1.default.OK;
            try {
                if (typeof this.event === 'string') {
                    yield this.context.emit(this.event, this.request, this.response);
                }
                else {
                    yield this.event(this.request, this.response, this.context);
                }
            }
            catch (error) {
                status = yield this._catch(error);
            }
            if (status.code === Status_1.default.ABORT.code) {
                return false;
            }
            if (!this.response.body && !this.response.code) {
                const exception = Exception_js_1.default
                    .for(Status_1.default.NOT_FOUND.status)
                    .withCode(Status_1.default.NOT_FOUND.code)
                    .toResponse();
                this.response.setError(exception);
                status = yield this.context.emit('error', this.request, this.response);
            }
            if (!this.response.code || !this.response.status) {
                this.response.status = Status_1.default.OK;
            }
            return status.code !== Status_1.default.ABORT.code;
        });
    }
    shutdown() {
        return __awaiter(this, void 0, void 0, function* () {
            let status = Status_1.default.OK;
            try {
                status = yield this.context.emit('response', this.request, this.response);
            }
            catch (error) {
                status = yield this._catch(error);
            }
            return status.code !== Status_1.default.ABORT.code;
        });
    }
    _catch(error) {
        return __awaiter(this, void 0, void 0, function* () {
            const exception = Exception_js_1.default.upgrade(error).toResponse();
            this.response.setError(exception);
            return yield this.context.emit('error', this.request, this.response);
        });
    }
}
exports.default = Route;
