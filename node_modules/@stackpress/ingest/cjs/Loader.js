"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PluginLoader = exports.ConfigLoader = void 0;
const node_path_1 = __importDefault(require("node:path"));
const NodeFS_1 = __importDefault(require("@stackpress/lib/NodeFS"));
const FileLoader_1 = __importDefault(require("@stackpress/lib/FileLoader"));
const Exception_js_1 = __importDefault(require("./Exception.js"));
class ConfigLoader extends FileLoader_1.default {
    constructor(options = {}) {
        super(options.fs || new NodeFS_1.default(), options.cwd || process.cwd());
        const { key = 'plugins', extnames = [
            '/plugins.js',
            '/plugins.json',
            '/package.json',
            '/plugins.ts',
            '.js',
            '.json',
            '.ts'
        ] } = options;
        this._key = key;
        this._extnames = extnames;
    }
    load(filepath, defaults) {
        return __awaiter(this, void 0, void 0, function* () {
            const file = yield this.resolveFile(filepath);
            if (!file) {
                Exception_js_1.default.require(typeof defaults !== 'undefined', 'Could not resolve `%s`', filepath);
                return defaults;
            }
            const basepath = this.basepath(file);
            let imported = yield Promise.resolve(`${basepath}`).then(s => __importStar(require(s)));
            if (imported.default) {
                imported = imported.default;
            }
            if (imported[this._key]) {
                imported = imported[this._key];
            }
            return imported;
        });
    }
    resolveFile() {
        const _super = Object.create(null, {
            resolveFile: { get: () => super.resolveFile }
        });
        return __awaiter(this, arguments, void 0, function* (filepath = this.cwd) {
            const resolved = yield _super.resolveFile.call(this, filepath, this._extnames, this.cwd);
            return resolved;
        });
    }
}
exports.ConfigLoader = ConfigLoader;
class PluginLoader extends ConfigLoader {
    constructor(options) {
        super(options);
        this._bootstrapped = false;
        const { plugins, modules } = options;
        this._modules = modules;
        this._plugins = plugins;
    }
    bootstrap(loader) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._bootstrapped) {
                const plugins = yield this.plugins();
                for (let pathname of plugins) {
                    const plugin = yield this.load(pathname);
                    if (Array.isArray(plugin)) {
                        const absolute = yield this.resolve(pathname, this.cwd, true);
                        const stats = yield this.fs.stat(absolute);
                        const cwd = stats.isFile()
                            ? node_path_1.default.dirname(absolute)
                            : absolute;
                        const child = new PluginLoader({
                            cwd,
                            fs: this.fs,
                            modules: this._modules,
                            plugins: plugin
                        });
                        yield child.bootstrap(loader);
                        continue;
                    }
                    if (!this._modules) {
                        this._modules = yield this.lib();
                    }
                    const filename = pathname.startsWith(this._modules)
                        ? pathname.substring(this._modules.length + 1)
                        : pathname.startsWith(this.cwd)
                            ? pathname.substring(this.cwd.length + 1)
                            : pathname;
                    const extname = node_path_1.default.extname(filename);
                    const basepath = filename.length - extname.length;
                    const name = filename.substring(0, basepath);
                    yield loader(name, plugin);
                }
            }
            this._bootstrapped = true;
            return this;
        });
    }
    plugins() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this._plugins) {
                const filepath = yield this.resolveFile(this.cwd);
                let plugins = [];
                if (filepath) {
                    plugins = yield this.load(filepath);
                }
                if (plugins.default) {
                    plugins = plugins.default;
                }
                if (plugins[this._key]) {
                    plugins = plugins[this._key];
                }
                if (typeof plugins == 'string') {
                    plugins = [plugins];
                }
                this._plugins = Array.isArray(plugins) ? plugins : [];
            }
            return Array.from(this._plugins);
        });
    }
}
exports.PluginLoader = PluginLoader;
