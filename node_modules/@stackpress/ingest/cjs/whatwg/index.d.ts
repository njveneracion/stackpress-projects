import type { UnknownNest } from '@stackpress/lib/types';
import type { WhatwgServer, NodeRequest, NodeOptResponse, WhatwgAction, WhatwgPropsAction, ServerOptions, NodeServerOptions } from '../types.js';
import Router from '../Router.js';
import Server from '../Server.js';
import Adapter, { loader, dispatcher } from './Adapter.js';
export { isObject, objectFromQuery, objectFromFormData, objectFromJson, withUnknownHost, formDataToObject, cookie, session, Status, Exception, ConfigLoader, PluginLoader, Request, Response, Router, ActionRouter, EntryRouter, ImportRouter, ViewRouter, Server, ReadSession, WriteSession } from '../index.js';
export { reqToURL, reqQueryToObject, readableToReadableStream } from './helpers.js';
export { Adapter, loader, dispatcher };
export declare function gateway<C extends UnknownNest = UnknownNest>(server: WhatwgServer<C>): (options: NodeServerOptions) => import("http").Server<typeof import("http").IncomingMessage, typeof import("http").ServerResponse>;
export declare function handler<C extends UnknownNest = UnknownNest>(context: WhatwgServer<C>, request: NodeRequest, _response: NodeOptResponse, action?: string | WhatwgAction<C>): Promise<NodeOptResponse>;
export declare function server<C extends UnknownNest = UnknownNest>(options?: ServerOptions<C, NodeRequest, NodeOptResponse>): Server<C, Request, NodeOptResponse>;
export declare function router(): Router<Request, NodeOptResponse>;
export declare function action<C extends UnknownNest = UnknownNest>(action: WhatwgAction<C>): WhatwgAction<C>;
export declare namespace action {
    var props: <C extends UnknownNest = any>(action: WhatwgPropsAction<C>) => WhatwgAction<C>;
}
