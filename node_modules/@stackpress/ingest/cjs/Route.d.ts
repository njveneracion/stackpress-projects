import type { UnknownNest } from '@stackpress/lib/types';
import type { ServerAction } from './types.js';
import type Server from './Server.js';
import type Request from './Request.js';
import type Response from './Response.js';
export default class Route<C extends UnknownNest = UnknownNest, R = unknown, S = unknown> {
    static emit<C extends UnknownNest = UnknownNest, R = unknown, S = unknown>(event: ServerAction<C, R, S> | string, request: Request<R>, response: Response<S>, context: Server<C, R, S>): Promise<boolean>;
    readonly event: ServerAction<C, R, S> | string;
    readonly request: Request<R>;
    readonly response: Response<S>;
    readonly context: Server<C, R, S>;
    constructor(event: ServerAction<C, R, S> | string, request: Request<R>, response: Response<S>, context: Server<C, R, S>);
    emit(): Promise<boolean>;
    prepare(): Promise<boolean>;
    process(): Promise<boolean>;
    shutdown(): Promise<boolean>;
    protected _catch(error: Error): Promise<import("@stackpress/lib/types").ResponseStatus>;
}
