"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Nest_1 = require("@stackpress/lib/Nest");
const ActionRouter_js_1 = __importDefault(require("./plugin/ActionRouter.js"));
const Request_js_1 = __importDefault(require("./Request.js"));
const Response_js_1 = __importDefault(require("./Response.js"));
class Router {
    get entries() {
        return this.entry.entries;
    }
    get expressions() {
        return this.action.expressions;
    }
    get imports() {
        return this.import.imports;
    }
    get listeners() {
        return this.action.listeners;
    }
    get routes() {
        return this.action.routes;
    }
    get views() {
        return this.view.views;
    }
    constructor() {
        this.action = new ActionRouter_js_1.default(this);
        this.entry = this.action.entry;
        this.import = this.action.import;
        this.view = this.action.view;
    }
    all(path, action, priority) {
        return this.route('ALL', path, action, priority);
    }
    connect(path, action, priority) {
        return this.route('CONNECT', path, action, priority);
    }
    delete(path, action, priority) {
        return this.route('DELETE', path, action, priority);
    }
    emit(event, req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.action.emit(event, req, res);
        });
    }
    get(path, action, priority) {
        return this.route('GET', path, action, priority);
    }
    head(path, action, priority) {
        return this.route('HEAD', path, action, priority);
    }
    on(event, action, priority = 0) {
        if (typeof action === 'string') {
            this.view.on(event, action, priority);
        }
        else if (typeof action === 'function'
            && action.length === 0
            && !action.name) {
            this.import.on(event, action, priority);
        }
        else {
            this.action.on(event, action, priority);
        }
        return this;
    }
    options(path, action, priority) {
        return this.route('OPTIONS', path, action, priority);
    }
    patch(path, action, priority) {
        return this.route('PATCH', path, action, priority);
    }
    post(path, action, priority) {
        return this.route('POST', path, action, priority);
    }
    put(path, action, priority) {
        return this.route('PUT', path, action, priority);
    }
    request(init = {}) {
        return new Request_js_1.default(init);
    }
    resolve(methodPath, pathRequest, requestResponse, response) {
        return __awaiter(this, void 0, void 0, function* () {
            if (typeof pathRequest === 'string') {
                return this._resolveRoute(methodPath, pathRequest, requestResponse, response);
            }
            return this._resolveEvent(methodPath, pathRequest, requestResponse);
        });
    }
    response(init = {}) {
        return new Response_js_1.default(init);
    }
    route(method, path, action, priority = 0) {
        if (typeof action === 'string') {
            this.view.route(method, path, action, priority);
        }
        else if (typeof action === 'function'
            && action.length === 0
            && !action.name) {
            this.import.route(method, path, action, priority);
        }
        else {
            this.action.route(method, path, action, priority);
        }
        return this;
    }
    trace(path, action, priority) {
        return this.route('TRACE', path, action, priority);
    }
    use(router) {
        const thisRouter = router;
        this.action.use(thisRouter.action);
        this.entry.use(thisRouter.entry);
        this.import.use(thisRouter.import);
        this.view.use(thisRouter.view);
        return this;
    }
    _resolveEvent(event, request, response) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!request) {
                request = this.request();
            }
            else if ((0, Nest_1.isObject)(request)) {
                const data = request;
                request = this.request({ data });
            }
            const req = request;
            const res = response || this.response();
            yield this.emit(event, req, res);
            return res.toStatusResponse();
        });
    }
    _resolveRoute(method, path, request, response) {
        return __awaiter(this, void 0, void 0, function* () {
            const event = `${method.toUpperCase()} ${path}`;
            return yield this._resolveEvent(event, request, response);
        });
    }
}
exports.default = Router;
