"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.gateway = gateway;
exports.handler = handler;
exports.server = server;
exports.router = router;
exports.action = action;
const node_http_1 = require("node:http");
const map_1 = __importDefault(require("@stackpress/lib/map"));
const Nest_1 = require("@stackpress/lib/Nest");
const Router_js_1 = __importDefault(require("./Router.js"));
const Loader_js_1 = require("./Loader.js");
class Server extends Router_js_1.default {
    set gateway(callback) {
        this._gateway = callback;
    }
    set handler(callback) {
        this._handler = callback;
    }
    constructor(options = {}) {
        super();
        this.config = (0, Nest_1.nest)();
        this.plugins = (0, map_1.default)();
        this.loader = new Loader_js_1.PluginLoader(options);
        this._gateway = (options.gateway || gateway)(this);
        this._handler = options.handler || handler;
    }
    bootstrap() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.loader.bootstrap((name, plugin) => __awaiter(this, void 0, void 0, function* () {
                if (typeof plugin === 'function') {
                    const config = yield plugin(this);
                    if (config && typeof config === 'object') {
                        this.register(name, config);
                    }
                }
                else if (plugin && typeof plugin === 'object') {
                    this.register(name, plugin);
                }
            }));
            return this;
        });
    }
    create(options = {}) {
        return this._gateway(options);
    }
    handle(request, response) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this._handler(this, request, response);
        });
    }
    plugin(name) {
        return this.plugins.get(name);
    }
    register(name, config) {
        this.plugins.set(name, config);
        return this;
    }
}
exports.default = Server;
;
function gateway(server) {
    return (options) => (0, node_http_1.createServer)(options, (im, sr) => server.handle(im, sr));
}
;
function handler(_ctx, _req, res) {
    return __awaiter(this, void 0, void 0, function* () {
        return res;
    });
}
;
function server(options = {}) {
    options.gateway = options.gateway || gateway;
    options.handler = options.handler || handler;
    return new Server(options);
}
;
function router() {
    return new Router_js_1.default();
}
function action(action) {
    return action;
}
;
action.props = (action) => {
    return function ActionProps(req, res, ctx) {
        return action({ req, res, ctx });
    };
};
