"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ExpressEmitter_1 = __importDefault(require("@stackpress/lib/ExpressEmitter"));
const Status_1 = __importDefault(require("@stackpress/lib/Status"));
const EntryRouter_js_1 = __importDefault(require("./EntryRouter.js"));
const ImportRouter_js_1 = __importDefault(require("./ImportRouter.js"));
const ViewRouter_js_1 = __importDefault(require("./ViewRouter.js"));
class ActionRouter extends ExpressEmitter_1.default {
    constructor(context) {
        super('/');
        this.routes = new Map();
        this.context = context;
        const listen = this._listen.bind(this);
        this.entry = new EntryRouter_js_1.default(this, listen);
        this.import = new ImportRouter_js_1.default(this, listen);
        this.view = new ViewRouter_js_1.default(this, listen);
    }
    all(path, action, priority) {
        return this.route('ALL', path, action, priority);
    }
    connect(path, action, priority) {
        return this.route('CONNECT', path, action, priority);
    }
    delete(path, action, priority) {
        return this.route('DELETE', path, action, priority);
    }
    emit(event, req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const queue = this.tasks(event);
            if (queue.size === 0) {
                return Status_1.default.NOT_FOUND;
            }
            return yield queue.run(req, res, this.context);
        });
    }
    eventName(method, path) {
        if (method instanceof RegExp || !path) {
            return this._eventName(method);
        }
        return this._eventNameFromRoute(method, path);
    }
    get(path, action, priority) {
        return this.route('GET', path, action, priority);
    }
    head(path, action, priority) {
        return this.route('HEAD', path, action, priority);
    }
    options(path, action, priority) {
        return this.route('OPTIONS', path, action, priority);
    }
    patch(path, action, priority) {
        return this.route('PATCH', path, action, priority);
    }
    post(path, action, priority) {
        return this.route('POST', path, action, priority);
    }
    put(path, action, priority) {
        return this.route('PUT', path, action, priority);
    }
    route(method, path, action, priority = 0) {
        const event = this._eventNameFromRoute(method, path);
        const results = this._listen(event, action, priority);
        return Object.assign({ method, path }, results);
    }
    trace(path, action, priority) {
        return this.route('TRACE', path, action, priority);
    }
    use(emitter) {
        if (emitter instanceof ActionRouter) {
            emitter.routes.forEach((route, event) => this.routes.set(event, route));
        }
        super.use(emitter);
        return this;
    }
    _eventNameFromRoute(method, path) {
        method = method.toUpperCase();
        const fragment = this._toFragment(path);
        if (method === 'ALL') {
            const pattern = fragment !== path ? path : '';
            const expression = `^[A-Z]+ ${fragment}${this.separator}*$`;
            const event = this._eventNameFromExpression(expression, pattern);
            this.routes.set(event, { method, path });
            return event;
        }
        let event = `${method} ${path}`;
        if (fragment !== path) {
            const expression = `^${method} ${fragment}${this.separator}*$`;
            event = this._eventNameFromExpression(expression, event);
            this.routes.set(event, { method, path });
            return event;
        }
        this.routes.set(event, { method, path });
        return event;
    }
    _task(match, task) {
        return (req, res, ctx) => __awaiter(this, void 0, void 0, function* () {
            this._event = Object.assign(Object.assign(Object.assign({}, match), task), { args: [req, res, ctx], action: task.item });
            req.data.set(match.data.params);
            if (match.data.args.length) {
                req.data.set(match.data.args);
            }
            if (typeof this._before === 'function'
                && (yield this._before(this._event)) === false) {
                return false;
            }
            if ((yield task.item(req, res, ctx)) === false) {
                return false;
            }
            if (typeof this._after === 'function'
                && (yield this._after(this._event)) === false) {
                return false;
            }
        });
    }
}
exports.default = ActionRouter;
;
