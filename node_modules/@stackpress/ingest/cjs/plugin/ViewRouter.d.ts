import type { Method, UnknownNest, TaskResult } from '@stackpress/lib/types';
import type { ViewRouterTaskItem, ActionRouterListener } from '../types.js';
import type Request from '../Request.js';
import type Response from '../Response.js';
import type ActionRouter from './ActionRouter.js';
export type ViewEngine<R, S, X> = (filePath: string, req: Request<R>, res: Response<S>, ctx: X) => TaskResult;
export type ViewRender = (filePath: string, props?: UnknownNest, options?: UnknownNest) => string | null | Promise<string | null>;
export default class ViewRouter<R, S, X> {
    readonly views: Map<string, Set<ViewRouterTaskItem>>;
    protected _engine: ViewEngine<R, S, X>;
    protected _render: ViewRender;
    protected _router: ActionRouter<R, S, X>;
    protected _listen: ActionRouterListener<R, S, X>;
    get engine(): ViewEngine<R, S, X>;
    set engine(engine: ViewEngine<R, S, X>);
    get render(): ViewRender;
    set render(render: ViewRender);
    constructor(router: ActionRouter<R, S, X>, listen: ActionRouterListener<R, S, X>);
    action(event: string, action: string, priority?: number): (req: Request<R>, res: Response<S>, ctx: X) => Promise<void>;
    all(path: string, action: string, priority?: number): this;
    connect(path: string, action: string, priority?: number): this;
    delete(path: string, action: string, priority?: number): this;
    get(path: string, action: string, priority?: number): this;
    head(path: string, action: string, priority?: number): this;
    on(event: string | RegExp, entry: string, priority?: number): this;
    options(path: string, action: string, priority?: number): this;
    patch(path: string, action: string, priority?: number): this;
    post(path: string, action: string, priority?: number): this;
    put(path: string, action: string, priority?: number): this;
    route(method: Method, path: string, entry: string, priority?: number): this;
    trace(path: string, action: string, priority?: number): this;
    use(router: ViewRouter<R, S, X>): this;
}
