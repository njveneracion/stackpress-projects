"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
class EntryRouter {
    constructor(router, listen) {
        this.entries = new Map();
        this._router = router;
        this._listen = listen;
    }
    action(event, action, priority = 0) {
        var _a;
        if (!this.entries.has(event)) {
            this.entries.set(event, new Set());
        }
        (_a = this.entries.get(event)) === null || _a === void 0 ? void 0 : _a.add({ entry: action, priority });
        return function EntryFileAction(req, res, ctx) {
            return __awaiter(this, void 0, void 0, function* () {
                const imports = yield Promise.resolve(`${action}`).then(s => __importStar(require(s)));
                const callback = imports.default;
                return yield callback(req, res, ctx);
            });
        };
    }
    all(path, action, priority) {
        return this.route('ALL', path, action, priority);
    }
    connect(path, action, priority) {
        return this.route('CONNECT', path, action, priority);
    }
    delete(path, action, priority) {
        return this.route('DELETE', path, action, priority);
    }
    get(path, action, priority) {
        return this.route('GET', path, action, priority);
    }
    head(path, action, priority) {
        return this.route('HEAD', path, action, priority);
    }
    on(event, entry, priority = 0) {
        const key = this._router.eventName(event);
        const action = this.action(key, entry, priority);
        this._listen(key, action, priority);
        return this;
    }
    options(path, action, priority) {
        return this.route('OPTIONS', path, action, priority);
    }
    patch(path, action, priority) {
        return this.route('PATCH', path, action, priority);
    }
    post(path, action, priority) {
        return this.route('POST', path, action, priority);
    }
    put(path, action, priority) {
        return this.route('PUT', path, action, priority);
    }
    route(method, path, entry, priority = 0) {
        const event = this._router.eventName(method, path);
        const action = this.action(event, entry, priority);
        this._listen(event, action, priority);
        return this;
    }
    trace(path, action, priority) {
        return this.route('TRACE', path, action, priority);
    }
    use(router) {
        router.entries.forEach((tasks, event) => {
            if (!this.entries.has(event)) {
                this.entries.set(event, new Set());
            }
            tasks.forEach(task => { var _a; return (_a = this.entries.get(event)) === null || _a === void 0 ? void 0 : _a.add(task); });
        });
        return this;
    }
}
exports.default = EntryRouter;
;
