import type { Method } from '@stackpress/lib/types';
import type { EntryRouterTaskItem, ActionRouterListener } from '../types.js';
import type Request from '../Request.js';
import type Response from '../Response.js';
import type ActionRouter from './ActionRouter.js';
export default class EntryRouter<R, S, X> {
    readonly entries: Map<string, Set<EntryRouterTaskItem>>;
    protected _router: ActionRouter<R, S, X>;
    protected _listen: ActionRouterListener<R, S, X>;
    constructor(router: ActionRouter<R, S, X>, listen: ActionRouterListener<R, S, X>);
    action(event: string, action: string, priority?: number): (req: Request<R>, res: Response<S>, ctx: X) => Promise<boolean | void | undefined>;
    all(path: string, action: string, priority?: number): this;
    connect(path: string, action: string, priority?: number): this;
    delete(path: string, action: string, priority?: number): this;
    get(path: string, action: string, priority?: number): this;
    head(path: string, action: string, priority?: number): this;
    on(event: string | RegExp, entry: string, priority?: number): this;
    options(path: string, action: string, priority?: number): this;
    patch(path: string, action: string, priority?: number): this;
    post(path: string, action: string, priority?: number): this;
    put(path: string, action: string, priority?: number): this;
    route(method: Method, path: string, entry: string, priority?: number): this;
    trace(path: string, action: string, priority?: number): this;
    use(router: EntryRouter<R, S, X>): this;
}
