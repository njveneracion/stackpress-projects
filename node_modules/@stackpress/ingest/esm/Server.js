import { createServer } from 'node:http';
import map from '@stackpress/lib/map';
import { nest } from '@stackpress/lib/Nest';
import Router from './Router.js';
import { PluginLoader } from './Loader.js';
export default class Server extends Router {
    config;
    loader;
    plugins;
    _gateway;
    _handler;
    set gateway(callback) {
        this._gateway = callback;
    }
    set handler(callback) {
        this._handler = callback;
    }
    constructor(options = {}) {
        super();
        this.config = nest();
        this.plugins = map();
        this.loader = new PluginLoader(options);
        this._gateway = (options.gateway || gateway)(this);
        this._handler = options.handler || handler;
    }
    async bootstrap() {
        await this.loader.bootstrap(async (name, plugin) => {
            if (typeof plugin === 'function') {
                const config = await plugin(this);
                if (config && typeof config === 'object') {
                    this.register(name, config);
                }
            }
            else if (plugin && typeof plugin === 'object') {
                this.register(name, plugin);
            }
        });
        return this;
    }
    create(options = {}) {
        return this._gateway(options);
    }
    async handle(request, response) {
        return await this._handler(this, request, response);
    }
    plugin(name) {
        return this.plugins.get(name);
    }
    register(name, config) {
        this.plugins.set(name, config);
        return this;
    }
}
;
export function gateway(server) {
    return (options) => createServer(options, (im, sr) => server.handle(im, sr));
}
;
export async function handler(_ctx, _req, res) {
    return res;
}
;
export function server(options = {}) {
    options.gateway = options.gateway || gateway;
    options.handler = options.handler || handler;
    return new Server(options);
}
;
export function router() {
    return new Router();
}
export function action(action) {
    return action;
}
;
action.props = (action) => {
    return function ActionProps(req, res, ctx) {
        return action({ req, res, ctx });
    };
};
