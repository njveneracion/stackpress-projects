import Status from '@stackpress/lib/Status';
import Exception from './Exception.js';
export default class Route {
    static async emit(event, request, response, context) {
        const route = new Route(event, request, response, context);
        return route.emit();
    }
    event;
    request;
    response;
    context;
    constructor(event, request, response, context) {
        this.event = event;
        this.request = request;
        this.response = response;
        this.context = context;
    }
    async emit() {
        if (!await this.prepare()) {
            return false;
        }
        if (!await this.process()) {
            return false;
        }
        if (!await this.shutdown()) {
            return false;
        }
        return true;
    }
    async prepare() {
        let status = Status.OK;
        try {
            status = await this.context.emit('request', this.request, this.response);
        }
        catch (error) {
            status = await this._catch(error);
        }
        return status.code !== Status.ABORT.code;
    }
    async process() {
        let status = Status.OK;
        try {
            if (typeof this.event === 'string') {
                await this.context.emit(this.event, this.request, this.response);
            }
            else {
                await this.event(this.request, this.response, this.context);
            }
        }
        catch (error) {
            status = await this._catch(error);
        }
        if (status.code === Status.ABORT.code) {
            return false;
        }
        if (!this.response.body && !this.response.code) {
            const exception = Exception
                .for(Status.NOT_FOUND.status)
                .withCode(Status.NOT_FOUND.code)
                .toResponse();
            this.response.setError(exception);
            status = await this.context.emit('error', this.request, this.response);
        }
        if (!this.response.code || !this.response.status) {
            this.response.status = Status.OK;
        }
        return status.code !== Status.ABORT.code;
    }
    async shutdown() {
        let status = Status.OK;
        try {
            status = await this.context.emit('response', this.request, this.response);
        }
        catch (error) {
            status = await this._catch(error);
        }
        return status.code !== Status.ABORT.code;
    }
    async _catch(error) {
        const exception = Exception.upgrade(error).toResponse();
        this.response.setError(exception);
        return await this.context.emit('error', this.request, this.response);
    }
}
