import { Readable } from 'node:stream';
import { objectFromQuery } from '@stackpress/lib/Nest';
import { withUnknownHost } from '@stackpress/lib/Request';
export function imToURL(resource) {
    let { url, headers } = resource;
    url = url?.replaceAll('//', '/');
    if (url?.endsWith('/')) {
        url = url.slice(0, -1);
    }
    let protocol = resource.socket.encrypted ? 'https' : 'http';
    const proto = headers['x-forwarded-proto'];
    if (proto?.length) {
        if (Array.isArray(proto)) {
            protocol = proto[0];
        }
        else {
            protocol = proto;
        }
        protocol = protocol.trim();
        if (protocol.indexOf(',') !== -1) {
            protocol = protocol.substring(0, protocol.indexOf(',')).trim();
        }
    }
    const uri = `${protocol}://${headers.host}${url || '/'}`;
    try {
        return new URL(uri);
    }
    catch (e) { }
    return new URL(withUnknownHost(url || '/'));
    ;
}
;
export function imQueryToObject(resource) {
    return objectFromQuery(imToURL(resource).searchParams.toString());
}
;
export function readableStreamToReadable(stream) {
    const reader = stream.getReader();
    return new Readable({
        async read(_size) {
            const { done, value } = await reader.read();
            if (done) {
                this.push(null);
                return;
            }
            this.push(value);
        }
    });
}
;
