import type { UnknownNest } from '@stackpress/lib/types';
import type { IM, SR, HttpServer, HttpAction, CookieOptions, LoaderResults } from '../types.js';
import Request from '../Request.js';
import Response from '../Response.js';
export default class Adapter<C extends UnknownNest = UnknownNest> {
    static plug<C extends UnknownNest = UnknownNest>(context: HttpServer<C>, request: IM, response: SR, action?: string | HttpAction<C>): Promise<SR>;
    protected _context: HttpServer<C>;
    protected _request: IM;
    protected _response: SR;
    constructor(context: HttpServer<C>, request: IM, response: SR);
    plug(action?: string | HttpAction<C>): Promise<SR>;
    request(): Request<import("http").IncomingMessage>;
    response(): Response<SR>;
}
export declare function loader(resource: IM, size?: number): (req: Request<IM>) => Promise<LoaderResults | undefined>;
export declare function dispatcher(options?: CookieOptions): (res: Response<SR>) => Promise<SR>;
