import type { UnknownNest } from '@stackpress/lib/types';
import type { IM, SR, HttpServer, HttpAction, HttpPropsAction, ServerOptions, NodeServerOptions } from '../types.js';
import Router from '../Router.js';
import Server from '../Server.js';
import Adapter, { loader, dispatcher } from './Adapter.js';
export { isObject, objectFromQuery, objectFromFormData, objectFromJson, withUnknownHost, formDataToObject, cookie, session, Status, Exception, ConfigLoader, PluginLoader, Request, Response, Router, ActionRouter, EntryRouter, ImportRouter, ViewRouter, Server, ReadSession, WriteSession } from '../index.js';
export { Adapter, loader, dispatcher };
export declare function gateway<C extends UnknownNest = UnknownNest>(server: HttpServer<C>): (options: NodeServerOptions) => import("http").Server<typeof import("http").IncomingMessage, typeof import("http").ServerResponse>;
export declare function handler<C extends UnknownNest = UnknownNest>(context: HttpServer<C>, request: IM, response: SR, action?: string | HttpAction<C>): Promise<SR>;
export declare function server<C extends UnknownNest = UnknownNest>(options?: ServerOptions<C, IM, SR>): Server<C, import("http").IncomingMessage, SR>;
export declare function router(): Router<import("http").IncomingMessage, SR>;
export declare function action<C extends UnknownNest = UnknownNest>(action: HttpAction<C>): HttpAction<C>;
export declare namespace action {
    var props: <C extends UnknownNest = any>(action: HttpPropsAction<C>) => HttpAction<C>;
}
