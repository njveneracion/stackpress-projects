import { isObject } from '@stackpress/lib/Nest';
import ActionRouter from './plugin/ActionRouter.js';
import Request from './Request.js';
import Response from './Response.js';
export default class Router {
    action;
    entry;
    import;
    view;
    get entries() {
        return this.entry.entries;
    }
    get expressions() {
        return this.action.expressions;
    }
    get imports() {
        return this.import.imports;
    }
    get listeners() {
        return this.action.listeners;
    }
    get routes() {
        return this.action.routes;
    }
    get views() {
        return this.view.views;
    }
    constructor() {
        this.action = new ActionRouter(this);
        this.entry = this.action.entry;
        this.import = this.action.import;
        this.view = this.action.view;
    }
    all(path, action, priority) {
        return this.route('ALL', path, action, priority);
    }
    connect(path, action, priority) {
        return this.route('CONNECT', path, action, priority);
    }
    delete(path, action, priority) {
        return this.route('DELETE', path, action, priority);
    }
    async emit(event, req, res) {
        return this.action.emit(event, req, res);
    }
    get(path, action, priority) {
        return this.route('GET', path, action, priority);
    }
    head(path, action, priority) {
        return this.route('HEAD', path, action, priority);
    }
    on(event, action, priority = 0) {
        if (typeof action === 'string') {
            this.view.on(event, action, priority);
        }
        else if (typeof action === 'function'
            && action.length === 0
            && !action.name) {
            this.import.on(event, action, priority);
        }
        else {
            this.action.on(event, action, priority);
        }
        return this;
    }
    options(path, action, priority) {
        return this.route('OPTIONS', path, action, priority);
    }
    patch(path, action, priority) {
        return this.route('PATCH', path, action, priority);
    }
    post(path, action, priority) {
        return this.route('POST', path, action, priority);
    }
    put(path, action, priority) {
        return this.route('PUT', path, action, priority);
    }
    request(init = {}) {
        return new Request(init);
    }
    async resolve(methodPath, pathRequest, requestResponse, response) {
        if (typeof pathRequest === 'string') {
            return this._resolveRoute(methodPath, pathRequest, requestResponse, response);
        }
        return this._resolveEvent(methodPath, pathRequest, requestResponse);
    }
    response(init = {}) {
        return new Response(init);
    }
    route(method, path, action, priority = 0) {
        if (typeof action === 'string') {
            this.view.route(method, path, action, priority);
        }
        else if (typeof action === 'function'
            && action.length === 0
            && !action.name) {
            this.import.route(method, path, action, priority);
        }
        else {
            this.action.route(method, path, action, priority);
        }
        return this;
    }
    trace(path, action, priority) {
        return this.route('TRACE', path, action, priority);
    }
    use(router) {
        const thisRouter = router;
        this.action.use(thisRouter.action);
        this.entry.use(thisRouter.entry);
        this.import.use(thisRouter.import);
        this.view.use(thisRouter.view);
        return this;
    }
    async _resolveEvent(event, request, response) {
        if (!request) {
            request = this.request();
        }
        else if (isObject(request)) {
            const data = request;
            request = this.request({ data });
        }
        const req = request;
        const res = response || this.response();
        await this.emit(event, req, res);
        return res.toStatusResponse();
    }
    async _resolveRoute(method, path, request, response) {
        const event = `${method.toUpperCase()} ${path}`;
        return await this._resolveEvent(event, request, response);
    }
}
