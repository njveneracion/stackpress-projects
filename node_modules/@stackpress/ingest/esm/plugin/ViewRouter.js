export default class ViewRouter {
    views = new Map();
    _engine = () => void 0;
    _render = () => null;
    _router;
    _listen;
    get engine() {
        return this._engine;
    }
    set engine(engine) {
        this._engine = engine;
    }
    get render() {
        return this._render;
    }
    set render(render) {
        this._render = render;
    }
    constructor(router, listen) {
        this._router = router;
        this._listen = listen;
    }
    action(event, action, priority = 0) {
        if (!this.views.has(event)) {
            this.views.set(event, new Set());
        }
        this.views.get(event)?.add({ entry: action, priority });
        const router = this;
        return async function TemplateFileAction(req, res, ctx) {
            if (!router._engine)
                return;
            await router._engine(action, req, res, ctx);
        };
    }
    all(path, action, priority) {
        return this.route('ALL', path, action, priority);
    }
    connect(path, action, priority) {
        return this.route('CONNECT', path, action, priority);
    }
    delete(path, action, priority) {
        return this.route('DELETE', path, action, priority);
    }
    get(path, action, priority) {
        return this.route('GET', path, action, priority);
    }
    head(path, action, priority) {
        return this.route('HEAD', path, action, priority);
    }
    on(event, entry, priority = 0) {
        const key = this._router.eventName(event);
        const action = this.action(key, entry, priority);
        this._listen(key, action, priority);
        return this;
    }
    options(path, action, priority) {
        return this.route('OPTIONS', path, action, priority);
    }
    patch(path, action, priority) {
        return this.route('PATCH', path, action, priority);
    }
    post(path, action, priority) {
        return this.route('POST', path, action, priority);
    }
    put(path, action, priority) {
        return this.route('PUT', path, action, priority);
    }
    route(method, path, entry, priority = 0) {
        const event = this._router.eventName(method, path);
        const action = this.action(event, entry, priority);
        this._listen(event, action, priority);
        return this;
    }
    trace(path, action, priority) {
        return this.route('TRACE', path, action, priority);
    }
    use(router) {
        router.views.forEach((tasks, event) => {
            if (!this.views.has(event)) {
                this.views.set(event, new Set());
            }
            tasks.forEach(task => this.views.get(event)?.add(task));
        });
        return this;
    }
}
;
