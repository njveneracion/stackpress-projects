import ExpressEmitter from '@stackpress/lib/ExpressEmitter';
import Status from '@stackpress/lib/Status';
import EntryRouter from './EntryRouter.js';
import ImportRouter from './ImportRouter.js';
import ViewRouter from './ViewRouter.js';
export default class ActionRouter extends ExpressEmitter {
    context;
    routes = new Map();
    entry;
    import;
    view;
    constructor(context) {
        super('/');
        this.context = context;
        const listen = this._listen.bind(this);
        this.entry = new EntryRouter(this, listen);
        this.import = new ImportRouter(this, listen);
        this.view = new ViewRouter(this, listen);
    }
    all(path, action, priority) {
        return this.route('ALL', path, action, priority);
    }
    connect(path, action, priority) {
        return this.route('CONNECT', path, action, priority);
    }
    delete(path, action, priority) {
        return this.route('DELETE', path, action, priority);
    }
    async emit(event, req, res) {
        const queue = this.tasks(event);
        if (queue.size === 0) {
            return Status.NOT_FOUND;
        }
        return await queue.run(req, res, this.context);
    }
    eventName(method, path) {
        if (method instanceof RegExp || !path) {
            return this._eventName(method);
        }
        return this._eventNameFromRoute(method, path);
    }
    get(path, action, priority) {
        return this.route('GET', path, action, priority);
    }
    head(path, action, priority) {
        return this.route('HEAD', path, action, priority);
    }
    options(path, action, priority) {
        return this.route('OPTIONS', path, action, priority);
    }
    patch(path, action, priority) {
        return this.route('PATCH', path, action, priority);
    }
    post(path, action, priority) {
        return this.route('POST', path, action, priority);
    }
    put(path, action, priority) {
        return this.route('PUT', path, action, priority);
    }
    route(method, path, action, priority = 0) {
        const event = this._eventNameFromRoute(method, path);
        const results = this._listen(event, action, priority);
        return { method, path, ...results };
    }
    trace(path, action, priority) {
        return this.route('TRACE', path, action, priority);
    }
    use(emitter) {
        if (emitter instanceof ActionRouter) {
            emitter.routes.forEach((route, event) => this.routes.set(event, route));
        }
        super.use(emitter);
        return this;
    }
    _eventNameFromRoute(method, path) {
        method = method.toUpperCase();
        const fragment = this._toFragment(path);
        if (method === 'ALL') {
            const pattern = fragment !== path ? path : '';
            const expression = `^[A-Z]+ ${fragment}${this.separator}*$`;
            const event = this._eventNameFromExpression(expression, pattern);
            this.routes.set(event, { method, path });
            return event;
        }
        let event = `${method} ${path}`;
        if (fragment !== path) {
            const expression = `^${method} ${fragment}${this.separator}*$`;
            event = this._eventNameFromExpression(expression, event);
            this.routes.set(event, { method, path });
            return event;
        }
        this.routes.set(event, { method, path });
        return event;
    }
    _task(match, task) {
        return async (req, res, ctx) => {
            this._event = {
                ...match,
                ...task,
                args: [req, res, ctx],
                action: task.item
            };
            req.data.set(match.data.params);
            if (match.data.args.length) {
                req.data.set(match.data.args);
            }
            if (typeof this._before === 'function'
                && await this._before(this._event) === false) {
                return false;
            }
            if (await task.item(req, res, ctx) === false) {
                return false;
            }
            if (typeof this._after === 'function'
                && await this._after(this._event) === false) {
                return false;
            }
        };
    }
}
;
