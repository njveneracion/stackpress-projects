import type { Route, Method, EventMatch, TaskItem } from '@stackpress/lib/types';
import type EventEmitter from '@stackpress/lib/EventEmitter';
import ExpressEmitter from '@stackpress/lib/ExpressEmitter';
import type { ActionRouterArgs, ActionRouterMap, ActionRouterAction } from '../types.js';
import type Request from '../Request.js';
import type Response from '../Response.js';
import EntryRouter from './EntryRouter.js';
import ImportRouter from './ImportRouter.js';
import ViewRouter from './ViewRouter.js';
export default class ActionRouter<R, S, X> extends ExpressEmitter<ActionRouterMap<R, S, X>> {
    readonly context: X;
    readonly routes: Map<string, Route>;
    readonly entry: EntryRouter<R, S, X>;
    readonly import: ImportRouter<R, S, X>;
    readonly view: ViewRouter<R, S, X>;
    constructor(context: X);
    all(path: string, action: ActionRouterAction<R, S, X>, priority?: number): {
        method: Method;
        path: string;
    } & this;
    connect(path: string, action: ActionRouterAction<R, S, X>, priority?: number): {
        method: Method;
        path: string;
    } & this;
    delete(path: string, action: ActionRouterAction<R, S, X>, priority?: number): {
        method: Method;
        path: string;
    } & this;
    emit(event: string, req: Request<R>, res: Response<S>): Promise<import("@stackpress/lib/types").ResponseStatus>;
    eventName(event: string | RegExp): string;
    eventName(method: Method, path: string): string;
    get(path: string, action: ActionRouterAction<R, S, X>, priority?: number): {
        method: Method;
        path: string;
    } & this;
    head(path: string, action: ActionRouterAction<R, S, X>, priority?: number): {
        method: Method;
        path: string;
    } & this;
    options(path: string, action: ActionRouterAction<R, S, X>, priority?: number): {
        method: Method;
        path: string;
    } & this;
    patch(path: string, action: ActionRouterAction<R, S, X>, priority?: number): {
        method: Method;
        path: string;
    } & this;
    post(path: string, action: ActionRouterAction<R, S, X>, priority?: number): {
        method: Method;
        path: string;
    } & this;
    put(path: string, action: ActionRouterAction<R, S, X>, priority?: number): {
        method: Method;
        path: string;
    } & this;
    route(method: Method, path: string, action: ActionRouterAction<R, S, X>, priority?: number): {
        method: Method;
        path: string;
    } & this;
    trace(path: string, action: ActionRouterAction<R, S, X>, priority?: number): {
        method: Method;
        path: string;
    } & this;
    use(emitter: EventEmitter<ActionRouterMap<R, S, X>>): this;
    protected _eventNameFromRoute(method: string, path: string): string;
    protected _task(match: EventMatch, task: TaskItem<ActionRouterArgs<R, S, X>>): (req: Request<R>, res: Response<S>, ctx: X) => Promise<false | undefined>;
}
