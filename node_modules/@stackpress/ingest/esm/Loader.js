import path from 'node:path';
import NodeFS from '@stackpress/lib/NodeFS';
import FileLoader from '@stackpress/lib/FileLoader';
import Exception from './Exception.js';
export class ConfigLoader extends FileLoader {
    _extnames;
    _key;
    constructor(options = {}) {
        super(options.fs || new NodeFS(), options.cwd || process.cwd());
        const { key = 'plugins', extnames = [
            '/plugins.js',
            '/plugins.json',
            '/package.json',
            '/plugins.ts',
            '.js',
            '.json',
            '.ts'
        ] } = options;
        this._key = key;
        this._extnames = extnames;
    }
    async load(filepath, defaults) {
        const file = await this.resolveFile(filepath);
        if (!file) {
            Exception.require(typeof defaults !== 'undefined', 'Could not resolve `%s`', filepath);
            return defaults;
        }
        const basepath = this.basepath(file);
        let imported = await import(basepath);
        if (imported.default) {
            imported = imported.default;
        }
        if (imported[this._key]) {
            imported = imported[this._key];
        }
        return imported;
    }
    async resolveFile(filepath = this.cwd) {
        const resolved = await super.resolveFile(filepath, this._extnames, this.cwd);
        return resolved;
    }
}
export class PluginLoader extends ConfigLoader {
    _modules;
    _plugins;
    _bootstrapped = false;
    constructor(options) {
        super(options);
        const { plugins, modules } = options;
        this._modules = modules;
        this._plugins = plugins;
    }
    async bootstrap(loader) {
        if (!this._bootstrapped) {
            const plugins = await this.plugins();
            for (let pathname of plugins) {
                const plugin = await this.load(pathname);
                if (Array.isArray(plugin)) {
                    const absolute = await this.resolve(pathname, this.cwd, true);
                    const stats = await this.fs.stat(absolute);
                    const cwd = stats.isFile()
                        ? path.dirname(absolute)
                        : absolute;
                    const child = new PluginLoader({
                        cwd,
                        fs: this.fs,
                        modules: this._modules,
                        plugins: plugin
                    });
                    await child.bootstrap(loader);
                    continue;
                }
                if (!this._modules) {
                    this._modules = await this.lib();
                }
                const filename = pathname.startsWith(this._modules)
                    ? pathname.substring(this._modules.length + 1)
                    : pathname.startsWith(this.cwd)
                        ? pathname.substring(this.cwd.length + 1)
                        : pathname;
                const extname = path.extname(filename);
                const basepath = filename.length - extname.length;
                const name = filename.substring(0, basepath);
                await loader(name, plugin);
            }
        }
        this._bootstrapped = true;
        return this;
    }
    async plugins() {
        if (!this._plugins) {
            const filepath = await this.resolveFile(this.cwd);
            let plugins = [];
            if (filepath) {
                plugins = await this.load(filepath);
            }
            if (plugins.default) {
                plugins = plugins.default;
            }
            if (plugins[this._key]) {
                plugins = plugins[this._key];
            }
            if (typeof plugins == 'string') {
                plugins = [plugins];
            }
            this._plugins = Array.isArray(plugins) ? plugins : [];
        }
        return Array.from(this._plugins);
    }
}
