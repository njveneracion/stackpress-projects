import type { CallableMap, CallableNest, UnknownNest } from '@stackpress/lib';
import type { ServerAction, ServerPropsAction, ServerGateway, ServerHandler, ServerOptions, NodeServerOptions } from './types.js';
import Router from './Router.js';
import { PluginLoader } from './Loader.js';
export default class Server<C extends UnknownNest = UnknownNest, R = unknown, S = unknown> extends Router<R, S> {
    readonly config: CallableNest<C>;
    readonly loader: PluginLoader;
    readonly plugins: CallableMap;
    protected _gateway: ServerGateway;
    protected _handler: ServerHandler<C, R, S>;
    set gateway(callback: ServerGateway);
    set handler(callback: ServerHandler<C, R, S>);
    constructor(options?: ServerOptions<C, R, S>);
    bootstrap(): Promise<this>;
    create(options?: NodeServerOptions): import("http").Server<typeof import("http").IncomingMessage, typeof import("http").ServerResponse>;
    handle(request: R, response: S): Promise<S>;
    plugin<T = Record<string, any> | undefined>(name: string): T;
    register(name: string, config: Record<string, any>): this;
}
export declare function gateway<C extends UnknownNest = UnknownNest, R = unknown, S = unknown>(server: Server<C, R, S>): (options: NodeServerOptions) => import("http").Server<typeof import("http").IncomingMessage, typeof import("http").ServerResponse>;
export declare function handler<C extends UnknownNest = UnknownNest, R = unknown, S = unknown>(_ctx: Server<C, R, S>, _req: R, res: S): Promise<S>;
export declare function server<C extends UnknownNest = any>(options?: ServerOptions<C, any, any>): Server<C, any, any>;
export declare function router(): Router<any, any>;
export declare function action<C extends UnknownNest = any, R = any, S = any>(action: ServerAction<C, R, S>): ServerAction<C, R, S>;
export declare namespace action {
    var props: <C extends UnknownNest = any, R = any, S = any>(action: ServerPropsAction<C, R, S>) => ServerAction<C, R, S>;
}
