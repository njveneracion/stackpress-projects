import type { Order, Reject, Resolve, Dialect, Relation, FlatValue } from '../types.js';
import Engine from '../Engine.js';
export default class Select<R = unknown> {
    protected _columns: string[];
    protected _engine?: Engine;
    protected _offset: number;
    protected _filters: [string, FlatValue[]][];
    protected _limit: number;
    protected _relations: Relation[];
    protected _sort: [string, Order][];
    protected _table?: [string, string];
    get engine(): Engine | undefined;
    set engine(engine: Engine | undefined);
    constructor(select?: string | string[], engine?: Engine);
    build(): {
        columns: string[];
        filters: [string, FlatValue[]][];
        limit: number;
        offset: number;
        relations: Relation[];
        sort: [string, Order][];
        table: [string, string] | undefined;
    };
    from(table: string, as?: string): this;
    join(type: string, table: string, from: string, to: string, as?: string): this;
    limit(limit: number): this;
    offset(offset: number): this;
    order(column: string, direction?: Order): this;
    query(dialect?: Dialect): import("../types.js").QueryObject;
    then(resolve: Resolve<R[]>, reject?: Reject): Promise<void | R[]>;
    where(query: string, values?: FlatValue[]): this;
}
