"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Exception_js_1 = __importDefault(require("../Exception.js"));
class Create {
    get engine() {
        return this._engine;
    }
    set engine(engine) {
        this._engine = engine;
    }
    constructor(table, engine) {
        this._fields = {};
        this._foreign = {};
        this._keys = {};
        this._primary = [];
        this._unique = {};
        this._table = table;
        this._engine = engine;
    }
    addField(name, field) {
        this._fields[name] = field;
        return this;
    }
    addForeignKey(name, foriegnKey) {
        this._foreign[name] = foriegnKey;
        return this;
    }
    addKey(name, field) {
        if (!Array.isArray(field)) {
            field = [field];
        }
        this._keys[name] = field;
        return this;
    }
    addPrimaryKey(name) {
        this._primary.push(name);
        return this;
    }
    addUniqueKey(name, field) {
        if (!Array.isArray(field)) {
            field = [field];
        }
        this._unique[name] = field;
        return this;
    }
    build() {
        return {
            fields: this._fields,
            foreign: this._foreign,
            keys: this._keys,
            primary: this._primary,
            table: this._table,
            unique: this._unique
        };
    }
    query(dialect) {
        var _a;
        dialect = dialect || ((_a = this._engine) === null || _a === void 0 ? void 0 : _a.dialect);
        if (!dialect) {
            throw Exception_js_1.default.for('No dialect provided');
        }
        return dialect.create(this);
    }
    then(resolve, reject = () => { }) {
        if (!this._engine) {
            throw Exception_js_1.default.for('No engine provided');
        }
        const queries = this.query();
        const last = queries.pop();
        return this._engine.transaction((connection) => __awaiter(this, void 0, void 0, function* () {
            for (const request of queries) {
                yield connection.query(connection.format(request));
            }
            return yield connection.query(connection.format(last));
        })).then(resolve).catch(reject);
    }
}
exports.default = Create;
