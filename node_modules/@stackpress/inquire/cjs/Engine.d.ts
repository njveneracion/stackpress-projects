import Alter from './builder/Alter.js';
import Create from './builder/Create.js';
import Delete from './builder/Delete.js';
import Insert from './builder/Insert.js';
import Select from './builder/Select.js';
import Update from './builder/Update.js';
import type { Value, Connection, QueryObject, Transaction } from './types.js';
export default class Engine<R = unknown> {
    readonly connection: Connection<R>;
    get dialect(): import("./types.js").Dialect;
    constructor(connection: Connection<R>);
    alter<R = unknown>(table: string): Alter<R>;
    create<R = unknown>(table: string): Create<R>;
    delete<R = unknown>(table: string): Delete<R>;
    diff(from: Create, to: Create): Alter<unknown>;
    drop(table: string): Promise<unknown[]>;
    insert<R = unknown>(table: string): Insert<R>;
    query<R = unknown>(query: QueryObject): Promise<R[]>;
    query<R = unknown>(query: string, values?: Value[]): Promise<R[]>;
    rename(from: string, to: string): Promise<unknown[]>;
    select<R = unknown>(columns?: string | string[]): Select<R>;
    sql(strings: string[], ...values: Value[]): Promise<unknown[]>;
    transaction<R = unknown>(callback: Transaction<R>): Promise<R>;
    truncate(table: string, cascade?: boolean): Promise<unknown[]>;
    update<R = unknown>(table: string): Update<R>;
}
