"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.typemap = exports.q = void 0;
exports.getType = getType;
exports.getDefault = getDefault;
const Exception_js_1 = __importDefault(require("../Exception.js"));
const helpers_js_1 = require("../helpers.js");
exports.q = '"';
exports.typemap = {
    object: 'JSONB',
    hash: 'JSONB',
    json: 'JSONB',
    char: 'CHAR',
    string: 'VARCHAR',
    varchar: 'VARCHAR',
    text: 'TEXT',
    bool: 'BOOLEAN',
    boolean: 'BOOLEAN',
    number: 'INTEGER',
    int: 'INTEGER',
    integer: 'INTEGER',
    float: 'DECIMAL',
    date: 'DATE',
    datetime: 'TIMESTAMP',
    time: 'TIME'
};
function getType(key, length) {
    let type = exports.typemap[key.toLowerCase()] || key.toUpperCase();
    if (!Array.isArray(length)) {
        if (type === 'CHAR' || type === 'VARCHAR') {
            length = length || 255;
        }
        else if (type === 'INTEGER' || type === 'FLOAT') {
            length = length || 11;
        }
        if (type === 'INTEGER') {
            if (length === 1) {
                type = 'SMALLINT';
                length = undefined;
            }
            else if (length && length > 11) {
                type = 'BIGINT';
                length = undefined;
            }
        }
    }
    return { type, length };
}
;
function getDefault(value, type) {
    if (typeof value === 'boolean') {
        return value ? 'TRUE' : 'FALSE';
    }
    else if (typeof value === 'number' || !isNaN(Number(value))) {
        return value;
    }
    else if (typeof value === 'string' && value.endsWith('()')) {
        if (value.toLowerCase() === 'now()') {
            if (type === 'TIMESTAMP') {
                return 'CURRENT_TIMESTAMP';
            }
            else if (type === 'DATE') {
                return 'CURRENT_DATE';
            }
            else if (type === 'TIME') {
                return 'CURRENT_TIME';
            }
        }
        return value.toUpperCase();
    }
    else if (value && typeof value === 'object') {
        return JSON.stringify(value);
    }
    return `'${value}'`;
}
;
const Pgsql = {
    q: exports.q,
    alter(builder) {
        const build = builder.build();
        const query = [];
        build.fields.remove.forEach(name => {
            query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} DROP COLUMN ${exports.q}${name}${exports.q}`);
        });
        Object.keys(build.fields.add).forEach(name => {
            const field = build.fields.add[name];
            const column = [];
            const { type, length } = getType(field.type, field.length);
            column.push(`${exports.q}${name}${exports.q}`);
            if (field.autoIncrement) {
                column.push('SERIAL');
            }
            else if (type === 'FLOAT' || type === 'INTEGER') {
                column.push(type);
            }
            else if (Array.isArray(length)) {
                column.push(`${type}(${length.join(', ')})`);
            }
            else if (length) {
                column.push(`${type}(${length})`);
            }
            else {
                column.push(type);
            }
            field.attribute && column.push(field.attribute);
            !field.nullable && column.push('NOT NULL');
            if (field.default) {
                column.push(`DEFAULT ${getDefault(field.default, type)}`);
            }
            else if (field.nullable) {
                column.push('DEFAULT NULL');
            }
            query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                + `ADD COLUMN ${column.join(' ')}`);
        });
        Object.keys(build.fields.update).forEach(name => {
            const field = build.fields.update[name];
            const { type, length } = getType(field.type, field.length);
            if (field.autoIncrement) {
                query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                    + `ALTER COLUMN ${exports.q}${name}${exports.q} TYPE SERIAL`);
            }
            else if (type === 'FLOAT' || type === 'INTEGER') {
                query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                    + `ALTER COLUMN ${exports.q}${name}${exports.q} TYPE ${type}`);
            }
            else if (Array.isArray(length)) {
                query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                    + `ALTER COLUMN ${exports.q}${name}${exports.q} TYPE ${type}(${length.join(', ')})`);
            }
            else if (length) {
                query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                    + `ALTER COLUMN ${exports.q}${name}${exports.q} TYPE ${type}(${length})`);
            }
            else {
                query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                    + `ALTER COLUMN ${exports.q}${name}${exports.q} TYPE ${type}`);
            }
            if (typeof field.nullable === 'boolean' && !field.nullable) {
                query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                    + `ALTER COLUMN ${exports.q}${name}${exports.q} SET NOT NULL`);
            }
            if (field.default) {
                query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                    + `ALTER COLUMN ${exports.q}${name}${exports.q} SET DEFAULT ${getDefault(field.default, type)}`);
            }
            else if (field.nullable) {
                query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                    + `ALTER COLUMN ${exports.q}${name}${exports.q} SET DEFAULT NULL`);
            }
        });
        build.primary.remove.forEach(name => {
            query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                + `DROP CONSTRAINT ${exports.q}${name}${exports.q}`);
        });
        if (build.primary.add.length) {
            query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                + `ADD PRIMARY KEY (${exports.q}${build.primary.add.join(`${exports.q}, ${exports.q}`)}${exports.q})`);
        }
        build.unique.remove.forEach(name => {
            query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                + `DROP UNIQUE ${exports.q}${name}${exports.q}`);
        });
        Object.keys(build.unique.add).forEach(key => {
            query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                + `ADD UNIQUE ${exports.q}${key}${exports.q} (${exports.q}${build.unique.add[key].join(`${exports.q}, ${exports.q}`)}${exports.q})`);
        });
        build.keys.remove.forEach(name => {
            query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                + `DROP INDEX ${exports.q}${name}${exports.q}`);
        });
        Object.keys(build.keys.add).forEach(key => {
            query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                + `ADD INDEX ${exports.q}${key}${exports.q} (${exports.q}${build.keys.add[key].join(`${exports.q}, ${exports.q}`)}${exports.q})`);
        });
        build.foreign.remove.forEach(name => {
            query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                + `DROP CONSTRAINT ${exports.q}${name}${exports.q}`);
        });
        Object.entries(build.foreign.add).forEach(([name, info]) => {
            query.push(`ALTER TABLE ${exports.q}${build.table}${exports.q} `
                + `ADD CONSTRAINT ${exports.q}${name}${exports.q} FOREIGN KEY (${exports.q}${info.local}${exports.q}) `
                + `REFERENCES ${exports.q}${info.table}${exports.q}(${exports.q}${info.foreign}${exports.q}) `
                + (info.delete ? `ON DELETE ${info.delete} ` : '')
                + (info.update ? `ON UPDATE ${info.update} ` : ''));
        });
        if (!query.length) {
            throw Exception_js_1.default.for('No alterations made.');
        }
        return query.map(query => ({ query, values: [] }));
    },
    create(builder) {
        const build = builder.build();
        if (!Object.values(build.fields).length) {
            throw Exception_js_1.default.for('No fields provided');
        }
        const query = [];
        const fields = Object.keys(build.fields).map(name => {
            const field = build.fields[name];
            const column = [];
            const { type, length } = getType(field.type, field.length);
            column.push(`${exports.q}${name}${exports.q}`);
            if (field.autoIncrement) {
                column.push('SERIAL');
            }
            else if (type === 'FLOAT' || type === 'INTEGER') {
                column.push(type);
            }
            else if (Array.isArray(length)) {
                column.push(`${type}(${length.join(', ')})`);
            }
            else if (length) {
                column.push(`${type}(${length})`);
            }
            else {
                column.push(type);
            }
            field.attribute && column.push(field.attribute);
            !field.nullable && column.push('NOT NULL');
            if (field.default) {
                column.push(`DEFAULT ${getDefault(field.default, type)}`);
            }
            else if (field.nullable) {
                column.push('DEFAULT NULL');
            }
            return column.join(' ');
        }).join(', ');
        query.push(fields);
        if (build.primary.length) {
            query.push(`, PRIMARY KEY (${build.primary
                .map(key => `${exports.q}${key}${exports.q}`)
                .join(', ')})`);
        }
        if (Object.keys(build.unique).length) {
            query.push(', ' + Object.keys(build.unique).map(key => `UNIQUE (${exports.q}${build.unique[key].join(`${exports.q}, ${exports.q}`)}${exports.q})`).join(', '));
        }
        if (Object.keys(build.foreign).length) {
            query.push(', ' + Object.entries(build.foreign).map(([name, info]) => {
                return [
                    `CONSTRAINT ${exports.q}${name}${exports.q} FOREIGN KEY (${exports.q}${info.local}${exports.q})`,
                    `REFERENCES ${exports.q}${info.table}${exports.q}(${exports.q}${info.foreign}${exports.q})`,
                    info.delete ? `ON DELETE ${info.delete}` : '',
                    info.update ? `ON UPDATE ${info.update}` : ''
                ].join(' ');
            }).join(', '));
        }
        const transactions = [
            {
                query: `CREATE TABLE IF NOT EXISTS ${exports.q}${build.table}${exports.q} (${query.join(' ')})`,
                values: []
            }
        ];
        if (Object.keys(build.keys).length) {
            Object.keys(build.keys).forEach(key => {
                transactions.push({
                    query: `CREATE INDEX ${exports.q}${key}${exports.q} ON ${exports.q}${build.table}${exports.q}(${exports.q}${build.keys[key].join(`${exports.q}, ${exports.q}`)}${exports.q})`,
                    values: []
                });
            });
        }
        return transactions;
    },
    delete(builder) {
        const build = builder.build();
        if (!build.filters.length) {
            throw Exception_js_1.default.for('No filters provided');
        }
        const query = [];
        const values = [];
        query.push(`DELETE FROM ${exports.q}${build.table}${exports.q}`);
        const filters = build.filters.map(filter => {
            values.push(...filter[1]);
            return filter[0];
        }).join(' AND ');
        query.push(`WHERE ${filters}`);
        return { query: query.join(' '), values };
    },
    drop(table) {
        return { query: `DROP TABLE IF EXISTS ${exports.q}${table}${exports.q}`, values: [] };
    },
    insert(builder) {
        const build = builder.build();
        if (build.values.length === 0) {
            throw Exception_js_1.default.for('No values provided');
        }
        const query = [];
        const values = [];
        query.push(`INSERT INTO ${exports.q}${build.table}${exports.q}`);
        const keys = Object.keys(build.values[0]);
        query.push(`(${exports.q}${keys.join(`${exports.q}, ${exports.q}`)}${exports.q})`);
        const rows = build.values.map((value) => {
            const row = keys.map(key => value[key]);
            values.push(...row);
            return `(${row.map(() => '?').join(', ')})`;
        });
        query.push(`VALUES ${rows.join(', ')}`);
        if (build.returning.length) {
            query.push(`RETURNING ${build.returning.map(column => column !== '*' ? `${exports.q}${column}${exports.q}` : column).join(', ')}`);
        }
        return { query: query.join(' '), values };
    },
    rename(from, to) {
        return {
            query: `RENAME TABLE ${exports.q}${from}${exports.q} TO ${exports.q}${to}${exports.q}`,
            values: []
        };
    },
    select(builder) {
        const build = builder.build();
        if (!build.table) {
            throw Exception_js_1.default.for('No table specified');
        }
        const query = [];
        const values = [];
        const columns = build.columns
            .map(column => column.split(','))
            .flat(1)
            .map(column => column.trim())
            .filter(Boolean);
        query.push(`SELECT ${columns.join(', ')}`);
        if (build.table) {
            if (build.table[1] !== build.table[0]) {
                query.push(`FROM ${exports.q}${build.table[0]}${exports.q} AS ${exports.q}${build.table[1]}${exports.q}`);
            }
            else {
                query.push(`FROM ${exports.q}${build.table[0]}${exports.q}`);
            }
        }
        if (build.relations.length) {
            const relations = build.relations.map(relation => {
                const type = relation.type;
                const table = relation.table !== relation.as
                    ? `${exports.q}${relation.table}${exports.q} AS ${exports.q}${relation.as}${exports.q}`
                    : `${exports.q}${relation.table}${exports.q}`;
                return `${helpers_js_1.joins[type]} JOIN ${table} ON (${exports.q}${relation.from}${exports.q} = ${exports.q}${relation.to}${exports.q})`;
            });
            query.push(relations.join(' '));
        }
        if (build.filters.length) {
            const filters = build.filters.map(filter => {
                values.push(...filter[1]);
                return filter[0];
            }).join(' AND ');
            query.push(`WHERE ${filters}`);
        }
        if (build.sort.length) {
            const sort = build.sort.map((sort) => `${exports.q}${sort[0]}${exports.q} ${sort[1].toUpperCase()}`);
            query.push(`ORDER BY ${sort.join(`, `)}`);
        }
        if (build.limit) {
            query.push(`LIMIT ${build.limit}`);
        }
        if (build.offset) {
            query.push(`OFFSET ${build.offset}`);
        }
        return { query: query.join(' '), values };
    },
    truncate(table, cascade = false) {
        return {
            query: `TRUNCATE TABLE ${exports.q}${table}${exports.q}${cascade ? ' CASCADE' : ''}`,
            values: []
        };
    },
    update(builder) {
        const build = builder.build();
        if (!Object.keys(build.data).length) {
            throw Exception_js_1.default.for('No data provided');
        }
        const query = [];
        const values = [];
        query.push(`UPDATE ${exports.q}${build.table}${exports.q}`);
        if (Object.keys(build.data).length) {
            const data = Object.keys(build.data).map(key => {
                values.push(build.data[key]);
                return `${exports.q}${key}${exports.q} = ?`;
            }).join(', ');
            query.push(`SET ${data}`);
        }
        if (build.filters.length) {
            const filters = build.filters.map(filter => {
                values.push(...filter[1]);
                return filter[0];
            }).join(' AND ');
            query.push(`WHERE ${filters}`);
        }
        return { query: query.join(' '), values };
    },
};
exports.default = Pgsql;
