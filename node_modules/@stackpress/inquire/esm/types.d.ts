import type { NestedObject } from '@stackpress/lib/types';
import type Alter from './builder/Alter.js';
import type Create from './builder/Create.js';
import type Delete from './builder/Delete.js';
import type Insert from './builder/Insert.js';
import type Select from './builder/Select.js';
import type Update from './builder/Update.js';
export type Field = {
    type: string;
    length?: number | [number, number];
    attribute?: string;
    default?: string | number | boolean;
    nullable?: boolean;
    unsigned?: boolean;
    autoIncrement?: boolean;
    comment?: string;
};
export type Relation = {
    type: string;
    table: string;
    as: string;
    from: string;
    to: string;
};
export type ForeignKey = {
    local: string;
    foreign: string;
    table: string;
    delete?: string;
    update?: string;
};
export type AlterFields = {
    add: Record<string, Field>;
    update: Record<string, Field>;
    remove: string[];
};
export type AlterKeys = {
    add: Record<string, string[]>;
    remove: string[];
};
export type AlterUnqiues = {
    add: Record<string, string[]>;
    remove: string[];
};
export type AlterPrimaries = {
    add: string[];
    remove: string[];
};
export type AlterForeignKeys = {
    add: Record<string, ForeignKey>;
    remove: string[];
};
export type StrictValue = string | number;
export type StrictOptValue = StrictValue | null;
export type FlatValue = StrictOptValue | boolean | Date;
export type Value = FlatValue | (FlatValue | NestedObject<Value>)[] | NestedObject<Value>;
export type Resolve<T> = (value: T) => T;
export type Reject = (error: Error) => void;
export type Order = 'ASC' | 'DESC' | 'asc' | 'desc';
export type Join = 'inner' | 'left' | 'left_outer' | 'right' | 'right_outer' | 'full' | 'full_outer' | 'cross';
export type Dialect = {
    q: string;
    alter(builder: Alter): QueryObject[];
    create(builder: Create): QueryObject[];
    delete(builder: Delete): QueryObject;
    drop(table: string): QueryObject;
    insert(builder: Insert): QueryObject;
    rename(from: string, to: string): QueryObject;
    select(builder: Select): QueryObject;
    truncate(table: string, cascade?: boolean): QueryObject;
    update(builder: Update): QueryObject;
};
export type QueryObject = {
    query: string;
    values?: Value[];
};
export type Transaction<R = unknown> = (tx: Connection) => Promise<R>;
export interface Connection<R = unknown> {
    dialect: Dialect;
    format(request: QueryObject): QueryObject;
    query<R = unknown>(request: QueryObject): Promise<R[]>;
    resource(): Promise<R>;
    transaction<R = unknown>(callback: Transaction<R>): Promise<R>;
}
