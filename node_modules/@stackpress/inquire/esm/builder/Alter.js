import Exception from '../Exception.js';
export default class Alter {
    _engine;
    _fields = { add: {}, update: {}, remove: [] };
    _keys = { add: {}, remove: [] };
    _table;
    _primary = { add: [], remove: [] };
    _unique = { add: {}, remove: [] };
    _foreign = { add: {}, remove: [] };
    get engine() {
        return this._engine;
    }
    set engine(engine) {
        this._engine = engine;
    }
    constructor(table, engine) {
        this._table = table;
        this._engine = engine;
    }
    addField(name, field) {
        this._fields.add[name] = field;
        return this;
    }
    addForeignKey(name, foriegnKey) {
        this._foreign.add[name] = foriegnKey;
        return this;
    }
    addKey(name, field) {
        if (!Array.isArray(field)) {
            field = [field];
        }
        this._keys.add[name] = field;
        return this;
    }
    addPrimaryKey(name) {
        this._primary.add.push(name);
        return this;
    }
    addUniqueKey(name, field) {
        if (!Array.isArray(field)) {
            field = [field];
        }
        this._unique.add[name] = field;
        return this;
    }
    build() {
        return {
            fields: this._fields,
            foreign: this._foreign,
            keys: this._keys,
            primary: this._primary,
            table: this._table,
            unique: this._unique
        };
    }
    changeField(name, field) {
        this._fields.update[name] = field;
        return this;
    }
    query(dialect) {
        dialect = dialect || this._engine?.dialect;
        if (!dialect) {
            throw Exception.for('No dialect provided');
        }
        return dialect.alter(this);
    }
    removeField(name) {
        this._fields.remove.push(name);
        return this;
    }
    removeForeignKey(name) {
        this._foreign.remove.push(name);
        return this;
    }
    removeKey(name) {
        this._keys.remove.push(name);
        return this;
    }
    removePrimaryKey(name) {
        this._primary.remove.push(name);
        return this;
    }
    removeUniqueKey(name) {
        this._unique.remove.push(name);
        return this;
    }
    then(resolve, reject = () => { }) {
        if (!this._engine) {
            throw Exception.for('No engine provided');
        }
        const queries = this.query();
        const last = queries.pop();
        return this._engine.transaction(async (connection) => {
            for (const request of queries) {
                await connection.query(connection.format(request));
            }
            return await connection.query(connection.format(last));
        }).then(resolve).catch(reject);
    }
}
