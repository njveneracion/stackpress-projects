import type { Value, Reject, Resolve, Dialect } from '../types.js';
import Engine from '../Engine.js';
export default class Insert<R = unknown> {
    protected _engine?: Engine;
    protected _returning: string[];
    protected _table: string;
    protected _values: Record<string, Value>[];
    get engine(): Engine | undefined;
    set engine(engine: Engine | undefined);
    constructor(table: string, engine?: Engine);
    build(): {
        table: string;
        returning: string[];
        values: Record<string, Value>[];
    };
    query(dialect?: Dialect): import("../types.js").QueryObject;
    returning(columns?: string | string[]): this;
    then(resolve: Resolve<R[]>, reject?: Reject): Promise<void | R[]>;
    values(values: Record<string, Value> | Record<string, Value>[]): this;
}
