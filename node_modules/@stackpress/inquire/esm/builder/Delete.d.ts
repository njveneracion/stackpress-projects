import type { Reject, Resolve, Dialect, FlatValue } from '../types.js';
import Engine from '../Engine.js';
export default class Delete<R = unknown> {
    protected _engine?: Engine;
    protected _filters: [string, FlatValue[]][];
    protected _table: string;
    get engine(): Engine | undefined;
    set engine(engine: Engine | undefined);
    constructor(table: string, engine?: Engine);
    build(): {
        table: string;
        filters: [string, FlatValue[]][];
    };
    query(dialect?: Dialect): import("../types.js").QueryObject;
    then(resolve: Resolve<R[]>, reject?: Reject): Promise<void | R[]>;
    where(query: string, values?: FlatValue[]): this;
}
