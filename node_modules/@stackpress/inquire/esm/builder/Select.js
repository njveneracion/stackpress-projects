import Exception from '../Exception.js';
export default class Select {
    _columns = [];
    _engine;
    _offset = 0;
    _filters = [];
    _limit = 0;
    _relations = [];
    _sort = [];
    _table;
    get engine() {
        return this._engine;
    }
    set engine(engine) {
        this._engine = engine;
    }
    constructor(select = '*', engine) {
        if (Array.isArray(select)) {
            this._columns = select;
        }
        else {
            this._columns = [select];
        }
        this._engine = engine;
    }
    build() {
        return {
            columns: this._columns,
            filters: this._filters,
            limit: this._limit,
            offset: this._offset,
            relations: this._relations,
            sort: this._sort,
            table: this._table
        };
    }
    from(table, as) {
        this._table = [table, as || table];
        return this;
    }
    join(type, table, from, to, as) {
        this._relations.push({ type, table, as: as || table, from, to });
        return this;
    }
    limit(limit) {
        this._limit = limit;
        return this;
    }
    offset(offset) {
        this._offset = offset;
        return this;
    }
    order(column, direction = 'ASC') {
        this._sort.push([column, direction]);
        return this;
    }
    query(dialect) {
        dialect = dialect || this._engine?.dialect;
        if (!dialect) {
            throw Exception.for('No dialect provided');
        }
        return dialect.select(this);
    }
    then(resolve, reject = () => { }) {
        if (!this._engine) {
            throw Exception.for('No engine provided');
        }
        return this._engine.query(this.query()).then(resolve).catch(reject);
    }
    where(query, values = []) {
        this._filters.push([query, values]);
        return this;
    }
}
