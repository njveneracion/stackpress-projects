import type { Field, Reject, Resolve, Dialect, ForeignKey, QueryObject } from '../types.js';
import Engine from '../Engine.js';
export default class Create<R = unknown> {
    protected _engine?: Engine;
    protected _fields: Record<string, Field>;
    protected _foreign: Record<string, ForeignKey>;
    protected _keys: Record<string, string[]>;
    protected _primary: string[];
    protected _table: string;
    protected _unique: Record<string, string[]>;
    get engine(): Engine | undefined;
    set engine(engine: Engine | undefined);
    constructor(table: string, engine?: Engine);
    addField(name: string, field: Field): this;
    addForeignKey(name: string, foriegnKey: ForeignKey): this;
    addKey(name: string, field: string | string[]): this;
    addPrimaryKey(name: string): this;
    addUniqueKey(name: string, field: string | string[]): this;
    build(): {
        fields: Record<string, Field>;
        foreign: Record<string, ForeignKey>;
        keys: Record<string, string[]>;
        primary: string[];
        table: string;
        unique: Record<string, string[]>;
    };
    query(dialect?: Dialect): QueryObject[];
    then(resolve: Resolve<R[]>, reject?: Reject): Promise<void | R[]>;
}
