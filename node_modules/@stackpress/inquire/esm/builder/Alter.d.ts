import type { Field, Reject, Resolve, Dialect, ForeignKey, AlterFields, AlterKeys, AlterUnqiues, AlterPrimaries, AlterForeignKeys, QueryObject } from '../types.js';
import type Engine from '../Engine.js';
export default class Alter<R = unknown> {
    protected _engine?: Engine;
    protected _fields: AlterFields;
    protected _keys: AlterKeys;
    protected _table: string;
    protected _primary: AlterPrimaries;
    protected _unique: AlterUnqiues;
    protected _foreign: AlterForeignKeys;
    get engine(): Engine | undefined;
    set engine(engine: Engine | undefined);
    constructor(table: string, engine?: Engine);
    addField(name: string, field: Field): this;
    addForeignKey(name: string, foriegnKey: ForeignKey): this;
    addKey(name: string, field: string | string[]): this;
    addPrimaryKey(name: string): this;
    addUniqueKey(name: string, field: string | string[]): this;
    build(): {
        fields: AlterFields;
        foreign: AlterForeignKeys;
        keys: AlterKeys;
        primary: AlterPrimaries;
        table: string;
        unique: AlterUnqiues;
    };
    changeField(name: string, field: Field): this;
    query(dialect?: Dialect): QueryObject[];
    removeField(name: string): this;
    removeForeignKey(name: string): this;
    removeKey(name: string): this;
    removePrimaryKey(name: string): this;
    removeUniqueKey(name: string): this;
    then(resolve: Resolve<R[]>, reject?: Reject): Promise<void | R[]>;
}
