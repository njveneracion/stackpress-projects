import type { Value, Reject, Resolve, Dialect, FlatValue } from '../types.js';
import Engine from '../Engine.js';
export default class Update<R = unknown> {
    protected _data: Record<string, Value>;
    protected _engine?: Engine;
    protected _filters: [string, FlatValue[]][];
    protected _table: string;
    get engine(): Engine | undefined;
    set engine(engine: Engine | undefined);
    constructor(table: string, engine?: Engine);
    build(): {
        data: Record<string, Value>;
        filters: [string, FlatValue[]][];
        table: string;
    };
    query(dialect?: Dialect): import("../types.js").QueryObject;
    set(data: Record<string, Value>): this;
    then(resolve: Resolve<R[]>, reject?: Reject): Promise<void | R[]>;
    where(query: string, values?: FlatValue[]): this;
}
