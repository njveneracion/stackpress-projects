import { serve as reactus, configure } from 'reactus/server';
import Status from '@stackpress/lib/Status';
export function config(server) {
    const cwd = server.config.path('server.cwd', process.cwd());
    const options = server.config.path('view.engine', {});
    const engine = reactus(configure({
        ...options,
        cwd
    }));
    server.register('reactus', engine);
    server.view.render = (action, props) => engine.render(action, props);
    server.view.engine = async (action, req, res, ctx) => {
        const status = Status.get(res.code || 200);
        res.setStatus(status.code, status.status);
        const noview = ctx.config.path('view.noview', 'json');
        if (res.redirected
            || req.data.has(noview)
            || typeof res.body === 'string')
            return;
        const props = ctx.config.path('view.props', {});
        const session = await ctx.resolve('me', req);
        const html = await ctx.view.render(action, {
            data: { ...props, ...res.data() },
            session: session.results,
            request: {
                url: {
                    hash: req.url.hash,
                    host: req.url.host,
                    hostname: req.url.hostname,
                    href: req.url.href,
                    origin: req.url.origin,
                    pathname: req.url.pathname,
                    port: req.url.port,
                    protocol: req.url.protocol,
                    search: req.url.search
                },
                headers: Object.fromEntries(req.headers.entries()),
                session: req.session.data,
                method: req.method,
                mime: req.mimetype,
                data: req.data()
            },
            response: res.toStatusResponse()
        });
        if (html) {
            res.setHTML(html, status.code, status.status);
        }
    };
}
;
