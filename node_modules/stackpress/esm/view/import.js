export async function csvToFormData(file) {
    const papaparse = await import('papaparse').then(m => m.default);
    return await new Promise((resolve, reject) => {
        papaparse.parse(file, {
            header: true,
            skipEmptyLines: true,
            complete: (results) => {
                if (results.errors.length) {
                    reject(results.errors);
                    return;
                }
                const data = new FormData();
                for (let i = 0; i < results.data.length; i++) {
                    for (const [key, value] of Object.entries(results.data[i])) {
                        data.append(`rows[${i}][${key}]`, value.toString());
                    }
                }
                resolve(data);
            }
        });
    });
}
export function batchImportSend(url, token, data) {
    return new Promise((resolve, reject) => {
        fetch(url, {
            method: 'POST',
            body: data,
            headers: { 'Authorization': token }
        }).then(response => {
            response.json().then((response) => {
                if (response.code === 200) {
                    resolve(response.results);
                    return;
                }
                else if (response.results) {
                    reject(response.results);
                    return;
                }
                else if (response.error) {
                    reject(new Error(response.error));
                    return;
                }
                reject(new Error('Unknown error'));
            });
        });
    });
}
export async function batchAndSend(url, token, file, notify) {
    notify = notify || (() => { });
    csvToFormData(file).then(data => {
        batchImportSend(url, token, data).then(() => {
            window.location.reload();
        }).catch(error => {
            if (Array.isArray(error)) {
                error.forEach((error, i) => {
                    const errors = error.errors
                        ? Object.entries(error.errors).map(error => `${error[0]}: ${error[1]}`)
                        : [];
                    notify('error', [
                        `ROW ${i}: ${error.error}`,
                        ...errors
                    ].join(' - '));
                });
                return;
            }
            notify('error', error.message);
        });
    }).catch((errors) => {
        errors.forEach(error => notify('error', `ROW ${error.row}: ${error.message}`));
    });
}
