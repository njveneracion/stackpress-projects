"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = getEventFactory;
const get_js_1 = __importDefault(require("../actions/get.js"));
function getEventFactory(model) {
    return function GetEventAction(req, res, ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            if (res.body || (res.code && res.code !== 200)) {
                return;
            }
            const engine = ctx.plugin('database');
            if (!engine)
                return;
            const value = req.data('value');
            if (typeof value === 'undefined')
                return;
            const key = req.data('key');
            const columns = req.data('columns');
            const selectors = Array.isArray(columns) && columns.every(column => typeof column === 'string') ? columns : ['*'];
            const seed = ctx.config.path('database.seed');
            const response = yield (0, get_js_1.default)(model, engine, key, value, selectors, seed);
            if (response.code === 200 && !response.results) {
                response.code = 404;
                response.status = 'Not Found';
            }
            res.fromStatusResponse(response);
        });
    };
}
;
