"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Actions = exports.upsert = exports.update = exports.search = exports.restore = exports.remove = exports.get = exports.detail = exports.create = exports.batch = void 0;
exports.default = actions;
const batch_js_1 = __importDefault(require("./batch.js"));
exports.batch = batch_js_1.default;
const create_js_1 = __importDefault(require("./create.js"));
exports.create = create_js_1.default;
const detail_js_1 = __importDefault(require("./detail.js"));
exports.detail = detail_js_1.default;
const get_js_1 = __importDefault(require("./get.js"));
exports.get = get_js_1.default;
const remove_js_1 = __importDefault(require("./remove.js"));
exports.remove = remove_js_1.default;
const restore_js_1 = __importDefault(require("./restore.js"));
exports.restore = restore_js_1.default;
const search_js_1 = __importDefault(require("./search.js"));
exports.search = search_js_1.default;
const update_js_1 = __importDefault(require("./update.js"));
exports.update = update_js_1.default;
const upsert_js_1 = __importDefault(require("./upsert.js"));
exports.upsert = upsert_js_1.default;
class Actions {
    constructor(model, engine, seed) {
        this.engine = engine;
        this.model = model;
        this._seed = seed;
    }
    batch(rows) {
        return __awaiter(this, void 0, void 0, function* () {
            return (0, batch_js_1.default)(this.model, this.engine, rows, this._seed);
        });
    }
    create(input) {
        return (0, create_js_1.default)(this.model, this.engine, input, this._seed);
    }
    detail(ids, columns) {
        return (0, detail_js_1.default)(this.model, this.engine, ids, columns, this._seed);
    }
    get(key, value, columns) {
        return (0, get_js_1.default)(this.model, this.engine, key, value, columns, this._seed);
    }
    remove(ids) {
        return (0, remove_js_1.default)(this.model, this.engine, ids);
    }
    restore(ids) {
        return (0, restore_js_1.default)(this.model, this.engine, ids);
    }
    search(query) {
        return (0, search_js_1.default)(this.model, this.engine, query, this._seed);
    }
    update(ids, input) {
        return (0, update_js_1.default)(this.model, this.engine, ids, input, this._seed);
    }
    upsert(input) {
        return (0, upsert_js_1.default)(this.model, this.engine, input, this._seed);
    }
}
exports.Actions = Actions;
function actions(model, engine, seed) {
    return new Actions(model, engine, seed);
}
