"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AdminCreatePageFactory;
function AdminCreatePageFactory(model) {
    return function AdminCreatePage(req, res, ctx) {
        return __awaiter(this, void 0, void 0, function* () {
            if (res.body || (res.code && res.code !== 200)) {
                return;
            }
            const view = ctx.config.path('view', {});
            const brand = ctx.config.path('brand', {});
            const language = ctx.config.path('language', {
                key: 'locale',
                locale: 'en_US',
                languages: {}
            });
            const admin = ctx.config.path('admin', {});
            res.data.set('view', {
                base: view.base || '/',
                props: view.props || {}
            });
            res.data.set('brand', {
                name: brand.name || 'Stackpress',
                logo: brand.logo || '/logo.png',
                icon: brand.icon || '/icon.png',
                favicon: brand.favicon || '/favicon.ico'
            });
            res.data.set('language', {
                key: language.key || 'locale',
                locale: language.locale || 'en_US',
                languages: language.languages || {}
            });
            res.data.set('admin', {
                name: admin.name || 'Admin',
                base: admin.base || '/admin',
                menu: admin.menu || []
            });
            if (req.method === 'POST') {
                const response = yield ctx.resolve(`${model.dash}-create`, req, res);
                if (res.code !== 200) {
                    return;
                }
                const ids = model.ids.map(column => (response.results || {})[column.name]).filter(Boolean);
                const base = admin.base || '/admin';
                res.redirect(`${base}/${model.dash}/detail/${ids.join('/')}`);
            }
        });
    };
}
;
