"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = AuthSignin;
const actions_js_1 = require("../actions.js");
function AuthSignin(req, res, ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        const type = req.data.path('type', 'username');
        const password = req.data.path('password', true);
        const engine = ctx.plugin('database');
        const client = ctx.plugin('client');
        const seed = ctx.config.path('database.seed', 'abc123');
        const response = yield (0, actions_js_1.signin)(type, req.data(), seed, engine, client, Boolean(password));
        if (response.results) {
            const results = response.results;
            delete results.secret;
        }
        res.fromStatusResponse(response);
        if (response.code !== 200) {
            return;
        }
        const session = ctx.plugin('session');
        const results = response.results;
        res.session.set(session.key, yield session.create({
            id: results.profile.id,
            name: results.profile.name,
            image: results.profile.image,
            roles: results.profile.roles
        }));
    });
}
