"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = SignupPage;
function SignupPage(req, res, ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        if (res.body || (res.code && res.code !== 200)) {
            return;
        }
        const view = ctx.config.path('view', {});
        const brand = ctx.config.path('brand', {});
        const auth = ctx.config.path('auth');
        res.data.set('view', {
            base: view.base || '/',
            props: view.props || {}
        });
        res.data.set('brand', {
            name: brand.name || 'Stackpress',
            logo: brand.logo || '/logo.png',
            icon: brand.icon || '/icon.png',
            favicon: brand.favicon || '/favicon.ico',
        });
        res.data.set('auth', {
            base: auth.base || '/auth',
            roles: auth.roles || [],
            username: !!auth.username,
            email: !!auth.email,
            phone: !!auth.phone,
            password: auth.password || {}
        });
        const redirect = req.data.path('redirect_uri', `${auth.base}/signin`);
        const session = ctx.plugin('session');
        const me = session.load(req);
        const guest = yield me.guest();
        if (req.method === 'POST') {
            yield ctx.emit('auth-signup', req, res);
            if (res.code === 200) {
                res.redirect(redirect);
            }
        }
        else if (!guest) {
            res.redirect(redirect);
        }
    });
}
;
