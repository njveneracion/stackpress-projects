"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = generate;
const ts_morph_1 = require("ts-morph");
const Revisions_js_1 = __importDefault(require("../Revisions.js"));
function generate(directory, schema, registry, server) {
    return __awaiter(this, void 0, void 0, function* () {
        for (const model of registry.model.values()) {
            const filepath = `${model.name}/config.ts`;
            const source = directory.createSourceFile(filepath, '', { overwrite: true });
            source.addImportDeclaration({
                isTypeOnly: true,
                moduleSpecifier: 'stackpress/Model',
                defaultImport: 'Model'
            });
            source.addImportDeclaration({
                moduleSpecifier: '../config.js',
                defaultImport: 'registry'
            });
            source.addStatements(`const config = registry.model.get('${model.name}') as Model;`);
            source.addStatements(`export default config;`);
        }
        for (const fieldset of registry.fieldset.values()) {
            const filepath = `${fieldset.name}/config.ts`;
            const source = directory.createSourceFile(filepath, '', { overwrite: true });
            source.addImportDeclaration({
                isTypeOnly: true,
                moduleSpecifier: 'stackpress/Fieldset',
                defaultImport: 'Fieldset'
            });
            source.addImportDeclaration({
                moduleSpecifier: '../config.js',
                defaultImport: 'registry'
            });
            source.addStatements(`const config = registry.fieldset.get('${fieldset.name}') as Fieldset;`);
            source.addStatements(`export default config;`);
        }
        const revisions = server.config.path('client.revisions');
        if (revisions) {
            Revisions_js_1.default.insert(revisions, server.loader, schema);
        }
        const source = directory.createSourceFile('config.ts', '', { overwrite: true });
        source.addImportDeclaration({
            moduleSpecifier: '@stackpress/idea-parser',
            namedImports: ['SchemaConfig']
        });
        source.addImportDeclaration({
            moduleSpecifier: 'stackpress/Registry',
            defaultImport: 'Registry'
        });
        source.addVariableStatement({
            isExported: true,
            declarationKind: ts_morph_1.VariableDeclarationKind.Const,
            declarations: [{
                    name: 'config',
                    type: 'SchemaConfig',
                    initializer: JSON.stringify(schema, null, 2)
                }]
        });
        source.addVariableStatement({
            declarationKind: ts_morph_1.VariableDeclarationKind.Const,
            declarations: [{
                    name: 'registry',
                    initializer: 'new Registry(config)'
                }]
        });
        source.addStatements(`export default registry;`);
    });
}
;
