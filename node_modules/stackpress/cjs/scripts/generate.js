"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = generate;
exports.createProject = createProject;
exports.getBuildPath = getBuildPath;
exports.getTransformer = getTransformer;
const node_path_1 = __importDefault(require("node:path"));
const FileLoader_1 = __importDefault(require("@stackpress/lib/FileLoader"));
function generate(server, idea, tsconfig, cli) {
    return __awaiter(this, void 0, void 0, function* () {
        const build = getBuildPath(server);
        const transformer = yield getTransformer(server, idea);
        const project = yield createProject(build, tsconfig);
        (cli === null || cli === void 0 ? void 0 : cli.verbose) && cli.control.system('Looking up ideas...');
        yield server.resolve('idea', { transformer });
        const directory = project.createDirectory(build);
        (cli === null || cli === void 0 ? void 0 : cli.verbose) && cli.control.system('Generating ideas...');
        yield transformer.transform({ cli, project: directory });
        const lang = server.config.path('client.lang', 'js');
        if (lang === 'ts') {
            (cli === null || cli === void 0 ? void 0 : cli.verbose) && cli.control.system('Converting to typescript...');
            const prettier = yield Promise.resolve().then(() => __importStar(require('prettier')));
            project.saveSync();
            const files = project.getSourceFiles();
            for (const file of files) {
                const filePath = file.getFilePath();
                const content = file.getFullText();
                const pretty = yield prettier.default.format(content, {
                    parser: 'typescript'
                });
                const fs = server.loader.fs;
                yield fs.writeFile(filePath, pretty);
            }
        }
        else {
            (cli === null || cli === void 0 ? void 0 : cli.verbose) && cli.control.system('Converting to javascript...');
            yield project.emit();
        }
        (cli === null || cli === void 0 ? void 0 : cli.verbose) && cli.control.success('Ideas generated');
    });
}
;
function createProject(output, tsconfig) {
    return __awaiter(this, void 0, void 0, function* () {
        const morph = yield Promise.resolve().then(() => __importStar(require('ts-morph')));
        const { Project, IndentationText } = morph;
        return new Project({
            tsConfigFilePath: tsconfig,
            skipAddingFilesFromTsConfig: true,
            compilerOptions: {
                outDir: output,
                declaration: true,
                declarationMap: false,
                sourceMap: false,
            },
            manipulationSettings: {
                indentationText: IndentationText.TwoSpaces
            }
        });
    });
}
;
function getBuildPath(server) {
    let build = server.config.path('client.build');
    if (!build) {
        const cwd = server.config.path('server.cwd', process.cwd());
        const name = server.config.path('client.package', 'stackpress-client');
        build = node_path_1.default.join(cwd, 'node_modules', name);
    }
    return build;
}
;
function getTransformer(server, idea) {
    return __awaiter(this, void 0, void 0, function* () {
        const loader = new FileLoader_1.default(server.loader.fs, server.loader.cwd);
        const transformer = yield Promise.resolve().then(() => __importStar(require('@stackpress/idea-transformer/Transformer')));
        const Transformer = transformer.default;
        return new Transformer(idea, loader);
    });
}
;
