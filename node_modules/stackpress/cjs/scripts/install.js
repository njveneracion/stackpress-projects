"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = install;
const Revisions_js_1 = __importDefault(require("../client/Revisions.js"));
const helpers_js_1 = require("../sql/helpers.js");
function install(server, database, cli) {
    return __awaiter(this, void 0, void 0, function* () {
        const config = server.config('client') || {};
        const client = server.plugin('client') || {};
        const models = Object.values(client.model);
        const queries = [];
        const order = (0, helpers_js_1.sequence)(models.map(model => model.config));
        for (const model of order) {
            queries.push(database.dialect.drop(model.snake));
        }
        for (const model of order.reverse()) {
            const exists = models.find(map => map.config.name === model.name);
            if (exists) {
                const create = exists.schema;
                create.engine = database;
                queries.push(...create.query());
            }
        }
        if (config.revisions) {
            const revisions = new Revisions_js_1.default(config.revisions, server.loader);
            if (revisions.size() === 0) {
                revisions.insert(client.config);
            }
        }
        if (queries.length) {
            (cli === null || cli === void 0 ? void 0 : cli.verbose) && cli.control.system('Installing...');
            yield database.transaction((connection) => __awaiter(this, void 0, void 0, function* () {
                for (const query of queries) {
                    (cli === null || cli === void 0 ? void 0 : cli.verbose) && cli.control.info(query.query);
                    yield connection.query(query);
                }
            }));
            (cli === null || cli === void 0 ? void 0 : cli.verbose) && cli.control.success('Installation Complete.');
        }
    });
}
;
