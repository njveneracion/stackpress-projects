"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = build;
const reactus = __importStar(require("reactus"));
function build(server, cli) {
    return __awaiter(this, void 0, void 0, function* () {
        const cwd = server.config.path('server.cwd', process.cwd());
        const plugins = server.config.path('view.engine.plugins', []);
        const cssFiles = server.config.path('view.engine.cssFiles', []);
        const assetPath = server.config.path('view.engine.assetPath');
        const clientPath = server.config.path('view.engine.clientPath');
        const pagePath = server.config.path('view.engine.pagePath');
        const engine = reactus.build({
            cwd,
            plugins,
            assetPath,
            clientPath,
            pagePath,
            cssFiles
        });
        for (const views of server.views.values()) {
            for (const view of views) {
                yield engine.set(view.entry);
            }
        }
        if (engine.size === 0) {
            return [];
        }
        const responses = [];
        if (clientPath) {
            (cli === null || cli === void 0 ? void 0 : cli.verbose) && cli.control.system('Building clients...');
            responses.push(yield engine.buildAllClients());
            (cli === null || cli === void 0 ? void 0 : cli.verbose) && cli.control.success('Clients built.');
        }
        if (assetPath) {
            (cli === null || cli === void 0 ? void 0 : cli.verbose) && cli.control.system('Building assets...');
            responses.push(yield engine.buildAllAssets());
            (cli === null || cli === void 0 ? void 0 : cli.verbose) && cli.control.success('Assets built.');
        }
        if (pagePath) {
            (cli === null || cli === void 0 ? void 0 : cli.verbose) && cli.control.system('Building pages...');
            responses.push(yield engine.buildAllPages());
            (cli === null || cli === void 0 ? void 0 : cli.verbose) && cli.control.success('Pages built.');
        }
        return responses.map(response => {
            const results = response.results;
            if (typeof (results === null || results === void 0 ? void 0 : results.contents) === 'string') {
                results.contents = results.contents.substring(0, 100) + ' ...';
            }
            return results;
        });
    });
}
;
