"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = APIToken;
const helpers_js_1 = require("../../sql/helpers.js");
const helpers_js_2 = require("../helpers.js");
function APIToken(req, res, ctx) {
    return __awaiter(this, void 0, void 0, function* () {
        if (res.body || (res.code && res.code !== 200)) {
            return;
        }
        const authorization = (0, helpers_js_2.authorize)(req, res);
        if (!authorization) {
            return;
        }
        const { id, secret } = authorization;
        const code = req.data('code');
        if (!code || !secret) {
            return (0, helpers_js_2.unauthorized)(res);
        }
        const session = yield ctx.resolve('session-detail', { id: code });
        const data = session.results;
        if (!data || data.applicationId !== id) {
            return (0, helpers_js_2.unauthorized)(res);
        }
        else if (data.expires && data.expires.getTime() < Date.now()) {
            return (0, helpers_js_2.unauthorized)(res);
        }
        res.fromStatusResponse((0, helpers_js_1.toResponse)({
            token_type: 'Bearer',
            access_token: data.id,
            access_secret: data.secret,
            expires_in: data.expires
                ? Math.floor((data.expires.getTime() - Date.now()) / 1000)
                : 0,
            user: {
                id: data.profile.id,
                name: data.profile.name,
                image: data.profile.image,
                created: data.profile.created
            }
        }));
    });
}
