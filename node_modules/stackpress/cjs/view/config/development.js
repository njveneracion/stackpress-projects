"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.config = config;
exports.route = route;
const node_http_1 = require("node:http");
const reactus_1 = __importStar(require("reactus"));
const Status_1 = __importDefault(require("@stackpress/lib/Status"));
function config(server) {
    const cwd = server.config.path('server.cwd', process.cwd());
    const options = server.config.path('view.engine', {});
    const engine = (0, reactus_1.default)(reactus_1.Server.configure(Object.assign(Object.assign({}, options), { cwd, production: false })));
    server.register('reactus', engine);
    server.view.render = (action, props) => engine.render(action, props);
    server.view.engine = (action, req, res, ctx) => __awaiter(this, void 0, void 0, function* () {
        const status = Status_1.default.get(res.code || 200);
        res.setStatus(status.code, status.status);
        const noview = ctx.config.path('view.noview', 'json');
        if (res.redirected
            || req.data.has(noview)
            || typeof res.body === 'string')
            return;
        const props = ctx.config.path('view.props', {});
        const session = yield ctx.resolve('me', req);
        const html = yield ctx.view.render(action, {
            data: Object.assign(Object.assign({}, props), res.data()),
            session: session.results,
            request: {
                url: {
                    hash: req.url.hash,
                    host: req.url.host,
                    hostname: req.url.hostname,
                    href: req.url.href,
                    origin: req.url.origin,
                    pathname: req.url.pathname,
                    port: req.url.port,
                    protocol: req.url.protocol,
                    search: req.url.search
                },
                headers: Object.fromEntries(req.headers.entries()),
                session: req.session.data,
                method: req.method,
                mime: req.mimetype,
                data: req.data()
            },
            response: res.toStatusResponse()
        });
        if (html) {
            res.setHTML(html, status.code, status.status);
        }
    });
}
;
function route(server) {
    server.on('request', (req, res, ctx) => __awaiter(this, void 0, void 0, function* () {
        const mode = ctx.config.path('server.mode', 'production');
        if (mode === 'production'
            || !(req.resource instanceof node_http_1.IncomingMessage)
            || !(res.resource instanceof node_http_1.ServerResponse))
            return;
        const reactus = ctx.plugin('reactus');
        const im = req.resource;
        const sr = res.resource;
        yield reactus.http(im, sr);
        if (sr.headersSent)
            res.stop();
    }));
}
;
