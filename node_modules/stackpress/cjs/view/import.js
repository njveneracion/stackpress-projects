"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.csvToFormData = csvToFormData;
exports.batchImportSend = batchImportSend;
exports.batchAndSend = batchAndSend;
function csvToFormData(file) {
    return __awaiter(this, void 0, void 0, function* () {
        const papaparse = yield Promise.resolve().then(() => __importStar(require('papaparse'))).then(m => m.default);
        return yield new Promise((resolve, reject) => {
            papaparse.parse(file, {
                header: true,
                skipEmptyLines: true,
                complete: (results) => {
                    if (results.errors.length) {
                        reject(results.errors);
                        return;
                    }
                    const data = new FormData();
                    for (let i = 0; i < results.data.length; i++) {
                        for (const [key, value] of Object.entries(results.data[i])) {
                            data.append(`rows[${i}][${key}]`, value.toString());
                        }
                    }
                    resolve(data);
                }
            });
        });
    });
}
function batchImportSend(url, token, data) {
    return new Promise((resolve, reject) => {
        fetch(url, {
            method: 'POST',
            body: data,
            headers: { 'Authorization': token }
        }).then(response => {
            response.json().then((response) => {
                if (response.code === 200) {
                    resolve(response.results);
                    return;
                }
                else if (response.results) {
                    reject(response.results);
                    return;
                }
                else if (response.error) {
                    reject(new Error(response.error));
                    return;
                }
                reject(new Error('Unknown error'));
            });
        });
    });
}
function batchAndSend(url, token, file, notify) {
    return __awaiter(this, void 0, void 0, function* () {
        notify = notify || (() => { });
        csvToFormData(file).then(data => {
            batchImportSend(url, token, data).then(() => {
                window.location.reload();
            }).catch(error => {
                if (Array.isArray(error)) {
                    error.forEach((error, i) => {
                        const errors = error.errors
                            ? Object.entries(error.errors).map(error => `${error[0]}: ${error[1]}`)
                            : [];
                        notify('error', [
                            `ROW ${i}: ${error.error}`,
                            ...errors
                        ].join(' - '));
                    });
                    return;
                }
                notify('error', error.message);
            });
        }).catch((errors) => {
            errors.forEach(error => notify('error', `ROW ${error.row}: ${error.message}`));
        });
    });
}
