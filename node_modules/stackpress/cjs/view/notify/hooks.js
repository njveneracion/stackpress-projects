"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.notify = notify;
exports.flash = flash;
exports.unload = unload;
exports.useNotify = useNotify;
const react_1 = require("react");
const universal_cookie_1 = __importDefault(require("universal-cookie"));
const react_toastify_1 = require("react-toastify");
const NotifyContext_js_1 = __importStar(require("./NotifyContext.js"));
const cookieConfig = { path: '/' };
const cookie = new universal_cookie_1.default();
function notify(type, message, autoClose) {
    if (!autoClose) {
        autoClose = NotifyContext_js_1.config.autoClose || 5000;
    }
    const options = Object.assign(Object.assign({}, NotifyContext_js_1.config), { autoClose });
    switch (type) {
        case 'info':
            react_toastify_1.toast.info(message, options);
            break;
        case 'warn':
            react_toastify_1.toast.warn(message, options);
            break;
        case 'error':
            react_toastify_1.toast.error(message, options);
            break;
        case 'success':
            react_toastify_1.toast.success(message, options);
            break;
    }
}
function flash(type, message, close = 5000) {
    cookie.set('flash', JSON.stringify({ type, message, close }), cookieConfig);
}
;
function unload() {
    const value = cookie.get('flash');
    if (value) {
        cookie.remove('flash', cookieConfig);
        const args = typeof value === 'string'
            ? JSON.parse(value)
            : value;
        notify(args.type, args.message, args.close);
    }
}
;
function useNotify() {
    const { config } = (0, react_1.useContext)(NotifyContext_js_1.default);
    const handlers = {
        notify(type, message, autoClose) {
            if (!autoClose) {
                autoClose = config.autoClose || 5000;
            }
            const options = Object.assign(Object.assign({}, config), { autoClose });
            switch (type) {
                case 'info':
                    react_toastify_1.toast.info(message, options);
                    break;
                case 'warn':
                    react_toastify_1.toast.warn(message, options);
                    break;
                case 'error':
                    react_toastify_1.toast.error(message, options);
                    break;
                case 'success':
                    react_toastify_1.toast.success(message, options);
                    break;
            }
        },
        flash,
        unload() {
            const value = cookie.get('flash');
            if (value) {
                cookie.remove('flash', cookieConfig);
                const args = JSON.parse(value);
                handlers.notify(args.type, args.message, args.close);
            }
        }
    };
    return handlers;
}
