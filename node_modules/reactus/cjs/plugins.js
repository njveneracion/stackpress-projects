"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.css = css;
exports.file = file;
exports.hmr = hmr;
exports.vfs = vfs;
const node_path_1 = __importDefault(require("node:path"));
const constants_js_1 = require("./constants.js");
function css(cssFiles) {
    return {
        name: 'reactus-inject-css',
        enforce: 'pre',
        transform(code, id) {
            if (id.endsWith('.tsx')) {
                const imports = cssFiles.map(css => `import '${css}';`);
                return imports.join('\n') + '\n' + code;
            }
            return code;
        },
    };
}
function file(loader, extnames = ['.js', '.ts', '.tsx']) {
    const cache = new Map();
    return {
        name: 'reactus-file-loader',
        resolveId(source, importer) {
            return __awaiter(this, void 0, void 0, function* () {
                if (source.startsWith('/'))
                    return;
                if (cache.has(source))
                    return cache.get(source);
                let pwd = loader.cwd;
                if (importer) {
                    if (importer.startsWith('imfs:')) {
                        importer = importer.substring(5).split(';')[2];
                    }
                    pwd = node_path_1.default.dirname(importer);
                }
                const filepath = yield loader.resolveFile(source, extnames, pwd);
                if (filepath) {
                    cache.set(source, filepath);
                    return filepath;
                }
            });
        }
    };
}
function hmr(server) {
    const { routes, manifest } = server;
    return (req, res, next) => __awaiter(this, void 0, void 0, function* () {
        if (!req.url
            || !req.url.startsWith(routes.client)
            || !req.url.endsWith('.tsx')
            || res.headersSent) {
            next();
            return;
        }
        const id = req.url.slice(routes.client.length + 1, -4);
        const document = manifest.find(id);
        if (document) {
            const client = yield document.render.renderHMRClient();
            if (client) {
                res.setHeader('Content-Type', 'text/javascript');
                res.end(client);
                return;
            }
        }
        next();
    });
}
function vfs(vfs) {
    return {
        name: 'reactus-virtual-loader',
        configureServer(server) {
            server.watcher.on('change', filePath => {
                if (filePath.startsWith(constants_js_1.VFS_PROTOCOL)) {
                    const { ws, moduleGraph: graph } = server;
                    const mod = graph.getModuleById(filePath);
                    if (mod) {
                        graph.invalidateModule(mod);
                        ws.send({ type: 'full-reload', path: '*' });
                    }
                }
            });
        },
        resolveId(source, importer) {
            if (source.startsWith(constants_js_1.VFS_PROTOCOL)) {
                return source;
            }
            else if (source.includes(constants_js_1.VFS_PROTOCOL)) {
                return source.substring(source.indexOf(constants_js_1.VFS_PROTOCOL));
            }
            else if ((importer === null || importer === void 0 ? void 0 : importer.startsWith(constants_js_1.VFS_PROTOCOL))
                && (source.startsWith('./') || source.startsWith('../'))) {
                const file = importer.substring(constants_js_1.VFS_PROTOCOL.length);
                const resolved = node_path_1.default.resolve(node_path_1.default.dirname(file), source);
                return !node_path_1.default.extname(resolved)
                    ? resolved + node_path_1.default.extname(file)
                    : resolved;
            }
        },
        load(id) {
            if (id.startsWith(constants_js_1.VFS_PROTOCOL)) {
                const file = id.substring(constants_js_1.VFS_PROTOCOL.length);
                if (vfs.has(file)) {
                    const contents = vfs.get(file);
                    if (typeof contents === 'string') {
                        return contents;
                    }
                }
                return null;
            }
        }
    };
}
