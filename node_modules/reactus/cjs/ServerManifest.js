"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const promises_1 = __importDefault(require("node:fs/promises"));
const node_path_1 = __importDefault(require("node:path"));
const Exception_js_1 = __importDefault(require("./Exception.js"));
const Document_js_1 = __importDefault(require("./Document.js"));
const helpers_js_1 = require("./helpers.js");
class ServerManifest {
    get size() {
        return this.documents.size;
    }
    constructor(server) {
        this.documents = new Map();
        this._server = server;
    }
    set(entry) {
        return __awaiter(this, void 0, void 0, function* () {
            entry = yield this._toEntryPath(entry);
            if (!(yield this.has(entry))) {
                const document = new Document_js_1.default(entry, this._server);
                this.documents.set(entry, document);
            }
            return (yield this.get(entry));
        });
    }
    entries() {
        return this.map((document, index) => [document, index]);
    }
    find(id) {
        var _a;
        return (_a = this.values().find(document => document.id === id)) !== null && _a !== void 0 ? _a : null;
    }
    forEach(callback) {
        this.values().forEach(callback);
    }
    get(entry) {
        return __awaiter(this, void 0, void 0, function* () {
            var _a;
            entry = yield this._toEntryPath(entry);
            return (_a = this.values().find(document => document.entry === entry)) !== null && _a !== void 0 ? _a : null;
        });
    }
    has(entry) {
        return __awaiter(this, void 0, void 0, function* () {
            entry = yield this._toEntryPath(entry);
            return (yield this.get(entry)) !== null;
        });
    }
    load(hash) {
        for (const entry of Object.values(hash)) {
            this.set(entry);
        }
        return this;
    }
    map(callback) {
        return this.values().map(callback);
    }
    open(file) {
        return __awaiter(this, void 0, void 0, function* () {
            const json = yield promises_1.default.readFile(file, 'utf8');
            const hash = JSON.parse(json);
            return this.load(hash);
        });
    }
    save(file) {
        return __awaiter(this, void 0, void 0, function* () {
            const hash = this.toJSON();
            const json = JSON.stringify(hash, null, 2);
            yield (0, helpers_js_1.writeFile)(file, json);
            return this;
        });
    }
    toJSON() {
        return Object.fromEntries(this.values().map(document => [document.id, document.entry]));
    }
    values() {
        return Array.from(this.documents.values());
    }
    _toEntryPath(entry) {
        return __awaiter(this, void 0, void 0, function* () {
            const original = entry;
            const moduleIndex = entry.lastIndexOf('node_modules/');
            if (moduleIndex >= 0) {
                entry = entry.substring(moduleIndex + 13);
            }
            if (!entry.startsWith(node_path_1.default.sep)
                && !entry.startsWith(`.${node_path_1.default.sep}`)
                && !entry.startsWith(`..${node_path_1.default.sep}`)) {
                return entry;
            }
            if (entry.startsWith('file://')) {
                entry = entry.slice(7);
            }
            if (entry.startsWith(`@${node_path_1.default.sep}`)) {
                return entry;
            }
            const loader = this._server.loader;
            entry = yield loader.absolute(entry);
            if (entry.startsWith(loader.cwd)) {
                return entry.replace(loader.cwd, '@');
            }
            throw new Exception_js_1.default(`Invalid entry file: ${original}`);
        });
    }
}
exports.default = ServerManifest;
