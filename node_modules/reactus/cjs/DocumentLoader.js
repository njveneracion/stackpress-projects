"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = __importDefault(require("node:path"));
class DocumentLoader {
    constructor(document) {
        this._document = document;
        this._server = document.server;
    }
    absolute() {
        return __awaiter(this, void 0, void 0, function* () {
            const loader = this._server.loader;
            return yield loader.absolute(this._document.entry);
        });
    }
    import() {
        return __awaiter(this, void 0, void 0, function* () {
            const { loader, production } = this._server;
            if (production) {
                const pagePath = this._server.paths.page;
                const filepath = node_path_1.default.join(pagePath, `${this._document.id}.js`);
                return yield loader.import(filepath);
            }
            const { filepath } = yield loader.resolve(this._document.entry);
            return yield loader.fetch(`file://${filepath}`);
        });
    }
    relative(fromFile) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._document.entry.startsWith(`@${node_path_1.default.sep}`)) {
                const absolute = yield this.absolute();
                return this._server.loader.relative(fromFile, absolute);
            }
            return this._document.entry;
        });
    }
}
exports.default = DocumentLoader;
