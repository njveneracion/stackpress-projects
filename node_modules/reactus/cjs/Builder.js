"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = __importDefault(require("node:path"));
const Server_js_1 = __importDefault(require("./Server.js"));
const Exception_js_1 = __importDefault(require("./Exception.js"));
const helpers_js_1 = require("./helpers.js");
class Builder extends Server_js_1.default {
    buildAssets() {
        return __awaiter(this, void 0, void 0, function* () {
            const results = [];
            for (const document of this.manifest.values()) {
                const page = yield document.builder.buildAssets();
                if (!Array.isArray(page)) {
                    results.push(Exception_js_1.default.for(`Assets for '${document.entry}' was not generated`).withCode(500).toResponse());
                    continue;
                }
                for (const output of page) {
                    if (output.type !== 'asset')
                        continue;
                    if (!output.fileName.startsWith('assets/')) {
                        results.push(Exception_js_1.default.for(`${output.type} '${output.fileName}' was not saved`).withCode(404).toResponse());
                        continue;
                    }
                    const file = node_path_1.default.join(this.paths.asset, output.fileName.substring(7));
                    yield (0, helpers_js_1.writeFile)(file, output.source);
                    results.push({
                        code: 200,
                        status: 'OK',
                        results: {
                            type: 'asset',
                            id: document.id,
                            entry: document.entry,
                            contents: output.source,
                            destination: file
                        }
                    });
                }
            }
            return results;
        });
    }
    buildClients() {
        return __awaiter(this, void 0, void 0, function* () {
            const results = [];
            for (const document of this.manifest.values()) {
                const client = yield document.builder.buildClient();
                if (!Array.isArray(client)) {
                    results.push(Exception_js_1.default.for(`Client '${document.entry}' was not generated`).withCode(500).toResponse());
                    continue;
                }
                const chunk = client.find(output => output.type === 'chunk');
                if (!chunk) {
                    results.push(Exception_js_1.default.for(`Client '${document.entry}' was not generated`).withCode(404).toResponse());
                    continue;
                }
                const file = node_path_1.default.join(this.paths.client, `${document.id}.js`);
                yield (0, helpers_js_1.writeFile)(file, chunk.code);
                const absolute = yield document.loader.absolute();
                results.push({
                    code: 200,
                    status: 'OK',
                    results: {
                        type: 'client',
                        id: document.id,
                        entry: document.entry,
                        contents: chunk.code,
                        source: absolute,
                        destination: file
                    }
                });
            }
            return results;
        });
    }
    buildPages() {
        return __awaiter(this, void 0, void 0, function* () {
            const results = [];
            for (const document of this.manifest.values()) {
                const page = yield document.builder.buildPage();
                if (!Array.isArray(page)) {
                    results.push(Exception_js_1.default.for(`Page '${document.entry}' was not generated`).withCode(500).toResponse());
                    continue;
                }
                const chunk = page.find(output => output.type === 'chunk');
                if (!chunk) {
                    results.push(Exception_js_1.default.for(`Page '${document.entry}' was not generated`).withCode(404).toResponse());
                    continue;
                }
                const file = node_path_1.default.join(this.paths.page, `${document.id}.js`);
                yield (0, helpers_js_1.writeFile)(file, chunk.code);
                const absolute = yield document.loader.absolute();
                results.push({
                    code: 200,
                    status: 'OK',
                    results: {
                        type: 'page',
                        id: document.id,
                        entry: document.entry,
                        contents: chunk.code,
                        source: absolute,
                        destination: file
                    }
                });
            }
            return results;
        });
    }
}
exports.default = Builder;
