"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.id = id;
exports.renderJSX = renderJSX;
exports.writeFile = writeFile;
const promises_1 = __importDefault(require("node:fs/promises"));
const node_path_1 = __importDefault(require("node:path"));
const node_crypto_1 = __importDefault(require("node:crypto"));
const react_1 = require("react");
const server_1 = require("react-dom/server");
const jsx_runtime_1 = require("react/jsx-runtime");
const constants_js_1 = require("./constants.js");
function id(content, length = constants_js_1.HASH_LENGTH) {
    const md5 = node_crypto_1.default.createHash('md5').update(content).digest('hex');
    let num = parseInt(md5.slice(0, 12), 16);
    let hash = '';
    while (num > 0) {
        const index = num % 62;
        hash = constants_js_1.BASE62_ALPHABET[index] + hash;
        num = Math.floor(num / 62);
    }
    return hash.padStart(length, '0').slice(0, length);
}
function renderJSX(element, props = {}) {
    return element ? (0, server_1.renderToString)((0, jsx_runtime_1.jsx)(react_1.StrictMode, { children: (0, jsx_runtime_1.jsx)(element, Object.assign({}, props)) })) : '';
}
function writeFile(file, contents) {
    return __awaiter(this, void 0, void 0, function* () {
        const dirname = node_path_1.default.dirname(file);
        if (!(yield promises_1.default.stat(dirname).catch(() => false))) {
            yield promises_1.default.mkdir(dirname, { recursive: true });
        }
        yield promises_1.default.writeFile(file, contents);
        return file;
    });
}
