"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = __importDefault(require("node:path"));
const Exception_js_1 = __importDefault(require("./Exception.js"));
const helpers_js_1 = require("./helpers.js");
class DocumentRender {
    constructor(document) {
        this._document = document;
        this._server = document.server;
    }
    renderHMRClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const { resource, templates } = this._server;
            const dev = yield resource.dev();
            const template = templates.client;
            const url = yield this._renderVFS('hmr', template);
            const results = yield dev.transformRequest(url, { ssr: false });
            if (results === null) {
                throw Exception_js_1.default.for('File tsx to js transformation failed');
            }
            return results.code;
        });
    }
    renderMarkup() {
        return __awaiter(this, arguments, void 0, function* (props = {}) {
            return this._server.production
                ? yield this._renderMarkup(props)
                : yield this._renderDevMarkup(props);
        });
    }
    _renderDevMarkup() {
        return __awaiter(this, arguments, void 0, function* (props = {}) {
            const { id, loader } = this._document;
            const { resource, routes, templates } = this._server;
            const document = yield loader.import();
            const documentTemplate = templates.document;
            const dev = yield resource.dev();
            const clientRoute = `${routes.client}/${id}.tsx`;
            const html = yield dev.transformIndexHtml('', documentTemplate);
            const body = (0, helpers_js_1.renderJSX)(document.default, props);
            const head = (0, helpers_js_1.renderJSX)(document.Head, props);
            return html
                .replace(`<!--document-head-->`, head !== null && head !== void 0 ? head : '')
                .replace(`<!--document-body-->`, body !== null && body !== void 0 ? body : '')
                .replace(`<!--document-props-->`, JSON.stringify(props))
                .replace(`<!--document-client-->`, clientRoute);
        });
    }
    _renderMarkup() {
        return __awaiter(this, arguments, void 0, function* (props = {}) {
            const { id, loader } = this._document;
            const { routes, templates } = this._server;
            const document = yield loader.import();
            const documentTemplate = templates.document;
            const clientRoute = `${routes.client}/${id}.js`;
            const cssRoutes = (document.styles || []).map(style => `${routes.css}/${style}`);
            const body = (0, helpers_js_1.renderJSX)(document.default, props);
            const head = (0, helpers_js_1.renderJSX)(document.Head, Object.assign(Object.assign({}, props), { styles: cssRoutes }));
            return documentTemplate
                .replace(`<!--document-head-->`, head !== null && head !== void 0 ? head : '')
                .replace(`<!--document-body-->`, body !== null && body !== void 0 ? body : '')
                .replace(`<!--document-props-->`, JSON.stringify(props))
                .replace(`<!--document-client-->`, clientRoute);
        });
    }
    _renderVFS(name, template) {
        return __awaiter(this, void 0, void 0, function* () {
            const { vfs } = this._server;
            const { loader } = this._document;
            const absolute = yield loader.absolute();
            const pathname = absolute.replaceAll(node_path_1.default.sep, '/');
            const file = `${pathname}.${name}.tsx`;
            const relative = yield loader.relative(file);
            const code = template.replaceAll('{entry}', relative);
            return vfs.set(file, code);
        });
    }
}
exports.default = DocumentRender;
