"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NodeFS = exports.FileLoader = exports.Exception = exports.Server = exports.Document = exports.Builder = exports.VirtualServer = exports.ServerResource = exports.ServerManifest = exports.ServerLoader = exports.DocumentRender = exports.DocumentLoader = exports.DocumentBuilder = exports.vfs = exports.hmr = exports.file = exports.css = exports.writeFile = exports.renderJSX = exports.id = exports.CLIENT_TEMPLATE = exports.PAGE_TEMPLATE = exports.DOCUMENT_TEMPLATE = exports.HASH_LENGTH = exports.BASE62_ALPHABET = exports.VFS_RESOLVED = exports.VFS_PROTOCOL = void 0;
exports.dev = dev;
exports.build = build;
exports.serve = serve;
exports.default = engine;
var constants_js_1 = require("./constants.js");
Object.defineProperty(exports, "VFS_PROTOCOL", { enumerable: true, get: function () { return constants_js_1.VFS_PROTOCOL; } });
Object.defineProperty(exports, "VFS_RESOLVED", { enumerable: true, get: function () { return constants_js_1.VFS_RESOLVED; } });
Object.defineProperty(exports, "BASE62_ALPHABET", { enumerable: true, get: function () { return constants_js_1.BASE62_ALPHABET; } });
Object.defineProperty(exports, "HASH_LENGTH", { enumerable: true, get: function () { return constants_js_1.HASH_LENGTH; } });
Object.defineProperty(exports, "DOCUMENT_TEMPLATE", { enumerable: true, get: function () { return constants_js_1.DOCUMENT_TEMPLATE; } });
Object.defineProperty(exports, "PAGE_TEMPLATE", { enumerable: true, get: function () { return constants_js_1.PAGE_TEMPLATE; } });
Object.defineProperty(exports, "CLIENT_TEMPLATE", { enumerable: true, get: function () { return constants_js_1.CLIENT_TEMPLATE; } });
var helpers_js_1 = require("./helpers.js");
Object.defineProperty(exports, "id", { enumerable: true, get: function () { return helpers_js_1.id; } });
Object.defineProperty(exports, "renderJSX", { enumerable: true, get: function () { return helpers_js_1.renderJSX; } });
Object.defineProperty(exports, "writeFile", { enumerable: true, get: function () { return helpers_js_1.writeFile; } });
var plugins_js_1 = require("./plugins.js");
Object.defineProperty(exports, "css", { enumerable: true, get: function () { return plugins_js_1.css; } });
Object.defineProperty(exports, "file", { enumerable: true, get: function () { return plugins_js_1.file; } });
Object.defineProperty(exports, "hmr", { enumerable: true, get: function () { return plugins_js_1.hmr; } });
Object.defineProperty(exports, "vfs", { enumerable: true, get: function () { return plugins_js_1.vfs; } });
const FileLoader_1 = __importDefault(require("@stackpress/lib/FileLoader"));
exports.FileLoader = FileLoader_1.default;
const NodeFS_1 = __importDefault(require("@stackpress/lib/NodeFS"));
exports.NodeFS = NodeFS_1.default;
const DocumentBuilder_js_1 = __importDefault(require("./DocumentBuilder.js"));
exports.DocumentBuilder = DocumentBuilder_js_1.default;
const DocumentLoader_js_1 = __importDefault(require("./DocumentLoader.js"));
exports.DocumentLoader = DocumentLoader_js_1.default;
const DocumentRender_js_1 = __importDefault(require("./DocumentRender.js"));
exports.DocumentRender = DocumentRender_js_1.default;
const ServerLoader_js_1 = __importDefault(require("./ServerLoader.js"));
exports.ServerLoader = ServerLoader_js_1.default;
const ServerManifest_js_1 = __importDefault(require("./ServerManifest.js"));
exports.ServerManifest = ServerManifest_js_1.default;
const ServerResource_js_1 = __importDefault(require("./ServerResource.js"));
exports.ServerResource = ServerResource_js_1.default;
const VirtualServer_js_1 = __importDefault(require("./VirtualServer.js"));
exports.VirtualServer = VirtualServer_js_1.default;
const Builder_js_1 = __importDefault(require("./Builder.js"));
exports.Builder = Builder_js_1.default;
const Document_js_1 = __importDefault(require("./Document.js"));
exports.Document = Document_js_1.default;
const Server_js_1 = __importDefault(require("./Server.js"));
exports.Server = Server_js_1.default;
const Exception_js_1 = __importDefault(require("./Exception.js"));
exports.Exception = Exception_js_1.default;
function dev(options) {
    const config = Server_js_1.default.configure(Object.assign(Object.assign({}, options), { production: false }));
    const server = new Server_js_1.default(config);
    return {
        config,
        paths: server.paths,
        routes: server.routes,
        templates: server.templates,
        viteConfig: server.resource.config,
        get size() {
            return server.manifest.size;
        },
        server,
        dev: () => server.resource.dev(),
        http: (req, res) => server.http(req, res),
        middlewares: () => server.resource.middlewares(),
        plugins: () => server.resource.plugins(),
        entries: () => server.manifest.entries(),
        find: (id) => server.manifest.find(id),
        forEach: (callback) => server.manifest.forEach(callback),
        get: (entry) => server.manifest.get(entry),
        has: (entry) => server.manifest.has(entry),
        load: (hash) => server.manifest.load(hash),
        open: (file) => server.manifest.open(file),
        map: (callback) => server.manifest.map(callback),
        save: (file) => server.manifest.save(file),
        set: (entry) => server.manifest.set(entry),
        toJSON: () => server.manifest.toJSON(),
        values: () => server.manifest.values(),
        absolute: (entry) => server.manifest.set(entry).then(document => document.loader.absolute()),
        id: (entry) => server.manifest.set(entry).then(document => document.id),
        importPage: (entry) => server.manifest.set(entry).then(document => document.loader.import()),
        renderHMR: (entry) => server.manifest.set(entry).then(document => document.render.renderHMRClient()),
        render: (entry, props = {}) => server.manifest.set(entry).then(document => document.render.renderMarkup(props))
    };
}
function build(options) {
    const config = Server_js_1.default.configure(Object.assign(Object.assign({}, options), { production: false }));
    const builder = new Builder_js_1.default(config);
    return {
        config,
        paths: builder.paths,
        production: builder.production,
        routes: builder.routes,
        templates: builder.templates,
        viteConfig: builder.resource.config,
        get size() {
            return builder.manifest.size;
        },
        builder,
        build: (config) => builder.resource.build(config),
        plugins: () => builder.resource.plugins(),
        buildAllAssets: () => builder.buildAssets(),
        buildAllClients: () => builder.buildClients(),
        buildAllPages: () => builder.buildPages(),
        entries: () => builder.manifest.entries(),
        find: (id) => builder.manifest.find(id),
        forEach: (callback) => builder.manifest.forEach(callback),
        get: (entry) => builder.manifest.get(entry),
        has: (entry) => builder.manifest.has(entry),
        load: (hash) => builder.manifest.load(hash),
        open: (file) => builder.manifest.open(file),
        map: (callback) => builder.manifest.map(callback),
        save: (file) => builder.manifest.save(file),
        set: (entry) => builder.manifest.set(entry),
        toJSON: () => builder.manifest.toJSON(),
        values: () => builder.manifest.values(),
        absolute: (entry) => builder.manifest.set(entry).then(document => document.loader.absolute()),
        id: (entry) => builder.manifest.set(entry).then(document => document.id),
        buildAssets: (entry) => builder.manifest.set(entry).then(document => document.builder.buildAssets()),
        buildClient: (entry) => builder.manifest.set(entry).then(document => document.builder.buildClient()),
        buildPage: (entry, assets) => builder.manifest.set(entry).then(document => document.builder.buildPage(assets)),
    };
}
function serve(options) {
    const config = Server_js_1.default.configure(Object.assign(Object.assign({}, options), { production: true }));
    const server = new Server_js_1.default(config);
    return {
        config,
        paths: server.paths,
        routes: server.routes,
        templates: server.templates,
        server,
        absolute: (entry) => server.manifest.set(entry).then(document => document.loader.absolute()),
        id: (entry) => server.manifest.set(entry).then(document => document.id),
        importPage: (entry) => server.manifest.set(entry).then(document => document.loader.import()),
        render: (entry_1, ...args_1) => __awaiter(this, [entry_1, ...args_1], void 0, function* (entry, props = {}) {
            return server.manifest.set(entry).then(document => document.render.renderMarkup(props));
        })
    };
}
function engine(options) {
    const config = Server_js_1.default.configure(options);
    const builder = new Builder_js_1.default(config);
    return {
        config,
        paths: builder.paths,
        production: builder.production,
        routes: builder.routes,
        templates: builder.templates,
        viteConfig: builder.resource.config,
        get size() {
            return builder.manifest.size;
        },
        builder,
        build: (config) => builder.resource.build(config),
        dev: () => builder.resource.dev(),
        http: (req, res) => builder.http(req, res),
        middlewares: () => builder.resource.middlewares(),
        plugins: () => builder.resource.plugins(),
        fetch: (url) => builder.loader.fetch(url),
        import: (pathname, extnames = ['.js', '.tsx']) => builder.loader.import(pathname, extnames),
        resolve: (pathname, extnames = ['.js', '.tsx']) => builder.loader.resolve(pathname, extnames),
        buildAllAssets: () => builder.buildAssets(),
        buildAllClients: () => builder.buildClients(),
        buildAllPages: () => builder.buildPages(),
        entries: () => builder.manifest.entries(),
        find: (id) => builder.manifest.find(id),
        forEach: (callback) => builder.manifest.forEach(callback),
        get: (entry) => builder.manifest.get(entry),
        has: (entry) => builder.manifest.has(entry),
        load: (hash) => builder.manifest.load(hash),
        open: (file) => builder.manifest.open(file),
        map: (callback) => builder.manifest.map(callback),
        save: (file) => builder.manifest.save(file),
        set: (entry) => builder.manifest.set(entry),
        toJSON: () => builder.manifest.toJSON(),
        values: () => builder.manifest.values(),
        absolute: (entry) => builder.manifest.set(entry).then(document => document.loader.absolute()),
        id: (entry) => builder.manifest.set(entry).then(document => document.id),
        importPage: (entry) => builder.manifest.set(entry).then(document => document.loader.import()),
        relative: (entry, fromFile) => builder.manifest.set(entry).then(document => document.loader.relative(fromFile)),
        buildAssets: (entry) => builder.manifest.set(entry).then(document => document.builder.buildAssets()),
        buildClient: (entry) => builder.manifest.set(entry).then(document => document.builder.buildClient()),
        buildPage: (entry, assets) => builder.manifest.set(entry).then(document => document.builder.buildPage(assets)),
        renderHMR: (entry) => builder.manifest.set(entry).then(document => document.render.renderHMRClient()),
        render: (entry, props = {}) => builder.manifest.set(entry).then(document => document.render.renderMarkup(props))
    };
}
