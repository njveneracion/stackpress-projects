"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = __importDefault(require("node:path"));
class DocumentBuilder {
    constructor(document) {
        this._document = document;
        this._server = document.server;
    }
    buildAssets() {
        return __awaiter(this, void 0, void 0, function* () {
            const { resource, templates } = this._server;
            const pageScript = templates.page;
            const code = pageScript.replace('{styles}', '[]');
            const url = yield this._renderVFS('assets', code);
            const config = yield this._getAssetBuildOptions(url);
            const results = yield resource.build(config);
            return results.output;
        });
    }
    buildClient() {
        return __awaiter(this, void 0, void 0, function* () {
            const { resource, templates } = this._server;
            const template = templates.client;
            const url = yield this._renderVFS('client', template);
            const config = yield this._getClientBuildOptions(url);
            const results = yield resource.build(config);
            return results.output;
        });
    }
    buildPage(assets) {
        return __awaiter(this, void 0, void 0, function* () {
            const { resource, templates } = this._server;
            assets = assets || (yield this.buildAssets());
            const styles = assets
                .filter(asset => asset.type === 'asset')
                .filter(asset => asset.fileName.startsWith('assets/'))
                .filter(asset => node_path_1.default.extname(asset.fileName) === '.css')
                .map(asset => asset.fileName.substring(7));
            const pageScript = templates.page;
            const code = pageScript.replace('{styles}', JSON.stringify(styles));
            const url = yield this._renderVFS('page', code);
            const config = yield this._getPageBuildOptions(url);
            const results = yield resource.build(config);
            return results.output;
        });
    }
    _getAssetBuildOptions(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const { loader } = this._server;
            return {
                configFile: false,
                root: loader.cwd,
                build: {
                    write: false,
                    rollupOptions: {
                        input: url,
                        output: {
                            format: 'es',
                            entryFileNames: '[name].js',
                        }
                    }
                }
            };
        });
    }
    _getClientBuildOptions(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const { loader } = this._server;
            return {
                configFile: false,
                root: loader.cwd,
                build: {
                    write: false,
                    rollupOptions: {
                        input: url,
                        output: {
                            format: 'es',
                            entryFileNames: '[name].js',
                        }
                    }
                }
            };
        });
    }
    _getPageBuildOptions(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const { loader } = this._server;
            return {
                configFile: false,
                root: loader.cwd,
                build: {
                    write: false,
                    rollupOptions: {
                        preserveEntrySignatures: 'exports-only',
                        input: url,
                        external: ['react', 'react-dom', 'react/jsx-runtime'],
                        output: {
                            format: 'es',
                            entryFileNames: '[name].js',
                            exports: 'named',
                            globals: {
                                react: 'React',
                                'react-dom': 'ReactDOM',
                                'react/jsx-runtime': 'jsxRuntime'
                            }
                        }
                    }
                }
            };
        });
    }
    _renderVFS(name, template) {
        return __awaiter(this, void 0, void 0, function* () {
            const { vfs } = this._server;
            const { loader } = this._document;
            const absolute = yield loader.absolute();
            const file = `${absolute}.${name}.tsx`;
            const relative = yield loader.relative(file);
            const code = template.replaceAll('{entry}', relative);
            return vfs.set(file, code);
        });
    }
}
exports.default = DocumentBuilder;
