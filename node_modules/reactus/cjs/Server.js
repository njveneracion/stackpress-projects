"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = __importDefault(require("node:path"));
const NodeFS_1 = __importDefault(require("@stackpress/lib/NodeFS"));
const ServerLoader_js_1 = __importDefault(require("./ServerLoader.js"));
const ServerManifest_js_1 = __importDefault(require("./ServerManifest.js"));
const ServerResource_js_1 = __importDefault(require("./ServerResource.js"));
const VirtualServer_js_1 = __importDefault(require("./VirtualServer.js"));
const constants_js_1 = require("./constants.js");
class Server {
    static configure(options) {
        const cwd = options.cwd || process.cwd();
        return Object.freeze({
            assetPath: options.assetPath || node_path_1.default.join(cwd, '.reactus/assets'),
            basePath: options.basePath || '/',
            clientPath: options.clientPath || node_path_1.default.join(cwd, '.reactus/client'),
            clientRoute: options.clientRoute || '/client',
            clientTemplate: options.clientTemplate || constants_js_1.CLIENT_TEMPLATE,
            cssFiles: options.cssFiles,
            cssRoute: options.cssRoute || '/assets',
            cwd: options.cwd || process.cwd(),
            documentTemplate: options.documentTemplate || constants_js_1.DOCUMENT_TEMPLATE,
            fs: options.fs || new NodeFS_1.default(),
            optimizeDeps: options.optimizeDeps,
            pagePath: options.pagePath || node_path_1.default.join(cwd, '.reactus/page'),
            pageTemplate: options.pageTemplate || constants_js_1.PAGE_TEMPLATE,
            plugins: options.plugins || [],
            production: typeof options.production === 'boolean'
                ? options.production
                : true,
            vite: options.vite,
            watchIgnore: options.watchIgnore || []
        });
    }
    get paths() {
        return Object.freeze(this._paths);
    }
    get routes() {
        return Object.freeze(this._routes);
    }
    get templates() {
        return Object.freeze(this._templates);
    }
    constructor(config) {
        const cwd = config.cwd || process.cwd();
        this.vfs = new VirtualServer_js_1.default();
        this.production = config.production;
        this.manifest = new ServerManifest_js_1.default(this);
        this.resource = new ServerResource_js_1.default(this, {
            basePath: config.basePath,
            config: config.vite,
            cwd: cwd,
            optimizeDeps: config.optimizeDeps,
            plugins: config.plugins,
            watchIgnore: config.watchIgnore
        });
        this.loader = new ServerLoader_js_1.default({
            fs: config.fs,
            cwd: cwd,
            resource: this.resource,
            production: this.production
        });
        this._routes = {
            client: config.clientRoute,
            css: config.cssRoute
        };
        this._paths = {
            asset: config.assetPath,
            client: config.clientPath,
            css: config.cssFiles,
            page: config.pagePath
        };
        this._templates = {
            client: config.clientTemplate,
            document: config.documentTemplate,
            page: config.pageTemplate
        };
    }
    http(req, res) {
        return __awaiter(this, void 0, void 0, function* () {
            const middlewares = yield this.resource.middlewares();
            return yield new Promise(r => middlewares(req, res, r));
        });
    }
}
exports.default = Server;
