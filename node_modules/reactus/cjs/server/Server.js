"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = __importDefault(require("node:path"));
const FileLoader_1 = __importDefault(require("@stackpress/lib/FileLoader"));
class Server {
    get cwd() {
        return this.loader.cwd;
    }
    get fs() {
        return this.loader.fs;
    }
    get paths() {
        return Object.freeze(this._paths);
    }
    get routes() {
        return Object.freeze(this._routes);
    }
    get templates() {
        return Object.freeze(this._templates);
    }
    constructor(config) {
        const cwd = config.cwd || process.cwd();
        this.loader = new FileLoader_1.default(config.fs, cwd);
        this._routes = {
            client: config.clientRoute,
            css: config.cssRoute
        };
        this._paths = {
            page: config.pagePath
        };
        this._templates = {
            document: config.documentTemplate
        };
    }
    import(pathname_1) {
        return __awaiter(this, arguments, void 0, function* (pathname, extnames = ['.js']) {
            const meta = yield this.resolve(pathname, extnames);
            return yield this.loader.import(meta.filepath);
        });
    }
    resolve(pathname_1) {
        return __awaiter(this, arguments, void 0, function* (pathname, extnames = ['.js']) {
            const filepath = yield this.loader.resolveFile(pathname, extnames, this.cwd, true);
            const basepath = this.loader.basepath(filepath);
            const extname = node_path_1.default.extname(filepath);
            return { filepath, basepath, extname };
        });
    }
}
exports.default = Server;
