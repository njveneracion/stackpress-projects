"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = __importDefault(require("node:path"));
const helpers_js_1 = require("./helpers.js");
class Document {
    get id() {
        const hash = (0, helpers_js_1.id)(this.entry, 8);
        const basename = node_path_1.default.basename(this.entry);
        return `${basename}-${hash}`;
    }
    constructor(entry, server) {
        this.entry = entry;
        this.server = server;
    }
    import() {
        return __awaiter(this, void 0, void 0, function* () {
            const pagePath = this.server.paths.page;
            const filepath = node_path_1.default.join(pagePath, `${this.id}.js`);
            return yield this.server.import(filepath);
        });
    }
    renderMarkup() {
        return __awaiter(this, arguments, void 0, function* (props = {}) {
            const { routes, templates } = this.server;
            const document = yield this.import();
            const documentTemplate = templates.document;
            const clientRoute = `${routes.client}/${this.id}.js`;
            const cssRoutes = (document.styles || []).map(style => `${routes.css}/${style}`);
            const body = (0, helpers_js_1.renderJSX)(document.default, props);
            const head = (0, helpers_js_1.renderJSX)(document.Head, Object.assign(Object.assign({}, props), { styles: cssRoutes }));
            return documentTemplate
                .replace(`<!--document-head-->`, head !== null && head !== void 0 ? head : '')
                .replace(`<!--document-body-->`, body !== null && body !== void 0 ? body : '')
                .replace(`<!--document-props-->`, JSON.stringify(props))
                .replace(`<!--document-client-->`, clientRoute);
        });
    }
}
exports.default = Document;
