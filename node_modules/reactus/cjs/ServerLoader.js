"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_path_1 = __importDefault(require("node:path"));
const FileLoader_1 = __importDefault(require("@stackpress/lib/FileLoader"));
const NodeFS_1 = __importDefault(require("@stackpress/lib/NodeFS"));
class ServerLoader {
    get cwd() {
        return this._loader.cwd;
    }
    get fs() {
        return this._loader.fs;
    }
    constructor(config) {
        const { fs = new NodeFS_1.default(), cwd = process.cwd() } = config;
        this._loader = new FileLoader_1.default(fs, cwd);
        this._production = config.production;
        this._resource = config.resource;
    }
    absolute(pathname_1) {
        return __awaiter(this, arguments, void 0, function* (pathname, pwd = this.cwd) {
            return yield this._loader.absolute(pathname, pwd);
        });
    }
    fetch(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const dev = yield this._resource.dev();
            return yield dev.ssrLoadModule(url);
        });
    }
    import(pathname_1) {
        return __awaiter(this, arguments, void 0, function* (pathname, extnames = ['.js', '.tsx']) {
            const meta = yield this.resolve(pathname, extnames);
            if (this._production || meta.extname === '.js') {
                return yield this._loader.import(meta.filepath);
            }
            return yield this.fetch(`file://${meta.filepath}`);
        });
    }
    relative(pathname, require, withExtname = false) {
        return this._loader.relative(pathname, require, withExtname);
    }
    resolveFile(pathname, extnames = ['.js', '.json'], pwd = this._loader.cwd, exists = false) {
        return this._loader.resolveFile(pathname, extnames, pwd, exists);
    }
    resolve(pathname_1) {
        return __awaiter(this, arguments, void 0, function* (pathname, extnames = ['.js', '.tsx']) {
            const loader = this._loader;
            const filepath = yield loader.resolveFile(pathname, extnames, loader.cwd, true);
            const basepath = loader.basepath(filepath);
            const extname = node_path_1.default.extname(filepath);
            return { filepath, basepath, extname };
        });
    }
}
exports.default = ServerLoader;
