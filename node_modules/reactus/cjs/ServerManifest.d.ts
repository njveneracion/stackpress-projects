import type { DocumentIterator } from './types.js';
import Document from './Document.js';
import Server from './Server.js';
export default class ServerManifest {
    readonly documents: Map<string, Document>;
    protected _server: Server;
    get size(): number;
    constructor(server: Server);
    set(entry: string): Promise<Document>;
    entries(): [Document, number][];
    find(id: string): Document | null;
    forEach(callback: DocumentIterator<unknown>): void;
    get(entry: string): Promise<Document | null>;
    has(entry: string): Promise<boolean>;
    load(hash: Record<string, string>): this;
    map<T = unknown>(callback: DocumentIterator<T>): T[];
    open(file: string): Promise<this>;
    save(file: string): Promise<this>;
    toJSON(): {
        [k: string]: string;
    };
    values(): Document[];
    protected _toEntryPath(entry: string): Promise<string>;
}
