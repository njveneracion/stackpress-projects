import fs from 'node:fs/promises';
import path from 'node:path';
import crypto from 'node:crypto';
import { StrictMode } from 'react';
import { renderToString } from 'react-dom/server';
import { jsx } from 'react/jsx-runtime';
import { HASH_LENGTH, BASE62_ALPHABET } from './constants.js';
export function id(content, length = HASH_LENGTH) {
    const md5 = crypto.createHash('md5').update(content).digest('hex');
    let num = parseInt(md5.slice(0, 12), 16);
    let hash = '';
    while (num > 0) {
        const index = num % 62;
        hash = BASE62_ALPHABET[index] + hash;
        num = Math.floor(num / 62);
    }
    return hash.padStart(length, '0').slice(0, length);
}
export function renderJSX(element, props = {}) {
    return element ? renderToString(jsx(StrictMode, { children: jsx(element, { ...props }) })) : '';
}
export async function writeFile(file, contents) {
    const dirname = path.dirname(file);
    if (!await fs.stat(dirname).catch(() => false)) {
        await fs.mkdir(dirname, { recursive: true });
    }
    await fs.writeFile(file, contents);
    return file;
}
