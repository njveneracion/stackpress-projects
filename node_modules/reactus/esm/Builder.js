import path from 'node:path';
import Server from './Server.js';
import Exception from './Exception.js';
import { writeFile } from './helpers.js';
export default class Builder extends Server {
    async buildAssets() {
        const results = [];
        for (const document of this.manifest.values()) {
            const page = await document.builder.buildAssets();
            if (!Array.isArray(page)) {
                results.push(Exception.for(`Assets for '${document.entry}' was not generated`).withCode(500).toResponse());
                continue;
            }
            for (const output of page) {
                if (output.type !== 'asset')
                    continue;
                if (!output.fileName.startsWith('assets/')) {
                    results.push(Exception.for(`${output.type} '${output.fileName}' was not saved`).withCode(404).toResponse());
                    continue;
                }
                const file = path.join(this.paths.asset, output.fileName.substring(7));
                await writeFile(file, output.source);
                results.push({
                    code: 200,
                    status: 'OK',
                    results: {
                        type: 'asset',
                        id: document.id,
                        entry: document.entry,
                        contents: output.source,
                        destination: file
                    }
                });
            }
        }
        return results;
    }
    async buildClients() {
        const results = [];
        for (const document of this.manifest.values()) {
            const client = await document.builder.buildClient();
            if (!Array.isArray(client)) {
                results.push(Exception.for(`Client '${document.entry}' was not generated`).withCode(500).toResponse());
                continue;
            }
            const chunk = client.find(output => output.type === 'chunk');
            if (!chunk) {
                results.push(Exception.for(`Client '${document.entry}' was not generated`).withCode(404).toResponse());
                continue;
            }
            const file = path.join(this.paths.client, `${document.id}.js`);
            await writeFile(file, chunk.code);
            const absolute = await document.loader.absolute();
            results.push({
                code: 200,
                status: 'OK',
                results: {
                    type: 'client',
                    id: document.id,
                    entry: document.entry,
                    contents: chunk.code,
                    source: absolute,
                    destination: file
                }
            });
        }
        return results;
    }
    async buildPages() {
        const results = [];
        for (const document of this.manifest.values()) {
            const page = await document.builder.buildPage();
            if (!Array.isArray(page)) {
                results.push(Exception.for(`Page '${document.entry}' was not generated`).withCode(500).toResponse());
                continue;
            }
            const chunk = page.find(output => output.type === 'chunk');
            if (!chunk) {
                results.push(Exception.for(`Page '${document.entry}' was not generated`).withCode(404).toResponse());
                continue;
            }
            const file = path.join(this.paths.page, `${document.id}.js`);
            await writeFile(file, chunk.code);
            const absolute = await document.loader.absolute();
            results.push({
                code: 200,
                status: 'OK',
                results: {
                    type: 'page',
                    id: document.id,
                    entry: document.entry,
                    contents: chunk.code,
                    source: absolute,
                    destination: file
                }
            });
        }
        return results;
    }
}
