import NodeFS from '@stackpress/lib/NodeFS';
import ServerLoader from './ServerLoader.js';
import ServerManifest from './ServerManifest.js';
import ServerResource from './ServerResource.js';
import VirtualServer from './VirtualServer.js';
import type { IM, SR, ServerConfig } from './types.js';
export default class Server {
    static configure(options: Partial<ServerConfig>): Readonly<{
        assetPath: string;
        basePath: string;
        clientPath: string;
        clientRoute: string;
        clientTemplate: string;
        cssFiles: string[] | undefined;
        cssRoute: string;
        cwd: string;
        documentTemplate: string;
        fs: import("@stackpress/lib/types").FileSystem | NodeFS;
        optimizeDeps: import("vite").DepOptimizationOptions | undefined;
        pagePath: string;
        pageTemplate: string;
        plugins: import("vite").PluginOption[];
        production: boolean;
        vite: import("vite").InlineConfig | undefined;
        watchIgnore: string[];
    }>;
    readonly loader: ServerLoader;
    readonly manifest: ServerManifest;
    readonly resource: ServerResource;
    readonly production: boolean;
    readonly vfs: VirtualServer;
    protected _paths: {
        asset: string;
        client: string;
        css?: string[];
        head?: string;
        page: string;
    };
    protected _routes: {
        client: string;
        css: string;
    };
    protected _templates: {
        client: string;
        document: string;
        page: string;
    };
    get paths(): Readonly<{
        asset: string;
        client: string;
        css?: string[];
        head?: string;
        page: string;
    }>;
    get routes(): Readonly<{
        client: string;
        css: string;
    }>;
    get templates(): Readonly<{
        client: string;
        document: string;
        page: string;
    }>;
    constructor(config: ServerConfig);
    http(req: IM, res: SR): Promise<unknown>;
}
