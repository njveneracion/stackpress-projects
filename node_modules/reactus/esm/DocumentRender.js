import path from 'node:path';
import Exception from './Exception.js';
import { renderJSX } from './helpers.js';
export default class DocumentRender {
    _document;
    _server;
    constructor(document) {
        this._document = document;
        this._server = document.server;
    }
    async renderHMRClient() {
        const { resource, templates } = this._server;
        const dev = await resource.dev();
        const template = templates.client;
        const url = await this._renderVFS('hmr', template);
        const results = await dev.transformRequest(url, { ssr: false });
        if (results === null) {
            throw Exception.for('File tsx to js transformation failed');
        }
        return results.code;
    }
    async renderMarkup(props = {}) {
        return this._server.production
            ? await this._renderMarkup(props)
            : await this._renderDevMarkup(props);
    }
    async _renderDevMarkup(props = {}) {
        const { id, loader } = this._document;
        const { resource, routes, templates } = this._server;
        const document = await loader.import();
        const documentTemplate = templates.document;
        const dev = await resource.dev();
        const clientRoute = `${routes.client}/${id}.tsx`;
        const html = await dev.transformIndexHtml('', documentTemplate);
        const body = renderJSX(document.default, props);
        const head = renderJSX(document.Head, props);
        return html
            .replace(`<!--document-head-->`, head ?? '')
            .replace(`<!--document-body-->`, body ?? '')
            .replace(`<!--document-props-->`, JSON.stringify(props))
            .replace(`<!--document-client-->`, clientRoute);
    }
    async _renderMarkup(props = {}) {
        const { id, loader } = this._document;
        const { routes, templates } = this._server;
        const document = await loader.import();
        const documentTemplate = templates.document;
        const clientRoute = `${routes.client}/${id}.js`;
        const cssRoutes = (document.styles || []).map(style => `${routes.css}/${style}`);
        const body = renderJSX(document.default, props);
        const head = renderJSX(document.Head, {
            ...props,
            styles: cssRoutes
        });
        return documentTemplate
            .replace(`<!--document-head-->`, head ?? '')
            .replace(`<!--document-body-->`, body ?? '')
            .replace(`<!--document-props-->`, JSON.stringify(props))
            .replace(`<!--document-client-->`, clientRoute);
    }
    async _renderVFS(name, template) {
        const { vfs } = this._server;
        const { loader } = this._document;
        const absolute = await loader.absolute();
        const pathname = absolute.replaceAll(path.sep, '/');
        const file = `${pathname}.${name}.tsx`;
        const relative = await loader.relative(file);
        const code = template.replaceAll('{entry}', relative);
        return vfs.set(file, code);
    }
}
