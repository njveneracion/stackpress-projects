import path from 'node:path';
import NodeFS from '@stackpress/lib/NodeFS';
import ServerLoader from './ServerLoader.js';
import ServerManifest from './ServerManifest.js';
import ServerResource from './ServerResource.js';
import VirtualServer from './VirtualServer.js';
import { PAGE_TEMPLATE, CLIENT_TEMPLATE, DOCUMENT_TEMPLATE } from './constants.js';
export default class Server {
    static configure(options) {
        const cwd = options.cwd || process.cwd();
        return Object.freeze({
            assetPath: options.assetPath || path.join(cwd, '.reactus/assets'),
            basePath: options.basePath || '/',
            clientPath: options.clientPath || path.join(cwd, '.reactus/client'),
            clientRoute: options.clientRoute || '/client',
            clientTemplate: options.clientTemplate || CLIENT_TEMPLATE,
            cssFiles: options.cssFiles,
            cssRoute: options.cssRoute || '/assets',
            cwd: options.cwd || process.cwd(),
            documentTemplate: options.documentTemplate || DOCUMENT_TEMPLATE,
            fs: options.fs || new NodeFS(),
            optimizeDeps: options.optimizeDeps,
            pagePath: options.pagePath || path.join(cwd, '.reactus/page'),
            pageTemplate: options.pageTemplate || PAGE_TEMPLATE,
            plugins: options.plugins || [],
            production: typeof options.production === 'boolean'
                ? options.production
                : true,
            vite: options.vite,
            watchIgnore: options.watchIgnore || []
        });
    }
    loader;
    manifest;
    resource;
    production;
    vfs;
    _paths;
    _routes;
    _templates;
    get paths() {
        return Object.freeze(this._paths);
    }
    get routes() {
        return Object.freeze(this._routes);
    }
    get templates() {
        return Object.freeze(this._templates);
    }
    constructor(config) {
        const cwd = config.cwd || process.cwd();
        this.vfs = new VirtualServer();
        this.production = config.production;
        this.manifest = new ServerManifest(this);
        this.resource = new ServerResource(this, {
            basePath: config.basePath,
            config: config.vite,
            cwd: cwd,
            optimizeDeps: config.optimizeDeps,
            plugins: config.plugins,
            watchIgnore: config.watchIgnore
        });
        this.loader = new ServerLoader({
            fs: config.fs,
            cwd: cwd,
            resource: this.resource,
            production: this.production
        });
        this._routes = {
            client: config.clientRoute,
            css: config.cssRoute
        };
        this._paths = {
            asset: config.assetPath,
            client: config.clientPath,
            css: config.cssFiles,
            page: config.pagePath
        };
        this._templates = {
            client: config.clientTemplate,
            document: config.documentTemplate,
            page: config.pageTemplate
        };
    }
    async http(req, res) {
        const middlewares = await this.resource.middlewares();
        return await new Promise(r => middlewares(req, res, r));
    }
}
