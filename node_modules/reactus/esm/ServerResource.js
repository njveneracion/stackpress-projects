import { css, file, hmr, vfs } from './plugins.js';
export default class ServerResource {
    base;
    _config;
    _cwd;
    _dev = null;
    _ignore;
    _optimize;
    _plugins;
    _server;
    get config() {
        return this._config ? Object.freeze(this._config) : null;
    }
    constructor(server, config) {
        this._cwd = config.cwd;
        this.base = config.basePath || '/';
        this._config = config.config;
        this._ignore = config.watchIgnore || [];
        this._optimize = config.optimizeDeps;
        this._plugins = config.plugins;
        this._server = server;
    }
    async build(config) {
        const { build } = await import('vite');
        const settings = { ...config };
        settings.plugins = await this.plugins();
        return build({ logLevel: 'silent', ...settings });
    }
    async dev() {
        if (!this._dev) {
            this._dev = await this._createServer();
            this._dev.middlewares.use(hmr(this._server));
        }
        return this._dev;
    }
    async middlewares() {
        const dev = await this.dev();
        return dev.middlewares;
    }
    async plugins() {
        const react = await import('@vitejs/plugin-react');
        const injectCSS = this._server.paths.css
            ? css(this._server.paths.css)
            : null;
        return [
            injectCSS,
            vfs(this._server.vfs),
            file(this._server.loader),
            react.default(),
            ...this._plugins,
        ];
    }
    async _createServer() {
        const vite = {
            server: {
                middlewareMode: true,
                watch: { ignored: this._ignore }
            },
            appType: 'custom',
            base: this.base,
            root: this._cwd,
            mode: 'development',
            optimizeDeps: this._optimize,
            ...this._config
        };
        const { createServer } = await import('vite');
        const config = { ...vite };
        config.plugins = await this.plugins();
        return await createServer(config);
    }
}
