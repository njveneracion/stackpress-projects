import path from 'node:path';
import FileLoader from '@stackpress/lib/FileLoader';
import NodeFS from '@stackpress/lib/NodeFS';
export default class ServerLoader {
    _loader;
    _production;
    _resource;
    get cwd() {
        return this._loader.cwd;
    }
    get fs() {
        return this._loader.fs;
    }
    constructor(config) {
        const { fs = new NodeFS(), cwd = process.cwd() } = config;
        this._loader = new FileLoader(fs, cwd);
        this._production = config.production;
        this._resource = config.resource;
    }
    async absolute(pathname, pwd = this.cwd) {
        return await this._loader.absolute(pathname, pwd);
    }
    async fetch(url) {
        const dev = await this._resource.dev();
        return await dev.ssrLoadModule(url);
    }
    async import(pathname, extnames = ['.js', '.tsx']) {
        const meta = await this.resolve(pathname, extnames);
        if (this._production || meta.extname === '.js') {
            return await this._loader.import(meta.filepath);
        }
        return await this.fetch(`file://${meta.filepath}`);
    }
    relative(pathname, require, withExtname = false) {
        return this._loader.relative(pathname, require, withExtname);
    }
    resolveFile(pathname, extnames = ['.js', '.json'], pwd = this._loader.cwd, exists = false) {
        return this._loader.resolveFile(pathname, extnames, pwd, exists);
    }
    async resolve(pathname, extnames = ['.js', '.tsx']) {
        const loader = this._loader;
        const filepath = await loader.resolveFile(pathname, extnames, loader.cwd, true);
        const basepath = loader.basepath(filepath);
        const extname = path.extname(filepath);
        return { filepath, basepath, extname };
    }
}
