export { VFS_PROTOCOL, VFS_RESOLVED, BASE62_ALPHABET, HASH_LENGTH, DOCUMENT_TEMPLATE, PAGE_TEMPLATE, CLIENT_TEMPLATE } from './constants.js';
export { id, renderJSX, writeFile } from './helpers.js';
export { css, file, hmr, vfs } from './plugins.js';
import FileLoader from '@stackpress/lib/FileLoader';
import NodeFS from '@stackpress/lib/NodeFS';
import DocumentBuilder from './DocumentBuilder.js';
import DocumentLoader from './DocumentLoader.js';
import DocumentRender from './DocumentRender.js';
import ServerLoader from './ServerLoader.js';
import ServerManifest from './ServerManifest.js';
import ServerResource from './ServerResource.js';
import VirtualServer from './VirtualServer.js';
import Builder from './Builder.js';
import Document from './Document.js';
import Server from './Server.js';
import Exception from './Exception.js';
export { DocumentBuilder, DocumentLoader, DocumentRender, ServerLoader, ServerManifest, ServerResource, VirtualServer, Builder, Document, Server, Exception, FileLoader, NodeFS };
export function dev(options) {
    const config = Server.configure({ ...options, production: false });
    const server = new Server(config);
    return {
        config,
        paths: server.paths,
        routes: server.routes,
        templates: server.templates,
        viteConfig: server.resource.config,
        get size() {
            return server.manifest.size;
        },
        server,
        dev: () => server.resource.dev(),
        http: (req, res) => server.http(req, res),
        middlewares: () => server.resource.middlewares(),
        plugins: () => server.resource.plugins(),
        entries: () => server.manifest.entries(),
        find: (id) => server.manifest.find(id),
        forEach: (callback) => server.manifest.forEach(callback),
        get: (entry) => server.manifest.get(entry),
        has: (entry) => server.manifest.has(entry),
        load: (hash) => server.manifest.load(hash),
        open: (file) => server.manifest.open(file),
        map: (callback) => server.manifest.map(callback),
        save: (file) => server.manifest.save(file),
        set: (entry) => server.manifest.set(entry),
        toJSON: () => server.manifest.toJSON(),
        values: () => server.manifest.values(),
        absolute: (entry) => server.manifest.set(entry).then(document => document.loader.absolute()),
        id: (entry) => server.manifest.set(entry).then(document => document.id),
        importPage: (entry) => server.manifest.set(entry).then(document => document.loader.import()),
        renderHMR: (entry) => server.manifest.set(entry).then(document => document.render.renderHMRClient()),
        render: (entry, props = {}) => server.manifest.set(entry).then(document => document.render.renderMarkup(props))
    };
}
export function build(options) {
    const config = Server.configure({ ...options, production: false });
    const builder = new Builder(config);
    return {
        config,
        paths: builder.paths,
        production: builder.production,
        routes: builder.routes,
        templates: builder.templates,
        viteConfig: builder.resource.config,
        get size() {
            return builder.manifest.size;
        },
        builder,
        build: (config) => builder.resource.build(config),
        plugins: () => builder.resource.plugins(),
        buildAllAssets: () => builder.buildAssets(),
        buildAllClients: () => builder.buildClients(),
        buildAllPages: () => builder.buildPages(),
        entries: () => builder.manifest.entries(),
        find: (id) => builder.manifest.find(id),
        forEach: (callback) => builder.manifest.forEach(callback),
        get: (entry) => builder.manifest.get(entry),
        has: (entry) => builder.manifest.has(entry),
        load: (hash) => builder.manifest.load(hash),
        open: (file) => builder.manifest.open(file),
        map: (callback) => builder.manifest.map(callback),
        save: (file) => builder.manifest.save(file),
        set: (entry) => builder.manifest.set(entry),
        toJSON: () => builder.manifest.toJSON(),
        values: () => builder.manifest.values(),
        absolute: (entry) => builder.manifest.set(entry).then(document => document.loader.absolute()),
        id: (entry) => builder.manifest.set(entry).then(document => document.id),
        buildAssets: (entry) => builder.manifest.set(entry).then(document => document.builder.buildAssets()),
        buildClient: (entry) => builder.manifest.set(entry).then(document => document.builder.buildClient()),
        buildPage: (entry, assets) => builder.manifest.set(entry).then(document => document.builder.buildPage(assets)),
    };
}
export function serve(options) {
    const config = Server.configure({ ...options, production: true });
    const server = new Server(config);
    return {
        config,
        paths: server.paths,
        routes: server.routes,
        templates: server.templates,
        server,
        absolute: (entry) => server.manifest.set(entry).then(document => document.loader.absolute()),
        id: (entry) => server.manifest.set(entry).then(document => document.id),
        importPage: (entry) => server.manifest.set(entry).then(document => document.loader.import()),
        render: async (entry, props = {}) => server.manifest.set(entry).then(document => document.render.renderMarkup(props))
    };
}
export default function engine(options) {
    const config = Server.configure(options);
    const builder = new Builder(config);
    return {
        config,
        paths: builder.paths,
        production: builder.production,
        routes: builder.routes,
        templates: builder.templates,
        viteConfig: builder.resource.config,
        get size() {
            return builder.manifest.size;
        },
        builder,
        build: (config) => builder.resource.build(config),
        dev: () => builder.resource.dev(),
        http: (req, res) => builder.http(req, res),
        middlewares: () => builder.resource.middlewares(),
        plugins: () => builder.resource.plugins(),
        fetch: (url) => builder.loader.fetch(url),
        import: (pathname, extnames = ['.js', '.tsx']) => builder.loader.import(pathname, extnames),
        resolve: (pathname, extnames = ['.js', '.tsx']) => builder.loader.resolve(pathname, extnames),
        buildAllAssets: () => builder.buildAssets(),
        buildAllClients: () => builder.buildClients(),
        buildAllPages: () => builder.buildPages(),
        entries: () => builder.manifest.entries(),
        find: (id) => builder.manifest.find(id),
        forEach: (callback) => builder.manifest.forEach(callback),
        get: (entry) => builder.manifest.get(entry),
        has: (entry) => builder.manifest.has(entry),
        load: (hash) => builder.manifest.load(hash),
        open: (file) => builder.manifest.open(file),
        map: (callback) => builder.manifest.map(callback),
        save: (file) => builder.manifest.save(file),
        set: (entry) => builder.manifest.set(entry),
        toJSON: () => builder.manifest.toJSON(),
        values: () => builder.manifest.values(),
        absolute: (entry) => builder.manifest.set(entry).then(document => document.loader.absolute()),
        id: (entry) => builder.manifest.set(entry).then(document => document.id),
        importPage: (entry) => builder.manifest.set(entry).then(document => document.loader.import()),
        relative: (entry, fromFile) => builder.manifest.set(entry).then(document => document.loader.relative(fromFile)),
        buildAssets: (entry) => builder.manifest.set(entry).then(document => document.builder.buildAssets()),
        buildClient: (entry) => builder.manifest.set(entry).then(document => document.builder.buildClient()),
        buildPage: (entry, assets) => builder.manifest.set(entry).then(document => document.builder.buildPage(assets)),
        renderHMR: (entry) => builder.manifest.set(entry).then(document => document.render.renderHMRClient()),
        render: (entry, props = {}) => builder.manifest.set(entry).then(document => document.render.renderMarkup(props))
    };
}
